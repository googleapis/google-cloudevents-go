// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v3.21.6
// source: firebase/dataconnect/v1/data.proto

package dataconnectdata

import (
	code "google.golang.org/genproto/googleapis/rpc/code"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Configure how much SQL Schema to perform for the given schema.
type SqlSchemaValidation int32

const (
	// Unspecified SQL schema validation.
	// Default to STRICT.
	SqlSchemaValidation_SQL_SCHEMA_VALIDATION_UNSPECIFIED SqlSchemaValidation = 0
	// Skip no SQL schema validation. Use it with extreme caution.
	// CreateSchema or UpdateSchema will succeed even if SQL database is
	// unavailable or SQL schema is incompatible.
	// Generated SQL may fail at execution time.
	SqlSchemaValidation_NONE SqlSchemaValidation = 1
	// Connect to the SQL database and validate that the SQL DDL matches the
	// schema exactly. Surface any discrepancies as `FAILED_PRECONDITION` with an
	// `IncompatibleSqlSchemaError` error detail.
	SqlSchemaValidation_STRICT SqlSchemaValidation = 2
	// Connect to the SQL database and validate that the SQL DDL has all the SQL
	// resources used in the given Firebase Data Connect Schema. Surface any
	// missing resources as `FAILED_PRECONDITION` with an
	// `IncompatibleSqlSchemaError` error detail. Succeed even if there are
	// unknown tables and columns.
	SqlSchemaValidation_COMPATIBLE SqlSchemaValidation = 3
)

// Enum value maps for SqlSchemaValidation.
var (
	SqlSchemaValidation_name = map[int32]string{
		0: "SQL_SCHEMA_VALIDATION_UNSPECIFIED",
		1: "NONE",
		2: "STRICT",
		3: "COMPATIBLE",
	}
	SqlSchemaValidation_value = map[string]int32{
		"SQL_SCHEMA_VALIDATION_UNSPECIFIED": 0,
		"NONE":                              1,
		"STRICT":                            2,
		"COMPATIBLE":                        3,
	}
)

func (x SqlSchemaValidation) Enum() *SqlSchemaValidation {
	p := new(SqlSchemaValidation)
	*p = x
	return p
}

func (x SqlSchemaValidation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SqlSchemaValidation) Descriptor() protoreflect.EnumDescriptor {
	return file_firebase_dataconnect_v1_data_proto_enumTypes[0].Descriptor()
}

func (SqlSchemaValidation) Type() protoreflect.EnumType {
	return &file_firebase_dataconnect_v1_data_proto_enumTypes[0]
}

func (x SqlSchemaValidation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SqlSchemaValidation.Descriptor instead.
func (SqlSchemaValidation) EnumDescriptor() ([]byte, []int) {
	return file_firebase_dataconnect_v1_data_proto_rawDescGZIP(), []int{0}
}

// Configure how to perform SQL Schema migration before deploying the Schema.
type SqlSchemaMigration int32

const (
	// Unspecified SQL schema migration.
	SqlSchemaMigration_SQL_SCHEMA_MIGRATION_UNSPECIFIED SqlSchemaMigration = 0
	// Connect to the SQL database and identify any missing SQL resources used
	// in the given Firebase Data Connect Schema.
	// Automatically create necessary SQL resources (SQL table, column, etc)
	// before deploying the schema.
	// During migration steps, the SQL Schema must comply with the previous
	// before_deploy setting in case the migration is interrupted.
	// Therefore, the previous before_deploy setting must not be
	// `schema_validation=STRICT`.
	SqlSchemaMigration_MIGRATE_COMPATIBLE SqlSchemaMigration = 1
)

// Enum value maps for SqlSchemaMigration.
var (
	SqlSchemaMigration_name = map[int32]string{
		0: "SQL_SCHEMA_MIGRATION_UNSPECIFIED",
		1: "MIGRATE_COMPATIBLE",
	}
	SqlSchemaMigration_value = map[string]int32{
		"SQL_SCHEMA_MIGRATION_UNSPECIFIED": 0,
		"MIGRATE_COMPATIBLE":               1,
	}
)

func (x SqlSchemaMigration) Enum() *SqlSchemaMigration {
	p := new(SqlSchemaMigration)
	*p = x
	return p
}

func (x SqlSchemaMigration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SqlSchemaMigration) Descriptor() protoreflect.EnumDescriptor {
	return file_firebase_dataconnect_v1_data_proto_enumTypes[1].Descriptor()
}

func (SqlSchemaMigration) Type() protoreflect.EnumType {
	return &file_firebase_dataconnect_v1_data_proto_enumTypes[1]
}

func (x SqlSchemaMigration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SqlSchemaMigration.Descriptor instead.
func (SqlSchemaMigration) EnumDescriptor() ([]byte, []int) {
	return file_firebase_dataconnect_v1_data_proto_rawDescGZIP(), []int{1}
}

// A Firebase Data Connect service.
type Service struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier. The relative resource name of the Firebase Data Connect
	// service, in the format:
	// ```
	// projects/{project}/locations/{location}/services/{service}
	// ```
	// Note that the service ID is specific to Firebase Data Connect and does not
	// correspond to any of the instance IDs of the underlying data source
	// connections.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. [Output only] Create time stamp.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. [Output only] Update time stamp.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional. Labels as key value pairs.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Optional. Stores small amounts of arbitrary data.
	Annotations map[string]string `protobuf:"bytes,5,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Output only. System-assigned, unique identifier.
	Uid string `protobuf:"bytes,6,opt,name=uid,proto3" json:"uid,omitempty"`
	// Output only. A field that if true, indicates that the system is working
	// update the service.
	Reconciling bool `protobuf:"varint,7,opt,name=reconciling,proto3" json:"reconciling,omitempty"`
	// Optional. Mutable human-readable name. 63 character limit.
	DisplayName string `protobuf:"bytes,8,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output only. This checksum is computed by the server based on the value of
	// other fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	// [AIP-154](https://google.aip.dev/154)
	Etag          string `protobuf:"bytes,99,opt,name=etag,proto3" json:"etag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service) Reset() {
	*x = Service{}
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_firebase_dataconnect_v1_data_proto_rawDescGZIP(), []int{0}
}

func (x *Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Service) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Service) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Service) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Service) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Service) GetReconciling() bool {
	if x != nil {
		return x.Reconciling
	}
	return false
}

func (x *Service) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Service) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

// A data source that backs Firebase Data Connect services.
type Datasource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Settings and configurations of the underlying data source.
	//
	// Types that are valid to be assigned to Configuration:
	//
	//	*Datasource_Postgresql
	Configuration isDatasource_Configuration `protobuf_oneof:"configuration"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Datasource) Reset() {
	*x = Datasource{}
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Datasource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Datasource) ProtoMessage() {}

func (x *Datasource) ProtoReflect() protoreflect.Message {
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Datasource.ProtoReflect.Descriptor instead.
func (*Datasource) Descriptor() ([]byte, []int) {
	return file_firebase_dataconnect_v1_data_proto_rawDescGZIP(), []int{1}
}

func (x *Datasource) GetConfiguration() isDatasource_Configuration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *Datasource) GetPostgresql() *PostgreSql {
	if x != nil {
		if x, ok := x.Configuration.(*Datasource_Postgresql); ok {
			return x.Postgresql
		}
	}
	return nil
}

type isDatasource_Configuration interface {
	isDatasource_Configuration()
}

type Datasource_Postgresql struct {
	// PostgreSQL configurations.
	Postgresql *PostgreSql `protobuf:"bytes,2,opt,name=postgresql,proto3,oneof"`
}

func (*Datasource_Postgresql) isDatasource_Configuration() {}

// Settings for PostgreSQL data source.
type PostgreSql struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configure the behavior before deploying this schema.
	// Default to `schema_validation=STRICT` if not specified.
	//
	// Types that are valid to be assigned to BeforeDeploy:
	//
	//	*PostgreSql_SchemaValidation
	//	*PostgreSql_SchemaMigration
	BeforeDeploy isPostgreSql_BeforeDeploy `protobuf_oneof:"before_deploy"`
	// Settings and configurations of the underlying database.
	//
	// Types that are valid to be assigned to Configuration:
	//
	//	*PostgreSql_Unlinked
	//	*PostgreSql_CloudSql
	Configuration isPostgreSql_Configuration `protobuf_oneof:"configuration"`
	// Required. Name of the PostgreSQL database.
	Database      string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostgreSql) Reset() {
	*x = PostgreSql{}
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgreSql) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSql) ProtoMessage() {}

func (x *PostgreSql) ProtoReflect() protoreflect.Message {
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSql.ProtoReflect.Descriptor instead.
func (*PostgreSql) Descriptor() ([]byte, []int) {
	return file_firebase_dataconnect_v1_data_proto_rawDescGZIP(), []int{2}
}

func (x *PostgreSql) GetBeforeDeploy() isPostgreSql_BeforeDeploy {
	if x != nil {
		return x.BeforeDeploy
	}
	return nil
}

func (x *PostgreSql) GetSchemaValidation() SqlSchemaValidation {
	if x != nil {
		if x, ok := x.BeforeDeploy.(*PostgreSql_SchemaValidation); ok {
			return x.SchemaValidation
		}
	}
	return SqlSchemaValidation_SQL_SCHEMA_VALIDATION_UNSPECIFIED
}

func (x *PostgreSql) GetSchemaMigration() SqlSchemaMigration {
	if x != nil {
		if x, ok := x.BeforeDeploy.(*PostgreSql_SchemaMigration); ok {
			return x.SchemaMigration
		}
	}
	return SqlSchemaMigration_SQL_SCHEMA_MIGRATION_UNSPECIFIED
}

func (x *PostgreSql) GetConfiguration() isPostgreSql_Configuration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *PostgreSql) GetUnlinked() bool {
	if x != nil {
		if x, ok := x.Configuration.(*PostgreSql_Unlinked); ok {
			return x.Unlinked
		}
	}
	return false
}

func (x *PostgreSql) GetCloudSql() *CloudSqlInstance {
	if x != nil {
		if x, ok := x.Configuration.(*PostgreSql_CloudSql); ok {
			return x.CloudSql
		}
	}
	return nil
}

func (x *PostgreSql) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type isPostgreSql_BeforeDeploy interface {
	isPostgreSql_BeforeDeploy()
}

type PostgreSql_SchemaValidation struct {
	// Optional. Configure how much Postgresql schema validation to perform.
	SchemaValidation SqlSchemaValidation `protobuf:"varint,3,opt,name=schema_validation,json=schemaValidation,proto3,enum=google.events.firebase.dataconnect.v1.SqlSchemaValidation,oneof"`
}

type PostgreSql_SchemaMigration struct {
	// Optional. Configure how to perform Postgresql schema migration.
	SchemaMigration SqlSchemaMigration `protobuf:"varint,5,opt,name=schema_migration,json=schemaMigration,proto3,enum=google.events.firebase.dataconnect.v1.SqlSchemaMigration,oneof"`
}

func (*PostgreSql_SchemaValidation) isPostgreSql_BeforeDeploy() {}

func (*PostgreSql_SchemaMigration) isPostgreSql_BeforeDeploy() {}

type isPostgreSql_Configuration interface {
	isPostgreSql_Configuration()
}

type PostgreSql_Unlinked struct {
	// No Postgres data source is linked.
	// If set, don't allow `database` and `schema_validation` to be configured.
	Unlinked bool `protobuf:"varint,4,opt,name=unlinked,proto3,oneof"`
}

type PostgreSql_CloudSql struct {
	// Cloud SQL configurations.
	CloudSql *CloudSqlInstance `protobuf:"bytes,2,opt,name=cloud_sql,json=cloudSql,proto3,oneof"`
}

func (*PostgreSql_Unlinked) isPostgreSql_Configuration() {}

func (*PostgreSql_CloudSql) isPostgreSql_Configuration() {}

// Settings for CloudSQL instance configuration.
type CloudSqlInstance struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. Name of the CloudSQL instance, in the format:
	// ```
	// projects/{project}/locations/{location}/instances/{instance}
	// ```
	Instance      string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloudSqlInstance) Reset() {
	*x = CloudSqlInstance{}
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudSqlInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudSqlInstance) ProtoMessage() {}

func (x *CloudSqlInstance) ProtoReflect() protoreflect.Message {
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudSqlInstance.ProtoReflect.Descriptor instead.
func (*CloudSqlInstance) Descriptor() ([]byte, []int) {
	return file_firebase_dataconnect_v1_data_proto_rawDescGZIP(), []int{3}
}

func (x *CloudSqlInstance) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

// The application schema of a Firebase Data Connect service.
type Schema struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier. The relative resource name of the schema, in the format:
	// ```
	// projects/{project}/locations/{location}/services/{service}/schemas/{schema}
	// ```
	// Right now, the only supported schema is "main".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. [Output only] Create time stamp.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. [Output only] Update time stamp.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional. Labels as key value pairs.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Optional. Stores small amounts of arbitrary data.
	Annotations map[string]string `protobuf:"bytes,5,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Required. The data sources linked in the schema.
	Datasources []*Datasource `protobuf:"bytes,11,rep,name=datasources,proto3" json:"datasources,omitempty"`
	// Required. The source files that comprise the application schema.
	Source *Source `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`
	// Output only. System-assigned, unique identifier.
	Uid string `protobuf:"bytes,8,opt,name=uid,proto3" json:"uid,omitempty"`
	// Output only. A field that if true, indicates that the system is working to
	// compile and deploy the schema.
	Reconciling bool `protobuf:"varint,9,opt,name=reconciling,proto3" json:"reconciling,omitempty"`
	// Optional. Mutable human-readable name. 63 character limit.
	DisplayName string `protobuf:"bytes,10,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output only. This checksum is computed by the server based on the value of
	// other fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	// [AIP-154](https://google.aip.dev/154)
	Etag          string `protobuf:"bytes,99,opt,name=etag,proto3" json:"etag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Schema) Reset() {
	*x = Schema{}
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_firebase_dataconnect_v1_data_proto_rawDescGZIP(), []int{4}
}

func (x *Schema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Schema) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Schema) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Schema) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Schema) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Schema) GetDatasources() []*Datasource {
	if x != nil {
		return x.Datasources
	}
	return nil
}

func (x *Schema) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Schema) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Schema) GetReconciling() bool {
	if x != nil {
		return x.Reconciling
	}
	return false
}

func (x *Schema) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Schema) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

// Connector consists of a set of operations, i.e. queries and mutations.
type Connector struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier. The relative resource name of the connector, in the format:
	// ```
	// projects/{project}/locations/{location}/services/{service}/connectors/{connector}
	// ```
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. [Output only] Create time stamp.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. [Output only] Update time stamp.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional. Labels as key value pairs.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Optional. Stores small amounts of arbitrary data.
	Annotations map[string]string `protobuf:"bytes,5,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Required. The source files that comprise the connector.
	Source *Source `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	// Output only. System-assigned, unique identifier.
	Uid string `protobuf:"bytes,7,opt,name=uid,proto3" json:"uid,omitempty"`
	// Output only. A field that if true, indicates that the system is working to
	// compile and deploy the connector.
	Reconciling bool `protobuf:"varint,8,opt,name=reconciling,proto3" json:"reconciling,omitempty"`
	// Optional. Mutable human-readable name. 63 character limit.
	DisplayName string `protobuf:"bytes,9,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output only. This checksum is computed by the server based on the value of
	// other fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	// [AIP-154](https://google.aip.dev/154)
	Etag          string `protobuf:"bytes,99,opt,name=etag,proto3" json:"etag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Connector) Reset() {
	*x = Connector{}
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connector) ProtoMessage() {}

func (x *Connector) ProtoReflect() protoreflect.Message {
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connector.ProtoReflect.Descriptor instead.
func (*Connector) Descriptor() ([]byte, []int) {
	return file_firebase_dataconnect_v1_data_proto_rawDescGZIP(), []int{5}
}

func (x *Connector) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Connector) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Connector) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Connector) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Connector) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Connector) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Connector) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Connector) GetReconciling() bool {
	if x != nil {
		return x.Reconciling
	}
	return false
}

func (x *Connector) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Connector) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

// Used to represent a set of source files.
type Source struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The files that comprise the source set.
	Files         []*File `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Source) Reset() {
	*x = Source{}
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_firebase_dataconnect_v1_data_proto_rawDescGZIP(), []int{6}
}

func (x *Source) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

// Individual files.
type File struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The file name including folder path, if applicable. The path
	// should be relative to a local workspace (e.g.
	// dataconnect/(schema|connector)/*.gql) and not an absolute path (e.g.
	// /absolute/path/(schema|connector)/*.gql).
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Required. The file's textual content.
	Content       string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *File) Reset() {
	*x = File{}
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_firebase_dataconnect_v1_data_proto_rawDescGZIP(), []int{7}
}

func (x *File) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *File) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// The data within all Service events.
type ServiceEventData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The Service event payload. Unset for deletion events.
	Payload       *Service `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceEventData) Reset() {
	*x = ServiceEventData{}
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceEventData) ProtoMessage() {}

func (x *ServiceEventData) ProtoReflect() protoreflect.Message {
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceEventData.ProtoReflect.Descriptor instead.
func (*ServiceEventData) Descriptor() ([]byte, []int) {
	return file_firebase_dataconnect_v1_data_proto_rawDescGZIP(), []int{8}
}

func (x *ServiceEventData) GetPayload() *Service {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all Schema events.
type SchemaEventData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The Schema event payload. Unset for deletion events.
	Payload       *Schema `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SchemaEventData) Reset() {
	*x = SchemaEventData{}
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaEventData) ProtoMessage() {}

func (x *SchemaEventData) ProtoReflect() protoreflect.Message {
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaEventData.ProtoReflect.Descriptor instead.
func (*SchemaEventData) Descriptor() ([]byte, []int) {
	return file_firebase_dataconnect_v1_data_proto_rawDescGZIP(), []int{9}
}

func (x *SchemaEventData) GetPayload() *Schema {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all Connector events.
type ConnectorEventData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The Connector event payload. Unset for deletion events.
	Payload       *Connector `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectorEventData) Reset() {
	*x = ConnectorEventData{}
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectorEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorEventData) ProtoMessage() {}

func (x *ConnectorEventData) ProtoReflect() protoreflect.Message {
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorEventData.ProtoReflect.Descriptor instead.
func (*ConnectorEventData) Descriptor() ([]byte, []int) {
	return file_firebase_dataconnect_v1_data_proto_rawDescGZIP(), []int{10}
}

func (x *ConnectorEventData) GetPayload() *Connector {
	if x != nil {
		return x.Payload
	}
	return nil
}

// GraphqlError contains the error information of a GraphQL query or mutation.
type GraphqlError struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The detailed error message.
	// The message should help developer understand the underlying problem without
	// leaking internal data.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// The source locations where the error occurred.
	// Locations should help developers and toolings identify the source of error
	// quickly.
	//
	// Included in admin endpoints (`ExecuteGraphql`, `ExecuteGraphqlRead`,
	// `UpdateSchema` and `UpdateConnector`) to reference the provided GraphQL
	// GQL document.
	//
	// Omitted in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't
	// have access access the underlying GQL source.
	Locations []*SourceLocation `protobuf:"bytes,2,rep,name=locations,proto3" json:"locations,omitempty"`
	// The result field which could not be populated due to error.
	//
	// Clients can use path to identify whether a null result is intentional or
	// caused by a runtime error.
	// It should be a list of string or index from the root of GraphQL query
	// document.
	Path *structpb.ListValue `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// Additional error information.
	Extensions    *GraphqlErrorExtensions `protobuf:"bytes,4,opt,name=extensions,proto3" json:"extensions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GraphqlError) Reset() {
	*x = GraphqlError{}
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GraphqlError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphqlError) ProtoMessage() {}

func (x *GraphqlError) ProtoReflect() protoreflect.Message {
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphqlError.ProtoReflect.Descriptor instead.
func (*GraphqlError) Descriptor() ([]byte, []int) {
	return file_firebase_dataconnect_v1_data_proto_rawDescGZIP(), []int{11}
}

func (x *GraphqlError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GraphqlError) GetLocations() []*SourceLocation {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *GraphqlError) GetPath() *structpb.ListValue {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *GraphqlError) GetExtensions() *GraphqlErrorExtensions {
	if x != nil {
		return x.Extensions
	}
	return nil
}

// GraphqlErrorExtensions contains additional information of `GraphqlError`.
type GraphqlErrorExtensions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The source file name where the error occurred.
	// Included only for `UpdateSchema` and `UpdateConnector`, it corresponds
	// to `File.path` of the provided `Source`.
	File string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	// Maps to canonical gRPC codes.
	// If not specified, it represents `Code.INTERNAL`.
	Code code.Code `protobuf:"varint,2,opt,name=code,proto3,enum=google.rpc.Code" json:"code,omitempty"`
	// More detailed error message to assist debugging.
	// It contains application business logic that are inappropriate to leak
	// publicly.
	//
	// In the emulator, Data Connect API always includes it to assist local
	// development and debugging.
	// In the backend, ConnectorService always hides it.
	// GraphqlService without impersonation always include it.
	// GraphqlService with impersonation includes it only if explicitly opted-in
	// with `include_debug_details` in `GraphqlRequestExtensions`.
	DebugDetails  string `protobuf:"bytes,3,opt,name=debug_details,json=debugDetails,proto3" json:"debug_details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GraphqlErrorExtensions) Reset() {
	*x = GraphqlErrorExtensions{}
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GraphqlErrorExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphqlErrorExtensions) ProtoMessage() {}

func (x *GraphqlErrorExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphqlErrorExtensions.ProtoReflect.Descriptor instead.
func (*GraphqlErrorExtensions) Descriptor() ([]byte, []int) {
	return file_firebase_dataconnect_v1_data_proto_rawDescGZIP(), []int{12}
}

func (x *GraphqlErrorExtensions) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *GraphqlErrorExtensions) GetCode() code.Code {
	if x != nil {
		return x.Code
	}
	return code.Code(0)
}

func (x *GraphqlErrorExtensions) GetDebugDetails() string {
	if x != nil {
		return x.DebugDetails
	}
	return ""
}

// SourceLocation references a location in a GraphQL source.
type SourceLocation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Line number starting at 1.
	Line int32 `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	// Column number starting at 1.
	Column        int32 `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SourceLocation) Reset() {
	*x = SourceLocation{}
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceLocation) ProtoMessage() {}

func (x *SourceLocation) ProtoReflect() protoreflect.Message {
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceLocation.ProtoReflect.Descriptor instead.
func (*SourceLocation) Descriptor() ([]byte, []int) {
	return file_firebase_dataconnect_v1_data_proto_rawDescGZIP(), []int{13}
}

func (x *SourceLocation) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *SourceLocation) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

type Mutation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The result of the execution of the requested operation.
	// If an error was raised before execution begins, the data entry should not
	// be present in the result. (a request error:
	// https://spec.graphql.org/draft/#sec-Errors.Request-Errors) If an error was
	// raised during the execution that prevented a valid response, the data entry
	// in the response should be null. (a field error:
	// https://spec.graphql.org/draft/#sec-Errors.Error-Result-Format)
	Data *structpb.Struct `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Values for GraphQL variables provided in this request.
	Variables *structpb.Struct `protobuf:"bytes,2,opt,name=variables,proto3" json:"variables,omitempty"`
	// Errors of this response.
	// If the data entry in the response is not present, the errors entry must be
	// present.
	// It conforms to https://spec.graphql.org/draft/#sec-Errors.
	Errors        []*GraphqlError `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Mutation) Reset() {
	*x = Mutation{}
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mutation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mutation) ProtoMessage() {}

func (x *Mutation) ProtoReflect() protoreflect.Message {
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mutation.ProtoReflect.Descriptor instead.
func (*Mutation) Descriptor() ([]byte, []int) {
	return file_firebase_dataconnect_v1_data_proto_rawDescGZIP(), []int{14}
}

func (x *Mutation) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Mutation) GetVariables() *structpb.Struct {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *Mutation) GetErrors() []*GraphqlError {
	if x != nil {
		return x.Errors
	}
	return nil
}

// The data within all Mutation events.
type MutationEventData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Payload       *Mutation              `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MutationEventData) Reset() {
	*x = MutationEventData{}
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MutationEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutationEventData) ProtoMessage() {}

func (x *MutationEventData) ProtoReflect() protoreflect.Message {
	mi := &file_firebase_dataconnect_v1_data_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutationEventData.ProtoReflect.Descriptor instead.
func (*MutationEventData) Descriptor() ([]byte, []int) {
	return file_firebase_dataconnect_v1_data_proto_rawDescGZIP(), []int{15}
}

func (x *MutationEventData) GetPayload() *Mutation {
	if x != nil {
		return x.Payload
	}
	return nil
}

var File_firebase_dataconnect_v1_data_proto protoreflect.FileDescriptor

const file_firebase_dataconnect_v1_data_proto_rawDesc = "" +
	"\n" +
	"\"firebase/dataconnect/v1/data.proto\x12%google.events.firebase.dataconnect.v1\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x15google/rpc/code.proto\"\xb4\x04\n" +
	"\aService\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12;\n" +
	"\vcreate_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12R\n" +
	"\x06labels\x18\x04 \x03(\v2:.google.events.firebase.dataconnect.v1.Service.LabelsEntryR\x06labels\x12a\n" +
	"\vannotations\x18\x05 \x03(\v2?.google.events.firebase.dataconnect.v1.Service.AnnotationsEntryR\vannotations\x12\x10\n" +
	"\x03uid\x18\x06 \x01(\tR\x03uid\x12 \n" +
	"\vreconciling\x18\a \x01(\bR\vreconciling\x12!\n" +
	"\fdisplay_name\x18\b \x01(\tR\vdisplayName\x12\x12\n" +
	"\x04etag\x18c \x01(\tR\x04etag\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a>\n" +
	"\x10AnnotationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"r\n" +
	"\n" +
	"Datasource\x12S\n" +
	"\n" +
	"postgresql\x18\x02 \x01(\v21.google.events.firebase.dataconnect.v1.PostgreSqlH\x00R\n" +
	"postgresqlB\x0f\n" +
	"\rconfiguration\"\x93\x03\n" +
	"\n" +
	"PostgreSql\x12i\n" +
	"\x11schema_validation\x18\x03 \x01(\x0e2:.google.events.firebase.dataconnect.v1.SqlSchemaValidationH\x00R\x10schemaValidation\x12f\n" +
	"\x10schema_migration\x18\x05 \x01(\x0e29.google.events.firebase.dataconnect.v1.SqlSchemaMigrationH\x00R\x0fschemaMigration\x12\x1c\n" +
	"\bunlinked\x18\x04 \x01(\bH\x01R\bunlinked\x12V\n" +
	"\tcloud_sql\x18\x02 \x01(\v27.google.events.firebase.dataconnect.v1.CloudSqlInstanceH\x01R\bcloudSql\x12\x1a\n" +
	"\bdatabase\x18\x01 \x01(\tR\bdatabaseB\x0f\n" +
	"\rbefore_deployB\x0f\n" +
	"\rconfiguration\".\n" +
	"\x10CloudSqlInstance\x12\x1a\n" +
	"\binstance\x18\x01 \x01(\tR\binstance\"\xcd\x05\n" +
	"\x06Schema\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12;\n" +
	"\vcreate_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12Q\n" +
	"\x06labels\x18\x04 \x03(\v29.google.events.firebase.dataconnect.v1.Schema.LabelsEntryR\x06labels\x12`\n" +
	"\vannotations\x18\x05 \x03(\v2>.google.events.firebase.dataconnect.v1.Schema.AnnotationsEntryR\vannotations\x12S\n" +
	"\vdatasources\x18\v \x03(\v21.google.events.firebase.dataconnect.v1.DatasourceR\vdatasources\x12E\n" +
	"\x06source\x18\a \x01(\v2-.google.events.firebase.dataconnect.v1.SourceR\x06source\x12\x10\n" +
	"\x03uid\x18\b \x01(\tR\x03uid\x12 \n" +
	"\vreconciling\x18\t \x01(\bR\vreconciling\x12!\n" +
	"\fdisplay_name\x18\n" +
	" \x01(\tR\vdisplayName\x12\x12\n" +
	"\x04etag\x18c \x01(\tR\x04etag\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a>\n" +
	"\x10AnnotationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x81\x05\n" +
	"\tConnector\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12;\n" +
	"\vcreate_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12T\n" +
	"\x06labels\x18\x04 \x03(\v2<.google.events.firebase.dataconnect.v1.Connector.LabelsEntryR\x06labels\x12c\n" +
	"\vannotations\x18\x05 \x03(\v2A.google.events.firebase.dataconnect.v1.Connector.AnnotationsEntryR\vannotations\x12E\n" +
	"\x06source\x18\x06 \x01(\v2-.google.events.firebase.dataconnect.v1.SourceR\x06source\x12\x10\n" +
	"\x03uid\x18\a \x01(\tR\x03uid\x12 \n" +
	"\vreconciling\x18\b \x01(\bR\vreconciling\x12!\n" +
	"\fdisplay_name\x18\t \x01(\tR\vdisplayName\x12\x12\n" +
	"\x04etag\x18c \x01(\tR\x04etag\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a>\n" +
	"\x10AnnotationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"K\n" +
	"\x06Source\x12A\n" +
	"\x05files\x18\x01 \x03(\v2+.google.events.firebase.dataconnect.v1.FileR\x05files\"4\n" +
	"\x04File\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x18\n" +
	"\acontent\x18\x02 \x01(\tR\acontent\"\\\n" +
	"\x10ServiceEventData\x12H\n" +
	"\apayload\x18\x01 \x01(\v2..google.events.firebase.dataconnect.v1.ServiceR\apayload\"Z\n" +
	"\x0fSchemaEventData\x12G\n" +
	"\apayload\x18\x01 \x01(\v2-.google.events.firebase.dataconnect.v1.SchemaR\apayload\"`\n" +
	"\x12ConnectorEventData\x12J\n" +
	"\apayload\x18\x01 \x01(\v20.google.events.firebase.dataconnect.v1.ConnectorR\apayload\"\x8c\x02\n" +
	"\fGraphqlError\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\x12S\n" +
	"\tlocations\x18\x02 \x03(\v25.google.events.firebase.dataconnect.v1.SourceLocationR\tlocations\x12.\n" +
	"\x04path\x18\x03 \x01(\v2\x1a.google.protobuf.ListValueR\x04path\x12]\n" +
	"\n" +
	"extensions\x18\x04 \x01(\v2=.google.events.firebase.dataconnect.v1.GraphqlErrorExtensionsR\n" +
	"extensions\"w\n" +
	"\x16GraphqlErrorExtensions\x12\x12\n" +
	"\x04file\x18\x01 \x01(\tR\x04file\x12$\n" +
	"\x04code\x18\x02 \x01(\x0e2\x10.google.rpc.CodeR\x04code\x12#\n" +
	"\rdebug_details\x18\x03 \x01(\tR\fdebugDetails\"<\n" +
	"\x0eSourceLocation\x12\x12\n" +
	"\x04line\x18\x01 \x01(\x05R\x04line\x12\x16\n" +
	"\x06column\x18\x02 \x01(\x05R\x06column\"\xbb\x01\n" +
	"\bMutation\x12+\n" +
	"\x04data\x18\x01 \x01(\v2\x17.google.protobuf.StructR\x04data\x125\n" +
	"\tvariables\x18\x02 \x01(\v2\x17.google.protobuf.StructR\tvariables\x12K\n" +
	"\x06errors\x18\x03 \x03(\v23.google.events.firebase.dataconnect.v1.GraphqlErrorR\x06errors\"^\n" +
	"\x11MutationEventData\x12I\n" +
	"\apayload\x18\x01 \x01(\v2/.google.events.firebase.dataconnect.v1.MutationR\apayload*b\n" +
	"\x13SqlSchemaValidation\x12%\n" +
	"!SQL_SCHEMA_VALIDATION_UNSPECIFIED\x10\x00\x12\b\n" +
	"\x04NONE\x10\x01\x12\n" +
	"\n" +
	"\x06STRICT\x10\x02\x12\x0e\n" +
	"\n" +
	"COMPATIBLE\x10\x03*R\n" +
	"\x12SqlSchemaMigration\x12$\n" +
	" SQL_SCHEMA_MIGRATION_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12MIGRATE_COMPATIBLE\x10\x01B\x85\x01\xaa\x02.Google.Events.Protobuf.Firebase.DataConnect.V1\xca\x02%Google\\Events\\Firebase\\DataConnect\\V1\xea\x02)Google::Events::Firebase::DataConnect::V1b\x06proto3"

var (
	file_firebase_dataconnect_v1_data_proto_rawDescOnce sync.Once
	file_firebase_dataconnect_v1_data_proto_rawDescData []byte
)

func file_firebase_dataconnect_v1_data_proto_rawDescGZIP() []byte {
	file_firebase_dataconnect_v1_data_proto_rawDescOnce.Do(func() {
		file_firebase_dataconnect_v1_data_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_firebase_dataconnect_v1_data_proto_rawDesc), len(file_firebase_dataconnect_v1_data_proto_rawDesc)))
	})
	return file_firebase_dataconnect_v1_data_proto_rawDescData
}

var file_firebase_dataconnect_v1_data_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_firebase_dataconnect_v1_data_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_firebase_dataconnect_v1_data_proto_goTypes = []any{
	(SqlSchemaValidation)(0),       // 0: google.events.firebase.dataconnect.v1.SqlSchemaValidation
	(SqlSchemaMigration)(0),        // 1: google.events.firebase.dataconnect.v1.SqlSchemaMigration
	(*Service)(nil),                // 2: google.events.firebase.dataconnect.v1.Service
	(*Datasource)(nil),             // 3: google.events.firebase.dataconnect.v1.Datasource
	(*PostgreSql)(nil),             // 4: google.events.firebase.dataconnect.v1.PostgreSql
	(*CloudSqlInstance)(nil),       // 5: google.events.firebase.dataconnect.v1.CloudSqlInstance
	(*Schema)(nil),                 // 6: google.events.firebase.dataconnect.v1.Schema
	(*Connector)(nil),              // 7: google.events.firebase.dataconnect.v1.Connector
	(*Source)(nil),                 // 8: google.events.firebase.dataconnect.v1.Source
	(*File)(nil),                   // 9: google.events.firebase.dataconnect.v1.File
	(*ServiceEventData)(nil),       // 10: google.events.firebase.dataconnect.v1.ServiceEventData
	(*SchemaEventData)(nil),        // 11: google.events.firebase.dataconnect.v1.SchemaEventData
	(*ConnectorEventData)(nil),     // 12: google.events.firebase.dataconnect.v1.ConnectorEventData
	(*GraphqlError)(nil),           // 13: google.events.firebase.dataconnect.v1.GraphqlError
	(*GraphqlErrorExtensions)(nil), // 14: google.events.firebase.dataconnect.v1.GraphqlErrorExtensions
	(*SourceLocation)(nil),         // 15: google.events.firebase.dataconnect.v1.SourceLocation
	(*Mutation)(nil),               // 16: google.events.firebase.dataconnect.v1.Mutation
	(*MutationEventData)(nil),      // 17: google.events.firebase.dataconnect.v1.MutationEventData
	nil,                            // 18: google.events.firebase.dataconnect.v1.Service.LabelsEntry
	nil,                            // 19: google.events.firebase.dataconnect.v1.Service.AnnotationsEntry
	nil,                            // 20: google.events.firebase.dataconnect.v1.Schema.LabelsEntry
	nil,                            // 21: google.events.firebase.dataconnect.v1.Schema.AnnotationsEntry
	nil,                            // 22: google.events.firebase.dataconnect.v1.Connector.LabelsEntry
	nil,                            // 23: google.events.firebase.dataconnect.v1.Connector.AnnotationsEntry
	(*timestamppb.Timestamp)(nil),  // 24: google.protobuf.Timestamp
	(*structpb.ListValue)(nil),     // 25: google.protobuf.ListValue
	(code.Code)(0),                 // 26: google.rpc.Code
	(*structpb.Struct)(nil),        // 27: google.protobuf.Struct
}
var file_firebase_dataconnect_v1_data_proto_depIdxs = []int32{
	24, // 0: google.events.firebase.dataconnect.v1.Service.create_time:type_name -> google.protobuf.Timestamp
	24, // 1: google.events.firebase.dataconnect.v1.Service.update_time:type_name -> google.protobuf.Timestamp
	18, // 2: google.events.firebase.dataconnect.v1.Service.labels:type_name -> google.events.firebase.dataconnect.v1.Service.LabelsEntry
	19, // 3: google.events.firebase.dataconnect.v1.Service.annotations:type_name -> google.events.firebase.dataconnect.v1.Service.AnnotationsEntry
	4,  // 4: google.events.firebase.dataconnect.v1.Datasource.postgresql:type_name -> google.events.firebase.dataconnect.v1.PostgreSql
	0,  // 5: google.events.firebase.dataconnect.v1.PostgreSql.schema_validation:type_name -> google.events.firebase.dataconnect.v1.SqlSchemaValidation
	1,  // 6: google.events.firebase.dataconnect.v1.PostgreSql.schema_migration:type_name -> google.events.firebase.dataconnect.v1.SqlSchemaMigration
	5,  // 7: google.events.firebase.dataconnect.v1.PostgreSql.cloud_sql:type_name -> google.events.firebase.dataconnect.v1.CloudSqlInstance
	24, // 8: google.events.firebase.dataconnect.v1.Schema.create_time:type_name -> google.protobuf.Timestamp
	24, // 9: google.events.firebase.dataconnect.v1.Schema.update_time:type_name -> google.protobuf.Timestamp
	20, // 10: google.events.firebase.dataconnect.v1.Schema.labels:type_name -> google.events.firebase.dataconnect.v1.Schema.LabelsEntry
	21, // 11: google.events.firebase.dataconnect.v1.Schema.annotations:type_name -> google.events.firebase.dataconnect.v1.Schema.AnnotationsEntry
	3,  // 12: google.events.firebase.dataconnect.v1.Schema.datasources:type_name -> google.events.firebase.dataconnect.v1.Datasource
	8,  // 13: google.events.firebase.dataconnect.v1.Schema.source:type_name -> google.events.firebase.dataconnect.v1.Source
	24, // 14: google.events.firebase.dataconnect.v1.Connector.create_time:type_name -> google.protobuf.Timestamp
	24, // 15: google.events.firebase.dataconnect.v1.Connector.update_time:type_name -> google.protobuf.Timestamp
	22, // 16: google.events.firebase.dataconnect.v1.Connector.labels:type_name -> google.events.firebase.dataconnect.v1.Connector.LabelsEntry
	23, // 17: google.events.firebase.dataconnect.v1.Connector.annotations:type_name -> google.events.firebase.dataconnect.v1.Connector.AnnotationsEntry
	8,  // 18: google.events.firebase.dataconnect.v1.Connector.source:type_name -> google.events.firebase.dataconnect.v1.Source
	9,  // 19: google.events.firebase.dataconnect.v1.Source.files:type_name -> google.events.firebase.dataconnect.v1.File
	2,  // 20: google.events.firebase.dataconnect.v1.ServiceEventData.payload:type_name -> google.events.firebase.dataconnect.v1.Service
	6,  // 21: google.events.firebase.dataconnect.v1.SchemaEventData.payload:type_name -> google.events.firebase.dataconnect.v1.Schema
	7,  // 22: google.events.firebase.dataconnect.v1.ConnectorEventData.payload:type_name -> google.events.firebase.dataconnect.v1.Connector
	15, // 23: google.events.firebase.dataconnect.v1.GraphqlError.locations:type_name -> google.events.firebase.dataconnect.v1.SourceLocation
	25, // 24: google.events.firebase.dataconnect.v1.GraphqlError.path:type_name -> google.protobuf.ListValue
	14, // 25: google.events.firebase.dataconnect.v1.GraphqlError.extensions:type_name -> google.events.firebase.dataconnect.v1.GraphqlErrorExtensions
	26, // 26: google.events.firebase.dataconnect.v1.GraphqlErrorExtensions.code:type_name -> google.rpc.Code
	27, // 27: google.events.firebase.dataconnect.v1.Mutation.data:type_name -> google.protobuf.Struct
	27, // 28: google.events.firebase.dataconnect.v1.Mutation.variables:type_name -> google.protobuf.Struct
	13, // 29: google.events.firebase.dataconnect.v1.Mutation.errors:type_name -> google.events.firebase.dataconnect.v1.GraphqlError
	16, // 30: google.events.firebase.dataconnect.v1.MutationEventData.payload:type_name -> google.events.firebase.dataconnect.v1.Mutation
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_firebase_dataconnect_v1_data_proto_init() }
func file_firebase_dataconnect_v1_data_proto_init() {
	if File_firebase_dataconnect_v1_data_proto != nil {
		return
	}
	file_firebase_dataconnect_v1_data_proto_msgTypes[1].OneofWrappers = []any{
		(*Datasource_Postgresql)(nil),
	}
	file_firebase_dataconnect_v1_data_proto_msgTypes[2].OneofWrappers = []any{
		(*PostgreSql_SchemaValidation)(nil),
		(*PostgreSql_SchemaMigration)(nil),
		(*PostgreSql_Unlinked)(nil),
		(*PostgreSql_CloudSql)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_firebase_dataconnect_v1_data_proto_rawDesc), len(file_firebase_dataconnect_v1_data_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_firebase_dataconnect_v1_data_proto_goTypes,
		DependencyIndexes: file_firebase_dataconnect_v1_data_proto_depIdxs,
		EnumInfos:         file_firebase_dataconnect_v1_data_proto_enumTypes,
		MessageInfos:      file_firebase_dataconnect_v1_data_proto_msgTypes,
	}.Build()
	File_firebase_dataconnect_v1_data_proto = out.File
	file_firebase_dataconnect_v1_data_proto_goTypes = nil
	file_firebase_dataconnect_v1_data_proto_depIdxs = nil
}
