package main

import (
	"bytes"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"google.golang.org/protobuf/compiler/protogen"
)

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}

			// Protos intended for the shared/ directory are common resources.
			// They are not event data types.
			if strings.Contains(f.GoImportPath.String(), "shared") {
				continue
			}

			switch os.Getenv("SNOWPEA_GENERATOR_MODE") {
			case "utils":
				generateTypeUtils(gen, f)
			case "tests":
				generateTests(gen, f)
			default:
				log.Fatal("SNOWPEA_GENERATOR_MODE must be utils, tests, or samples.")
			}
		}
		return nil
	})
}

func eventTypePrefix(importPath string, sep string) string {
	// During the prototype, some import paths are full URLs, some not.
	parts := strings.Split(importPath, "pb/")
	i := strings.TrimSpace(parts[len(parts)-1])
	tokens := strings.Split(i, "/")
	return "google.events." + strings.Join(tokens, sep)
}

// generateTypeUtils generates data type utility functions.
func generateTypeUtils(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	filename := file.GeneratedFilenamePrefix + "_util.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)

	id := eventTypePrefix(file.GoImportPath.String(), ".")
	g.P("// Code generated by protoc-gen-go-snowpea. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	g.P("import (")
	g.P(`  "fmt"`)
	g.P(`  "google.golang.org/protobuf/encoding/protojson"`)
	g.P(")")
	g.P()

	for _, msg := range file.Messages {
		g.P("// Unmarshal", msg.GoIdent.GoName, " provides a typed object.")
		g.P("func Unmarshal", msg.GoIdent.GoName, "(datatype string, data []byte) (*", msg.GoIdent.GoName, ", error) {")
		g.P("  out := ", msg.GoIdent.GoName, "{}")
		g.P()
		g.P(`  switch datatype {`)
		g.P(`  case "application/json":`)
		g.P(`    pj := protojson.UnmarshalOptions{DiscardUnknown: true}`)
		g.P(`    if err := pj.Unmarshal(data, &out); err != nil {`)
		g.P(`      return nil, fmt.Errorf("protojson.Unmarshal: %w", err)`)
		g.P(`    }`)
		g.P(`  default:`)
		g.P(`    return nil, fmt.Errorf("data type %q not supported", datatype)`)
		g.P(`  }`)
		g.P()
		g.P(`  return &out, nil`)
		g.P(`}`)

		g.P("// UnmarshalStrict", msg.GoIdent.GoName, " provides a typed object but errors on unknown fields.")
		g.P("func UnmarshalStrict", msg.GoIdent.GoName, "(data []byte) (*", msg.GoIdent.GoName, ", error) {")
		g.P("  out := ", msg.GoIdent.GoName, "{}")
		g.P("  if err := protojson.Unmarshal(data, &out); err != nil {")
		g.P(`    return nil, fmt.Errorf("protojson.Unmarshal: %w", err)`)
		g.P(`  }`)
		g.P()
		g.P(`  return &out, nil`)
		g.P("}")

		g.P("// JSON provides the protobuf as a serialized JSON object.")
		g.P("func (m *", msg.GoIdent.GoName, ") JSON() ([]byte, error) {")
		g.P("  b, err := protojson.Marshal(m)")
		g.P("  if err != nil {")
		g.P(`    return nil, fmt.Errorf("protojson.Marshal: %w", err)`)
		g.P(`  }`)
		g.P()
		g.P(`  return b, nil`)
		g.P("}")

		// Assumption: Only the first message in the proto is a top-level
		// data type for CloudEvent payloads.
		break
	}

	g.P("// CloudEventTypePrefix returns the prefix of the CloudEvent Type this data type supports.")
	g.P("func CloudEventTypePrefix() string {")
	g.P(fmt.Sprintf(`  return "%s`, id))
	g.P("}")

	return g
}

var validationTestTpl *template.Template

func init() {
	p := os.Getenv("SNOWPEA_TEST_TEMPLATE_PATH")
	if p == "" {
		log.Fatal("Missing environment variable SNOWPEA_TEST_TEMPLATE_PATH")
	}
	validationTestTpl = template.Must(template.ParseFiles(filepath.Join(p, "validationtest.gotpl")))
}

// TestParams organizes all template parameters for test generation.
type TestParams struct {
	DataTypes []string
	SrcPath   string
	Pkg       string
	ProtoPkg  string
}

// generateTests generates test coverage per type.
func generateTests(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	filename := file.GeneratedFilenamePrefix + "_test.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)

	tokens := strings.Split(file.GoImportPath.String(), "/")
	params := TestParams{
		Pkg:      string(file.GoPackageName),
		SrcPath:  filepath.Join(tokens[1:]...),
		ProtoPkg: eventTypePrefix(file.GoImportPath.String(), "."),
	}

	// Assumption: Only the first message in the proto is a top-level
	// data type for CloudEvent payloads.
	dataTypes := make([]string, 1)
	for i, msg := range file.Messages {
		dataTypes[i] = msg.GoIdent.GoName
		break
	}
	params.DataTypes = dataTypes

	var b bytes.Buffer
	if err := validationTestTpl.Execute(&b, params); err != nil {
		log.Fatal("template.Execute:", err)
	}
	g.P("// Code generated by protoc-gen-go-snowpea. DO NOT EDIT.")
	g.P(b.String())
	b.Reset()

	return g
}
