package {{ .Pkg }}_test

import (
	"os"
	"path/filepath"
	"testing"

	"github.com/googleapis/google-cloudevents-go/{{ .SrcPath }}"
	"github.com/googleapis/google-cloudevents-go/internal/testhelper"
	"google.golang.org/protobuf/encoding/protojson"
)

{{ range .DataTypes }}
// Validate the type can parse test data.
// Goals:
// - "Loose" parsing confirms the expected library experience
// - "Strict" parsing confirms:
//   - no deleted or renamed fields in protos covered in test data
//   - test data does not carry unknown fields
func TestParsing{{ . }}(t *testing.T) {
	cases := testhelper.FindTestData(t, "{{ . }}", "{{ $.TestDataPath }}")

	for name, file := range cases {
		t.Run(name, func(t *testing.T) {
			data, err := os.ReadFile(file)
			if err != nil {
				t.Fatal("os.ReadFile:", err)
			}

			if ext := filepath.Ext(file); ext != ".json" {
				t.Fatalf("test support for %q data not implemented", ext)
			}

			t.Run("loose", func(t *testing.T) {
				out := {{ $.Pkg }}.{{ . }}{}
				pj := protojson.UnmarshalOptions{DiscardUnknown: true}
				if err := pj.Unmarshal(data, &out); err != nil {
					t.Fatalf("protojson.Unmarshal: could not parse %q\n----%s\n----", file, data)
				}
			})

			t.Run("strict", func(t *testing.T) {
				cleanData, err := testhelper.CleanAcceptedUnknowns(data, "{{ . }}", "{{ $.TypePrefix }}")
				if err != nil {
					t.Errorf("could not clean data for strict validation: %v", err)
				}

				out := {{ $.Pkg }}.{{ . }}{}
				if err := protojson.Unmarshal(cleanData, &out); err != nil {
					t.Fatalf("protojson.Unmarshal: could not parse %q\n----%s\n----", file, data)
				}
			})
		})
	}
}
{{ end }}
