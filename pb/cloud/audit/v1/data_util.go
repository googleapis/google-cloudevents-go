// Code generated by protoc-gen-go-snowpea. DO NOT EDIT.

package v1

import (
	"fmt"
	"google.golang.org/protobuf/encoding/protojson"
)

// UnmarshalLogEntryData provides a typed object.
func UnmarshalLogEntryData(datatype string, data []byte) (*LogEntryData, error) {
	out := LogEntryData{}

	switch datatype {
	case "application/json":
		pj := protojson.UnmarshalOptions{DiscardUnknown: true}
		if err := pj.Unmarshal(data, &out); err != nil {
			return nil, fmt.Errorf("protojson.Unmarshal: %w", err)
		}
	default:
		return nil, fmt.Errorf("data type %q not supported", datatype)
	}

	return &out, nil
}

// UnmarshalStrictLogEntryData provides a typed object but errors on unknown fields.
func UnmarshalStrictLogEntryData(data []byte) (*LogEntryData, error) {
	out := LogEntryData{}
	if err := protojson.Unmarshal(data, &out); err != nil {
		return nil, fmt.Errorf("protojson.Unmarshal: %w", err)
	}

	return &out, nil
}

// JSON provides the protobuf as a serialized JSON object.
func (m *LogEntryData) JSON() ([]byte, error) {
	b, err := protojson.Marshal(m)
	if err != nil {
		return nil, fmt.Errorf("protojson.Marshal: %w", err)
	}

	return b, nil
}

// UnmarshalLogEntryOperation provides a typed object.
func UnmarshalLogEntryOperation(datatype string, data []byte) (*LogEntryOperation, error) {
	out := LogEntryOperation{}

	switch datatype {
	case "application/json":
		pj := protojson.UnmarshalOptions{DiscardUnknown: true}
		if err := pj.Unmarshal(data, &out); err != nil {
			return nil, fmt.Errorf("protojson.Unmarshal: %w", err)
		}
	default:
		return nil, fmt.Errorf("data type %q not supported", datatype)
	}

	return &out, nil
}

// UnmarshalStrictLogEntryOperation provides a typed object but errors on unknown fields.
func UnmarshalStrictLogEntryOperation(data []byte) (*LogEntryOperation, error) {
	out := LogEntryOperation{}
	if err := protojson.Unmarshal(data, &out); err != nil {
		return nil, fmt.Errorf("protojson.Unmarshal: %w", err)
	}

	return &out, nil
}

// JSON provides the protobuf as a serialized JSON object.
func (m *LogEntryOperation) JSON() ([]byte, error) {
	b, err := protojson.Marshal(m)
	if err != nil {
		return nil, fmt.Errorf("protojson.Marshal: %w", err)
	}

	return b, nil
}

// UnmarshalAuditLog provides a typed object.
func UnmarshalAuditLog(datatype string, data []byte) (*AuditLog, error) {
	out := AuditLog{}

	switch datatype {
	case "application/json":
		pj := protojson.UnmarshalOptions{DiscardUnknown: true}
		if err := pj.Unmarshal(data, &out); err != nil {
			return nil, fmt.Errorf("protojson.Unmarshal: %w", err)
		}
	default:
		return nil, fmt.Errorf("data type %q not supported", datatype)
	}

	return &out, nil
}

// UnmarshalStrictAuditLog provides a typed object but errors on unknown fields.
func UnmarshalStrictAuditLog(data []byte) (*AuditLog, error) {
	out := AuditLog{}
	if err := protojson.Unmarshal(data, &out); err != nil {
		return nil, fmt.Errorf("protojson.Unmarshal: %w", err)
	}

	return &out, nil
}

// JSON provides the protobuf as a serialized JSON object.
func (m *AuditLog) JSON() ([]byte, error) {
	b, err := protojson.Marshal(m)
	if err != nil {
		return nil, fmt.Errorf("protojson.Marshal: %w", err)
	}

	return b, nil
}

// UnmarshalAuthenticationInfo provides a typed object.
func UnmarshalAuthenticationInfo(datatype string, data []byte) (*AuthenticationInfo, error) {
	out := AuthenticationInfo{}

	switch datatype {
	case "application/json":
		pj := protojson.UnmarshalOptions{DiscardUnknown: true}
		if err := pj.Unmarshal(data, &out); err != nil {
			return nil, fmt.Errorf("protojson.Unmarshal: %w", err)
		}
	default:
		return nil, fmt.Errorf("data type %q not supported", datatype)
	}

	return &out, nil
}

// UnmarshalStrictAuthenticationInfo provides a typed object but errors on unknown fields.
func UnmarshalStrictAuthenticationInfo(data []byte) (*AuthenticationInfo, error) {
	out := AuthenticationInfo{}
	if err := protojson.Unmarshal(data, &out); err != nil {
		return nil, fmt.Errorf("protojson.Unmarshal: %w", err)
	}

	return &out, nil
}

// JSON provides the protobuf as a serialized JSON object.
func (m *AuthenticationInfo) JSON() ([]byte, error) {
	b, err := protojson.Marshal(m)
	if err != nil {
		return nil, fmt.Errorf("protojson.Marshal: %w", err)
	}

	return b, nil
}

// UnmarshalAuthorizationInfo provides a typed object.
func UnmarshalAuthorizationInfo(datatype string, data []byte) (*AuthorizationInfo, error) {
	out := AuthorizationInfo{}

	switch datatype {
	case "application/json":
		pj := protojson.UnmarshalOptions{DiscardUnknown: true}
		if err := pj.Unmarshal(data, &out); err != nil {
			return nil, fmt.Errorf("protojson.Unmarshal: %w", err)
		}
	default:
		return nil, fmt.Errorf("data type %q not supported", datatype)
	}

	return &out, nil
}

// UnmarshalStrictAuthorizationInfo provides a typed object but errors on unknown fields.
func UnmarshalStrictAuthorizationInfo(data []byte) (*AuthorizationInfo, error) {
	out := AuthorizationInfo{}
	if err := protojson.Unmarshal(data, &out); err != nil {
		return nil, fmt.Errorf("protojson.Unmarshal: %w", err)
	}

	return &out, nil
}

// JSON provides the protobuf as a serialized JSON object.
func (m *AuthorizationInfo) JSON() ([]byte, error) {
	b, err := protojson.Marshal(m)
	if err != nil {
		return nil, fmt.Errorf("protojson.Marshal: %w", err)
	}

	return b, nil
}

// UnmarshalRequestMetadata provides a typed object.
func UnmarshalRequestMetadata(datatype string, data []byte) (*RequestMetadata, error) {
	out := RequestMetadata{}

	switch datatype {
	case "application/json":
		pj := protojson.UnmarshalOptions{DiscardUnknown: true}
		if err := pj.Unmarshal(data, &out); err != nil {
			return nil, fmt.Errorf("protojson.Unmarshal: %w", err)
		}
	default:
		return nil, fmt.Errorf("data type %q not supported", datatype)
	}

	return &out, nil
}

// UnmarshalStrictRequestMetadata provides a typed object but errors on unknown fields.
func UnmarshalStrictRequestMetadata(data []byte) (*RequestMetadata, error) {
	out := RequestMetadata{}
	if err := protojson.Unmarshal(data, &out); err != nil {
		return nil, fmt.Errorf("protojson.Unmarshal: %w", err)
	}

	return &out, nil
}

// JSON provides the protobuf as a serialized JSON object.
func (m *RequestMetadata) JSON() ([]byte, error) {
	b, err := protojson.Marshal(m)
	if err != nil {
		return nil, fmt.Errorf("protojson.Marshal: %w", err)
	}

	return b, nil
}

// UnmarshalResourceLocation provides a typed object.
func UnmarshalResourceLocation(datatype string, data []byte) (*ResourceLocation, error) {
	out := ResourceLocation{}

	switch datatype {
	case "application/json":
		pj := protojson.UnmarshalOptions{DiscardUnknown: true}
		if err := pj.Unmarshal(data, &out); err != nil {
			return nil, fmt.Errorf("protojson.Unmarshal: %w", err)
		}
	default:
		return nil, fmt.Errorf("data type %q not supported", datatype)
	}

	return &out, nil
}

// UnmarshalStrictResourceLocation provides a typed object but errors on unknown fields.
func UnmarshalStrictResourceLocation(data []byte) (*ResourceLocation, error) {
	out := ResourceLocation{}
	if err := protojson.Unmarshal(data, &out); err != nil {
		return nil, fmt.Errorf("protojson.Unmarshal: %w", err)
	}

	return &out, nil
}

// JSON provides the protobuf as a serialized JSON object.
func (m *ResourceLocation) JSON() ([]byte, error) {
	b, err := protojson.Marshal(m)
	if err != nil {
		return nil, fmt.Errorf("protojson.Marshal: %w", err)
	}

	return b, nil
}

// UnmarshalServiceAccountDelegationInfo provides a typed object.
func UnmarshalServiceAccountDelegationInfo(datatype string, data []byte) (*ServiceAccountDelegationInfo, error) {
	out := ServiceAccountDelegationInfo{}

	switch datatype {
	case "application/json":
		pj := protojson.UnmarshalOptions{DiscardUnknown: true}
		if err := pj.Unmarshal(data, &out); err != nil {
			return nil, fmt.Errorf("protojson.Unmarshal: %w", err)
		}
	default:
		return nil, fmt.Errorf("data type %q not supported", datatype)
	}

	return &out, nil
}

// UnmarshalStrictServiceAccountDelegationInfo provides a typed object but errors on unknown fields.
func UnmarshalStrictServiceAccountDelegationInfo(data []byte) (*ServiceAccountDelegationInfo, error) {
	out := ServiceAccountDelegationInfo{}
	if err := protojson.Unmarshal(data, &out); err != nil {
		return nil, fmt.Errorf("protojson.Unmarshal: %w", err)
	}

	return &out, nil
}

// JSON provides the protobuf as a serialized JSON object.
func (m *ServiceAccountDelegationInfo) JSON() ([]byte, error) {
	b, err := protojson.Marshal(m)
	if err != nil {
		return nil, fmt.Errorf("protojson.Marshal: %w", err)
	}

	return b, nil
}

// UnmarshalLogSplit provides a typed object.
func UnmarshalLogSplit(datatype string, data []byte) (*LogSplit, error) {
	out := LogSplit{}

	switch datatype {
	case "application/json":
		pj := protojson.UnmarshalOptions{DiscardUnknown: true}
		if err := pj.Unmarshal(data, &out); err != nil {
			return nil, fmt.Errorf("protojson.Unmarshal: %w", err)
		}
	default:
		return nil, fmt.Errorf("data type %q not supported", datatype)
	}

	return &out, nil
}

// UnmarshalStrictLogSplit provides a typed object but errors on unknown fields.
func UnmarshalStrictLogSplit(data []byte) (*LogSplit, error) {
	out := LogSplit{}
	if err := protojson.Unmarshal(data, &out); err != nil {
		return nil, fmt.Errorf("protojson.Unmarshal: %w", err)
	}

	return &out, nil
}

// JSON provides the protobuf as a serialized JSON object.
func (m *LogSplit) JSON() ([]byte, error) {
	b, err := protojson.Marshal(m)
	if err != nil {
		return nil, fmt.Errorf("protojson.Marshal: %w", err)
	}

	return b, nil
}

// CloudEventTypePrefix returns the prefix of the CloudEvent Type this data type supports.
func CloudEventTypePrefix() string {
	return "google.events.cloud.audit.v1"
}
