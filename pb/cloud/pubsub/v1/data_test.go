// Code generated by protoc-gen-go-snowpea. DO NOT EDIT.
package v1_test

import (
	"encoding/json"
	"fmt"
	"path/filepath"
	"os"
	"strings"
	"testing"

	pubsub "github.com/googleapis/google-cloudevents-go/pb/cloud/pubsub/v1"
)

// Validate the type can parse test data.
// Goals:
// - "Loose" parsing confirms the expected library experience
// - "Strict" parsing confirms:
//   - no deleted or renamed fields in protos covered in test data
//   - test data does not carry unknown fields
func TestParsingMessagePublishedData(t *testing.T) {
	cases := findTestData(t, "MessagePublishedData")

	for name, file := range cases {
		fmt.Printf(">>> Test Case %q\n", name)
		data, err := os.ReadFile(file)
		if err != nil {
			t.Fatal("os.ReadFile:", err)
		}
		fmt.Printf("\t%s: Data Before Processing:\n%s", name, string(data))

		obj, err := pubsub.UnmarshalMessagePublishedData("application/json", data)
		if err != nil {
			t.Errorf("%s: parsing failed: %v", name, err)
		} else {
			fmt.Printf("\t%s: Data with Discarded Unknowns:\n\t%s\n", name, obj.String())
		}

		cleanData, err := cleanAcceptedUnknowns(data, "MessagePublishedData", pubsub.CloudEventTypePrefix())
		if err != nil {
			t.Errorf("%s: could not clean data for strict validation: %v", name, err)
		}

		obj, err = pubsub.UnmarshalStrictMessagePublishedData("application/json", cleanData)
		if err != nil {
			t.Errorf("%s: strict parsing failed: %v", name, err)
		} else {
			fmt.Printf("\t%s: Data with Discarded Accepted Unknowns:\n\t%s\n", name, obj.String())
		}
	}
}

// cleanAcceptedUnknowns strips test data of undefined fields that we know will
// be present in data payloads. These are exceptions for strict validation testing.
// These are primarily '@type' fields injected as an artifact of protobuf.Unknown
// being serialized into the data upstream from the event.
func cleanAcceptedUnknowns(b []byte, dataType string, typePrefix string) ([]byte, error) {
	switch {
	case typePrefix == "google.events.cloud.pubsub.v1" && dataType == "MessagePublishedData":
		var j map[string]interface{}
		if err := json.Unmarshal(b, &j); err != nil {
			return nil, fmt.Errorf("json.Unmarshal: %w", err)
		}
		m := j["message"].(map[string]interface{})
		delete(m, "@type")
		j["message"] = m
		fmt.Println("Removed [message.@type] from test data.")
		return json.Marshal(j)
	case typePrefix == "google.events.cloud.audit.v1" && dataType == "LogEntryData":
		var j map[string]interface{}
		if err := json.Unmarshal(b, &j); err != nil {
			return nil, fmt.Errorf("json.Unmarshal: %w", err)
		}
		m := j["protoPayload"].(map[string]interface{})
		delete(m, "@type")
		j["protoPayload"] = m
		fmt.Println("Removed [protoPayload.@type] from test data.")
		return json.Marshal(j)
	}

	return b, nil
}

const (
	DATA_TYPE = 0
	EXTENSION = 1
	TEST_CASE = 1
)

func findTestData(t *testing.T, dataType string) map[string]string {
	t.Helper()
	testDataRoot := os.Getenv("GOOGLE_CLOUDEVENT_REPO_PATH")
	if testDataRoot == "" {
		t.Skip("test data: GOOGLE_CLOUDEVENT_REPO_PATH environment variable not set")
	}

	testData := filepath.Join(testDataRoot, "testdata", "google", "events", "cloud/pubsub/v1")
	files, err := os.ReadDir(testData)
	if err != nil {
		t.Skip("No test cases found: ioutil.ReadDir:", err)
	}

	cases := make(map[string]string, len(files))
	for _, file := range files {
		parts := strings.Split(file.Name(), ".")
		if parts[EXTENSION] != "json" {
			continue
		}
		metadata := strings.Split(parts[0], "-")
		if metadata[DATA_TYPE] != dataType {
			continue
		}
		cases[metadata[TEST_CASE]] = filepath.Join(testData, file.Name())
	}

	if len(cases) == 0 {
		t.Skip("No test cases found for", dataType)
	}

	return cases
}
