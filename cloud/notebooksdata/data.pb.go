// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.6
// source: cloud/notebooks/v1/data.proto

package notebooksdata

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The definition of the states of this runtime.
type Runtime_State int32

const (
	// State is not specified.
	Runtime_STATE_UNSPECIFIED Runtime_State = 0
	// The compute layer is starting the runtime. It is not ready for use.
	Runtime_STARTING Runtime_State = 1
	// The compute layer is installing required frameworks and registering the
	// runtime with notebook proxy. It cannot be used.
	Runtime_PROVISIONING Runtime_State = 2
	// The runtime is currently running. It is ready for use.
	Runtime_ACTIVE Runtime_State = 3
	// The control logic is stopping the runtime. It cannot be used.
	Runtime_STOPPING Runtime_State = 4
	// The runtime is stopped. It cannot be used.
	Runtime_STOPPED Runtime_State = 5
	// The runtime is being deleted. It cannot be used.
	Runtime_DELETING Runtime_State = 6
	// The runtime is upgrading. It cannot be used.
	Runtime_UPGRADING Runtime_State = 7
	// The runtime is being created and set up. It is not ready for use.
	Runtime_INITIALIZING Runtime_State = 8
)

// Enum value maps for Runtime_State.
var (
	Runtime_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STARTING",
		2: "PROVISIONING",
		3: "ACTIVE",
		4: "STOPPING",
		5: "STOPPED",
		6: "DELETING",
		7: "UPGRADING",
		8: "INITIALIZING",
	}
	Runtime_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STARTING":          1,
		"PROVISIONING":      2,
		"ACTIVE":            3,
		"STOPPING":          4,
		"STOPPED":           5,
		"DELETING":          6,
		"UPGRADING":         7,
		"INITIALIZING":      8,
	}
)

func (x Runtime_State) Enum() *Runtime_State {
	p := new(Runtime_State)
	*p = x
	return p
}

func (x Runtime_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Runtime_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_notebooks_v1_data_proto_enumTypes[0].Descriptor()
}

func (Runtime_State) Type() protoreflect.EnumType {
	return &file_cloud_notebooks_v1_data_proto_enumTypes[0]
}

func (x Runtime_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Runtime_State.Descriptor instead.
func (Runtime_State) EnumDescriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{3, 0}
}

// The runtime substate.
type Runtime_HealthState int32

const (
	// The runtime substate is unknown.
	Runtime_HEALTH_STATE_UNSPECIFIED Runtime_HealthState = 0
	// The runtime is known to be in an healthy state
	// (for example, critical daemons are running)
	// Applies to ACTIVE state.
	Runtime_HEALTHY Runtime_HealthState = 1
	// The runtime is known to be in an unhealthy state
	// (for example, critical daemons are not running)
	// Applies to ACTIVE state.
	Runtime_UNHEALTHY Runtime_HealthState = 2
	// The runtime has not installed health monitoring agent.
	// Applies to ACTIVE state.
	Runtime_AGENT_NOT_INSTALLED Runtime_HealthState = 3
	// The runtime health monitoring agent is not running.
	// Applies to ACTIVE state.
	Runtime_AGENT_NOT_RUNNING Runtime_HealthState = 4
)

// Enum value maps for Runtime_HealthState.
var (
	Runtime_HealthState_name = map[int32]string{
		0: "HEALTH_STATE_UNSPECIFIED",
		1: "HEALTHY",
		2: "UNHEALTHY",
		3: "AGENT_NOT_INSTALLED",
		4: "AGENT_NOT_RUNNING",
	}
	Runtime_HealthState_value = map[string]int32{
		"HEALTH_STATE_UNSPECIFIED": 0,
		"HEALTHY":                  1,
		"UNHEALTHY":                2,
		"AGENT_NOT_INSTALLED":      3,
		"AGENT_NOT_RUNNING":        4,
	}
)

func (x Runtime_HealthState) Enum() *Runtime_HealthState {
	p := new(Runtime_HealthState)
	*p = x
	return p
}

func (x Runtime_HealthState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Runtime_HealthState) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_notebooks_v1_data_proto_enumTypes[1].Descriptor()
}

func (Runtime_HealthState) Type() protoreflect.EnumType {
	return &file_cloud_notebooks_v1_data_proto_enumTypes[1]
}

func (x Runtime_HealthState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Runtime_HealthState.Descriptor instead.
func (Runtime_HealthState) EnumDescriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{3, 1}
}

// Type of this accelerator.
type RuntimeAcceleratorConfig_AcceleratorType int32

const (
	// Accelerator type is not specified.
	RuntimeAcceleratorConfig_ACCELERATOR_TYPE_UNSPECIFIED RuntimeAcceleratorConfig_AcceleratorType = 0
	// Accelerator type is Nvidia Tesla K80.
	RuntimeAcceleratorConfig_NVIDIA_TESLA_K80 RuntimeAcceleratorConfig_AcceleratorType = 1
	// Accelerator type is Nvidia Tesla P100.
	RuntimeAcceleratorConfig_NVIDIA_TESLA_P100 RuntimeAcceleratorConfig_AcceleratorType = 2
	// Accelerator type is Nvidia Tesla V100.
	RuntimeAcceleratorConfig_NVIDIA_TESLA_V100 RuntimeAcceleratorConfig_AcceleratorType = 3
	// Accelerator type is Nvidia Tesla P4.
	RuntimeAcceleratorConfig_NVIDIA_TESLA_P4 RuntimeAcceleratorConfig_AcceleratorType = 4
	// Accelerator type is Nvidia Tesla T4.
	RuntimeAcceleratorConfig_NVIDIA_TESLA_T4 RuntimeAcceleratorConfig_AcceleratorType = 5
	// Accelerator type is Nvidia Tesla A100 - 40GB.
	RuntimeAcceleratorConfig_NVIDIA_TESLA_A100 RuntimeAcceleratorConfig_AcceleratorType = 6
	// (Coming soon) Accelerator type is TPU V2.
	RuntimeAcceleratorConfig_TPU_V2 RuntimeAcceleratorConfig_AcceleratorType = 7
	// (Coming soon) Accelerator type is TPU V3.
	RuntimeAcceleratorConfig_TPU_V3 RuntimeAcceleratorConfig_AcceleratorType = 8
	// Accelerator type is NVIDIA Tesla T4 Virtual Workstations.
	RuntimeAcceleratorConfig_NVIDIA_TESLA_T4_VWS RuntimeAcceleratorConfig_AcceleratorType = 9
	// Accelerator type is NVIDIA Tesla P100 Virtual Workstations.
	RuntimeAcceleratorConfig_NVIDIA_TESLA_P100_VWS RuntimeAcceleratorConfig_AcceleratorType = 10
	// Accelerator type is NVIDIA Tesla P4 Virtual Workstations.
	RuntimeAcceleratorConfig_NVIDIA_TESLA_P4_VWS RuntimeAcceleratorConfig_AcceleratorType = 11
)

// Enum value maps for RuntimeAcceleratorConfig_AcceleratorType.
var (
	RuntimeAcceleratorConfig_AcceleratorType_name = map[int32]string{
		0:  "ACCELERATOR_TYPE_UNSPECIFIED",
		1:  "NVIDIA_TESLA_K80",
		2:  "NVIDIA_TESLA_P100",
		3:  "NVIDIA_TESLA_V100",
		4:  "NVIDIA_TESLA_P4",
		5:  "NVIDIA_TESLA_T4",
		6:  "NVIDIA_TESLA_A100",
		7:  "TPU_V2",
		8:  "TPU_V3",
		9:  "NVIDIA_TESLA_T4_VWS",
		10: "NVIDIA_TESLA_P100_VWS",
		11: "NVIDIA_TESLA_P4_VWS",
	}
	RuntimeAcceleratorConfig_AcceleratorType_value = map[string]int32{
		"ACCELERATOR_TYPE_UNSPECIFIED": 0,
		"NVIDIA_TESLA_K80":             1,
		"NVIDIA_TESLA_P100":            2,
		"NVIDIA_TESLA_V100":            3,
		"NVIDIA_TESLA_P4":              4,
		"NVIDIA_TESLA_T4":              5,
		"NVIDIA_TESLA_A100":            6,
		"TPU_V2":                       7,
		"TPU_V3":                       8,
		"NVIDIA_TESLA_T4_VWS":          9,
		"NVIDIA_TESLA_P100_VWS":        10,
		"NVIDIA_TESLA_P4_VWS":          11,
	}
)

func (x RuntimeAcceleratorConfig_AcceleratorType) Enum() *RuntimeAcceleratorConfig_AcceleratorType {
	p := new(RuntimeAcceleratorConfig_AcceleratorType)
	*p = x
	return p
}

func (x RuntimeAcceleratorConfig_AcceleratorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuntimeAcceleratorConfig_AcceleratorType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_notebooks_v1_data_proto_enumTypes[2].Descriptor()
}

func (RuntimeAcceleratorConfig_AcceleratorType) Type() protoreflect.EnumType {
	return &file_cloud_notebooks_v1_data_proto_enumTypes[2]
}

func (x RuntimeAcceleratorConfig_AcceleratorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuntimeAcceleratorConfig_AcceleratorType.Descriptor instead.
func (RuntimeAcceleratorConfig_AcceleratorType) EnumDescriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{4, 0}
}

// Possible disk types.
type LocalDiskInitializeParams_DiskType int32

const (
	// Disk type not set.
	LocalDiskInitializeParams_DISK_TYPE_UNSPECIFIED LocalDiskInitializeParams_DiskType = 0
	// Standard persistent disk type.
	LocalDiskInitializeParams_PD_STANDARD LocalDiskInitializeParams_DiskType = 1
	// SSD persistent disk type.
	LocalDiskInitializeParams_PD_SSD LocalDiskInitializeParams_DiskType = 2
	// Balanced persistent disk type.
	LocalDiskInitializeParams_PD_BALANCED LocalDiskInitializeParams_DiskType = 3
	// Extreme persistent disk type.
	LocalDiskInitializeParams_PD_EXTREME LocalDiskInitializeParams_DiskType = 4
)

// Enum value maps for LocalDiskInitializeParams_DiskType.
var (
	LocalDiskInitializeParams_DiskType_name = map[int32]string{
		0: "DISK_TYPE_UNSPECIFIED",
		1: "PD_STANDARD",
		2: "PD_SSD",
		3: "PD_BALANCED",
		4: "PD_EXTREME",
	}
	LocalDiskInitializeParams_DiskType_value = map[string]int32{
		"DISK_TYPE_UNSPECIFIED": 0,
		"PD_STANDARD":           1,
		"PD_SSD":                2,
		"PD_BALANCED":           3,
		"PD_EXTREME":            4,
	}
)

func (x LocalDiskInitializeParams_DiskType) Enum() *LocalDiskInitializeParams_DiskType {
	p := new(LocalDiskInitializeParams_DiskType)
	*p = x
	return p
}

func (x LocalDiskInitializeParams_DiskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocalDiskInitializeParams_DiskType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_notebooks_v1_data_proto_enumTypes[3].Descriptor()
}

func (LocalDiskInitializeParams_DiskType) Type() protoreflect.EnumType {
	return &file_cloud_notebooks_v1_data_proto_enumTypes[3]
}

func (x LocalDiskInitializeParams_DiskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocalDiskInitializeParams_DiskType.Descriptor instead.
func (LocalDiskInitializeParams_DiskType) EnumDescriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{7, 0}
}

// Possible ways to access runtime. Authentication mode.
// Currently supports: Single User only.
type RuntimeAccessConfig_RuntimeAccessType int32

const (
	// Unspecified access.
	RuntimeAccessConfig_RUNTIME_ACCESS_TYPE_UNSPECIFIED RuntimeAccessConfig_RuntimeAccessType = 0
	// Single user login.
	RuntimeAccessConfig_SINGLE_USER RuntimeAccessConfig_RuntimeAccessType = 1
	// Service Account mode.
	// In Service Account mode, Runtime creator will specify a SA that exists
	// in the consumer project. Using Runtime Service Account field.
	// Users accessing the Runtime need ActAs (Service Account User) permission.
	RuntimeAccessConfig_SERVICE_ACCOUNT RuntimeAccessConfig_RuntimeAccessType = 2
)

// Enum value maps for RuntimeAccessConfig_RuntimeAccessType.
var (
	RuntimeAccessConfig_RuntimeAccessType_name = map[int32]string{
		0: "RUNTIME_ACCESS_TYPE_UNSPECIFIED",
		1: "SINGLE_USER",
		2: "SERVICE_ACCOUNT",
	}
	RuntimeAccessConfig_RuntimeAccessType_value = map[string]int32{
		"RUNTIME_ACCESS_TYPE_UNSPECIFIED": 0,
		"SINGLE_USER":                     1,
		"SERVICE_ACCOUNT":                 2,
	}
)

func (x RuntimeAccessConfig_RuntimeAccessType) Enum() *RuntimeAccessConfig_RuntimeAccessType {
	p := new(RuntimeAccessConfig_RuntimeAccessType)
	*p = x
	return p
}

func (x RuntimeAccessConfig_RuntimeAccessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuntimeAccessConfig_RuntimeAccessType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_notebooks_v1_data_proto_enumTypes[4].Descriptor()
}

func (RuntimeAccessConfig_RuntimeAccessType) Type() protoreflect.EnumType {
	return &file_cloud_notebooks_v1_data_proto_enumTypes[4]
}

func (x RuntimeAccessConfig_RuntimeAccessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuntimeAccessConfig_RuntimeAccessType.Descriptor instead.
func (RuntimeAccessConfig_RuntimeAccessType) EnumDescriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{8, 0}
}

// Behavior for the post startup script.
type RuntimeSoftwareConfig_PostStartupScriptBehavior int32

const (
	// Unspecified post startup script behavior. Will run only once at creation.
	RuntimeSoftwareConfig_POST_STARTUP_SCRIPT_BEHAVIOR_UNSPECIFIED RuntimeSoftwareConfig_PostStartupScriptBehavior = 0
	// Runs the post startup script provided during creation at every start.
	RuntimeSoftwareConfig_RUN_EVERY_START RuntimeSoftwareConfig_PostStartupScriptBehavior = 1
	// Downloads and runs the provided post startup script at every start.
	RuntimeSoftwareConfig_DOWNLOAD_AND_RUN_EVERY_START RuntimeSoftwareConfig_PostStartupScriptBehavior = 2
)

// Enum value maps for RuntimeSoftwareConfig_PostStartupScriptBehavior.
var (
	RuntimeSoftwareConfig_PostStartupScriptBehavior_name = map[int32]string{
		0: "POST_STARTUP_SCRIPT_BEHAVIOR_UNSPECIFIED",
		1: "RUN_EVERY_START",
		2: "DOWNLOAD_AND_RUN_EVERY_START",
	}
	RuntimeSoftwareConfig_PostStartupScriptBehavior_value = map[string]int32{
		"POST_STARTUP_SCRIPT_BEHAVIOR_UNSPECIFIED": 0,
		"RUN_EVERY_START":                          1,
		"DOWNLOAD_AND_RUN_EVERY_START":             2,
	}
)

func (x RuntimeSoftwareConfig_PostStartupScriptBehavior) Enum() *RuntimeSoftwareConfig_PostStartupScriptBehavior {
	p := new(RuntimeSoftwareConfig_PostStartupScriptBehavior)
	*p = x
	return p
}

func (x RuntimeSoftwareConfig_PostStartupScriptBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuntimeSoftwareConfig_PostStartupScriptBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_notebooks_v1_data_proto_enumTypes[5].Descriptor()
}

func (RuntimeSoftwareConfig_PostStartupScriptBehavior) Type() protoreflect.EnumType {
	return &file_cloud_notebooks_v1_data_proto_enumTypes[5]
}

func (x RuntimeSoftwareConfig_PostStartupScriptBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuntimeSoftwareConfig_PostStartupScriptBehavior.Descriptor instead.
func (RuntimeSoftwareConfig_PostStartupScriptBehavior) EnumDescriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{9, 0}
}

// The type of vNIC driver.
// Default should be UNSPECIFIED_NIC_TYPE.
type VirtualMachineConfig_NicType int32

const (
	// No type specified.
	VirtualMachineConfig_UNSPECIFIED_NIC_TYPE VirtualMachineConfig_NicType = 0
	// VIRTIO
	VirtualMachineConfig_VIRTIO_NET VirtualMachineConfig_NicType = 1
	// GVNIC
	VirtualMachineConfig_GVNIC VirtualMachineConfig_NicType = 2
)

// Enum value maps for VirtualMachineConfig_NicType.
var (
	VirtualMachineConfig_NicType_name = map[int32]string{
		0: "UNSPECIFIED_NIC_TYPE",
		1: "VIRTIO_NET",
		2: "GVNIC",
	}
	VirtualMachineConfig_NicType_value = map[string]int32{
		"UNSPECIFIED_NIC_TYPE": 0,
		"VIRTIO_NET":           1,
		"GVNIC":                2,
	}
)

func (x VirtualMachineConfig_NicType) Enum() *VirtualMachineConfig_NicType {
	p := new(VirtualMachineConfig_NicType)
	*p = x
	return p
}

func (x VirtualMachineConfig_NicType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VirtualMachineConfig_NicType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_notebooks_v1_data_proto_enumTypes[6].Descriptor()
}

func (VirtualMachineConfig_NicType) Type() protoreflect.EnumType {
	return &file_cloud_notebooks_v1_data_proto_enumTypes[6]
}

func (x VirtualMachineConfig_NicType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VirtualMachineConfig_NicType.Descriptor instead.
func (VirtualMachineConfig_NicType) EnumDescriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{13, 0}
}

// Required. Specifies the machine types, the number of replicas for workers
// and parameter servers.
type ExecutionTemplate_ScaleTier int32

const (
	// Unspecified Scale Tier.
	ExecutionTemplate_SCALE_TIER_UNSPECIFIED ExecutionTemplate_ScaleTier = 0
	// A single worker instance. This tier is suitable for learning how to use
	// Cloud ML, and for experimenting with new models using small datasets.
	ExecutionTemplate_BASIC ExecutionTemplate_ScaleTier = 1
	// Many workers and a few parameter servers.
	ExecutionTemplate_STANDARD_1 ExecutionTemplate_ScaleTier = 2
	// A large number of workers with many parameter servers.
	ExecutionTemplate_PREMIUM_1 ExecutionTemplate_ScaleTier = 3
	// A single worker instance with a K80 GPU.
	ExecutionTemplate_BASIC_GPU ExecutionTemplate_ScaleTier = 4
	// A single worker instance with a Cloud TPU.
	ExecutionTemplate_BASIC_TPU ExecutionTemplate_ScaleTier = 5
	// The CUSTOM tier is not a set tier, but rather enables you to use your
	// own cluster specification. When you use this tier, set values to
	// configure your processing cluster according to these guidelines:
	//
	//   - You _must_ set `ExecutionTemplate.masterType` to specify the type
	//     of machine to use for your master node. This is the only required
	//     setting.
	ExecutionTemplate_CUSTOM ExecutionTemplate_ScaleTier = 6
)

// Enum value maps for ExecutionTemplate_ScaleTier.
var (
	ExecutionTemplate_ScaleTier_name = map[int32]string{
		0: "SCALE_TIER_UNSPECIFIED",
		1: "BASIC",
		2: "STANDARD_1",
		3: "PREMIUM_1",
		4: "BASIC_GPU",
		5: "BASIC_TPU",
		6: "CUSTOM",
	}
	ExecutionTemplate_ScaleTier_value = map[string]int32{
		"SCALE_TIER_UNSPECIFIED": 0,
		"BASIC":                  1,
		"STANDARD_1":             2,
		"PREMIUM_1":              3,
		"BASIC_GPU":              4,
		"BASIC_TPU":              5,
		"CUSTOM":                 6,
	}
)

func (x ExecutionTemplate_ScaleTier) Enum() *ExecutionTemplate_ScaleTier {
	p := new(ExecutionTemplate_ScaleTier)
	*p = x
	return p
}

func (x ExecutionTemplate_ScaleTier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionTemplate_ScaleTier) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_notebooks_v1_data_proto_enumTypes[7].Descriptor()
}

func (ExecutionTemplate_ScaleTier) Type() protoreflect.EnumType {
	return &file_cloud_notebooks_v1_data_proto_enumTypes[7]
}

func (x ExecutionTemplate_ScaleTier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionTemplate_ScaleTier.Descriptor instead.
func (ExecutionTemplate_ScaleTier) EnumDescriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{14, 0}
}

// Hardware accelerator types for AI Platform Training jobs.
type ExecutionTemplate_SchedulerAcceleratorType int32

const (
	// Unspecified accelerator type. Default to no GPU.
	ExecutionTemplate_SCHEDULER_ACCELERATOR_TYPE_UNSPECIFIED ExecutionTemplate_SchedulerAcceleratorType = 0
	// Nvidia Tesla K80 GPU.
	ExecutionTemplate_NVIDIA_TESLA_K80 ExecutionTemplate_SchedulerAcceleratorType = 1
	// Nvidia Tesla P100 GPU.
	ExecutionTemplate_NVIDIA_TESLA_P100 ExecutionTemplate_SchedulerAcceleratorType = 2
	// Nvidia Tesla V100 GPU.
	ExecutionTemplate_NVIDIA_TESLA_V100 ExecutionTemplate_SchedulerAcceleratorType = 3
	// Nvidia Tesla P4 GPU.
	ExecutionTemplate_NVIDIA_TESLA_P4 ExecutionTemplate_SchedulerAcceleratorType = 4
	// Nvidia Tesla T4 GPU.
	ExecutionTemplate_NVIDIA_TESLA_T4 ExecutionTemplate_SchedulerAcceleratorType = 5
	// Nvidia Tesla A100 GPU.
	ExecutionTemplate_NVIDIA_TESLA_A100 ExecutionTemplate_SchedulerAcceleratorType = 10
	// TPU v2.
	ExecutionTemplate_TPU_V2 ExecutionTemplate_SchedulerAcceleratorType = 6
	// TPU v3.
	ExecutionTemplate_TPU_V3 ExecutionTemplate_SchedulerAcceleratorType = 7
)

// Enum value maps for ExecutionTemplate_SchedulerAcceleratorType.
var (
	ExecutionTemplate_SchedulerAcceleratorType_name = map[int32]string{
		0:  "SCHEDULER_ACCELERATOR_TYPE_UNSPECIFIED",
		1:  "NVIDIA_TESLA_K80",
		2:  "NVIDIA_TESLA_P100",
		3:  "NVIDIA_TESLA_V100",
		4:  "NVIDIA_TESLA_P4",
		5:  "NVIDIA_TESLA_T4",
		10: "NVIDIA_TESLA_A100",
		6:  "TPU_V2",
		7:  "TPU_V3",
	}
	ExecutionTemplate_SchedulerAcceleratorType_value = map[string]int32{
		"SCHEDULER_ACCELERATOR_TYPE_UNSPECIFIED": 0,
		"NVIDIA_TESLA_K80":                       1,
		"NVIDIA_TESLA_P100":                      2,
		"NVIDIA_TESLA_V100":                      3,
		"NVIDIA_TESLA_P4":                        4,
		"NVIDIA_TESLA_T4":                        5,
		"NVIDIA_TESLA_A100":                      10,
		"TPU_V2":                                 6,
		"TPU_V3":                                 7,
	}
)

func (x ExecutionTemplate_SchedulerAcceleratorType) Enum() *ExecutionTemplate_SchedulerAcceleratorType {
	p := new(ExecutionTemplate_SchedulerAcceleratorType)
	*p = x
	return p
}

func (x ExecutionTemplate_SchedulerAcceleratorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionTemplate_SchedulerAcceleratorType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_notebooks_v1_data_proto_enumTypes[8].Descriptor()
}

func (ExecutionTemplate_SchedulerAcceleratorType) Type() protoreflect.EnumType {
	return &file_cloud_notebooks_v1_data_proto_enumTypes[8]
}

func (x ExecutionTemplate_SchedulerAcceleratorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionTemplate_SchedulerAcceleratorType.Descriptor instead.
func (ExecutionTemplate_SchedulerAcceleratorType) EnumDescriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{14, 1}
}

// The backend used for this execution.
type ExecutionTemplate_JobType int32

const (
	// No type specified.
	ExecutionTemplate_JOB_TYPE_UNSPECIFIED ExecutionTemplate_JobType = 0
	// Custom Job in `aiplatform.googleapis.com`.
	// Default value for an execution.
	ExecutionTemplate_VERTEX_AI ExecutionTemplate_JobType = 1
	// Run execution on a cluster with Dataproc as a job.
	// https://cloud.google.com/dataproc/docs/reference/rest/v1/projects.regions.jobs
	ExecutionTemplate_DATAPROC ExecutionTemplate_JobType = 2
)

// Enum value maps for ExecutionTemplate_JobType.
var (
	ExecutionTemplate_JobType_name = map[int32]string{
		0: "JOB_TYPE_UNSPECIFIED",
		1: "VERTEX_AI",
		2: "DATAPROC",
	}
	ExecutionTemplate_JobType_value = map[string]int32{
		"JOB_TYPE_UNSPECIFIED": 0,
		"VERTEX_AI":            1,
		"DATAPROC":             2,
	}
)

func (x ExecutionTemplate_JobType) Enum() *ExecutionTemplate_JobType {
	p := new(ExecutionTemplate_JobType)
	*p = x
	return p
}

func (x ExecutionTemplate_JobType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionTemplate_JobType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_notebooks_v1_data_proto_enumTypes[9].Descriptor()
}

func (ExecutionTemplate_JobType) Type() protoreflect.EnumType {
	return &file_cloud_notebooks_v1_data_proto_enumTypes[9]
}

func (x ExecutionTemplate_JobType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionTemplate_JobType.Descriptor instead.
func (ExecutionTemplate_JobType) EnumDescriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{14, 2}
}

// Enum description of the state of the underlying AIP job.
type Execution_State int32

const (
	// The job state is unspecified.
	Execution_STATE_UNSPECIFIED Execution_State = 0
	// The job has been just created and processing has not yet begun.
	Execution_QUEUED Execution_State = 1
	// The service is preparing to execution the job.
	Execution_PREPARING Execution_State = 2
	// The job is in progress.
	Execution_RUNNING Execution_State = 3
	// The job completed successfully.
	Execution_SUCCEEDED Execution_State = 4
	// The job failed.
	// `error_message` should contain the details of the failure.
	Execution_FAILED Execution_State = 5
	// The job is being cancelled.
	// `error_message` should describe the reason for the cancellation.
	Execution_CANCELLING Execution_State = 6
	// The job has been cancelled.
	// `error_message` should describe the reason for the cancellation.
	Execution_CANCELLED Execution_State = 7
	// The job has become expired (relevant to Vertex AI jobs)
	// https://cloud.google.com/vertex-ai/docs/reference/rest/v1/JobState
	Execution_EXPIRED Execution_State = 9
	// The Execution is being created.
	Execution_INITIALIZING Execution_State = 10
)

// Enum value maps for Execution_State.
var (
	Execution_State_name = map[int32]string{
		0:  "STATE_UNSPECIFIED",
		1:  "QUEUED",
		2:  "PREPARING",
		3:  "RUNNING",
		4:  "SUCCEEDED",
		5:  "FAILED",
		6:  "CANCELLING",
		7:  "CANCELLED",
		9:  "EXPIRED",
		10: "INITIALIZING",
	}
	Execution_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"QUEUED":            1,
		"PREPARING":         2,
		"RUNNING":           3,
		"SUCCEEDED":         4,
		"FAILED":            5,
		"CANCELLING":        6,
		"CANCELLED":         7,
		"EXPIRED":           9,
		"INITIALIZING":      10,
	}
)

func (x Execution_State) Enum() *Execution_State {
	p := new(Execution_State)
	*p = x
	return p
}

func (x Execution_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Execution_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_notebooks_v1_data_proto_enumTypes[10].Descriptor()
}

func (Execution_State) Type() protoreflect.EnumType {
	return &file_cloud_notebooks_v1_data_proto_enumTypes[10]
}

func (x Execution_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Execution_State.Descriptor instead.
func (Execution_State) EnumDescriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{15, 0}
}

// Indicates whether to consume capacity from an reservation or not.
type ReservationAffinity_Type int32

const (
	// Default type.
	ReservationAffinity_TYPE_UNSPECIFIED ReservationAffinity_Type = 0
	// Do not consume from any allocated capacity.
	ReservationAffinity_NO_RESERVATION ReservationAffinity_Type = 1
	// Consume any reservation available.
	ReservationAffinity_ANY_RESERVATION ReservationAffinity_Type = 2
	// Must consume from a specific reservation. Must specify key value fields
	// for specifying the reservations.
	ReservationAffinity_SPECIFIC_RESERVATION ReservationAffinity_Type = 3
)

// Enum value maps for ReservationAffinity_Type.
var (
	ReservationAffinity_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "NO_RESERVATION",
		2: "ANY_RESERVATION",
		3: "SPECIFIC_RESERVATION",
	}
	ReservationAffinity_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":     0,
		"NO_RESERVATION":       1,
		"ANY_RESERVATION":      2,
		"SPECIFIC_RESERVATION": 3,
	}
)

func (x ReservationAffinity_Type) Enum() *ReservationAffinity_Type {
	p := new(ReservationAffinity_Type)
	*p = x
	return p
}

func (x ReservationAffinity_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReservationAffinity_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_notebooks_v1_data_proto_enumTypes[11].Descriptor()
}

func (ReservationAffinity_Type) Type() protoreflect.EnumType {
	return &file_cloud_notebooks_v1_data_proto_enumTypes[11]
}

func (x ReservationAffinity_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReservationAffinity_Type.Descriptor instead.
func (ReservationAffinity_Type) EnumDescriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{16, 0}
}

// Definition of the types of hardware accelerators that can be used on this
// instance.
type Instance_AcceleratorType int32

const (
	// Accelerator type is not specified.
	Instance_ACCELERATOR_TYPE_UNSPECIFIED Instance_AcceleratorType = 0
	// Accelerator type is Nvidia Tesla K80.
	Instance_NVIDIA_TESLA_K80 Instance_AcceleratorType = 1
	// Accelerator type is Nvidia Tesla P100.
	Instance_NVIDIA_TESLA_P100 Instance_AcceleratorType = 2
	// Accelerator type is Nvidia Tesla V100.
	Instance_NVIDIA_TESLA_V100 Instance_AcceleratorType = 3
	// Accelerator type is Nvidia Tesla P4.
	Instance_NVIDIA_TESLA_P4 Instance_AcceleratorType = 4
	// Accelerator type is Nvidia Tesla T4.
	Instance_NVIDIA_TESLA_T4 Instance_AcceleratorType = 5
	// Accelerator type is Nvidia Tesla A100.
	Instance_NVIDIA_TESLA_A100 Instance_AcceleratorType = 11
	// Accelerator type is NVIDIA Tesla T4 Virtual Workstations.
	Instance_NVIDIA_TESLA_T4_VWS Instance_AcceleratorType = 8
	// Accelerator type is NVIDIA Tesla P100 Virtual Workstations.
	Instance_NVIDIA_TESLA_P100_VWS Instance_AcceleratorType = 9
	// Accelerator type is NVIDIA Tesla P4 Virtual Workstations.
	Instance_NVIDIA_TESLA_P4_VWS Instance_AcceleratorType = 10
	// (Coming soon) Accelerator type is TPU V2.
	Instance_TPU_V2 Instance_AcceleratorType = 6
	// (Coming soon) Accelerator type is TPU V3.
	Instance_TPU_V3 Instance_AcceleratorType = 7
)

// Enum value maps for Instance_AcceleratorType.
var (
	Instance_AcceleratorType_name = map[int32]string{
		0:  "ACCELERATOR_TYPE_UNSPECIFIED",
		1:  "NVIDIA_TESLA_K80",
		2:  "NVIDIA_TESLA_P100",
		3:  "NVIDIA_TESLA_V100",
		4:  "NVIDIA_TESLA_P4",
		5:  "NVIDIA_TESLA_T4",
		11: "NVIDIA_TESLA_A100",
		8:  "NVIDIA_TESLA_T4_VWS",
		9:  "NVIDIA_TESLA_P100_VWS",
		10: "NVIDIA_TESLA_P4_VWS",
		6:  "TPU_V2",
		7:  "TPU_V3",
	}
	Instance_AcceleratorType_value = map[string]int32{
		"ACCELERATOR_TYPE_UNSPECIFIED": 0,
		"NVIDIA_TESLA_K80":             1,
		"NVIDIA_TESLA_P100":            2,
		"NVIDIA_TESLA_V100":            3,
		"NVIDIA_TESLA_P4":              4,
		"NVIDIA_TESLA_T4":              5,
		"NVIDIA_TESLA_A100":            11,
		"NVIDIA_TESLA_T4_VWS":          8,
		"NVIDIA_TESLA_P100_VWS":        9,
		"NVIDIA_TESLA_P4_VWS":          10,
		"TPU_V2":                       6,
		"TPU_V3":                       7,
	}
)

func (x Instance_AcceleratorType) Enum() *Instance_AcceleratorType {
	p := new(Instance_AcceleratorType)
	*p = x
	return p
}

func (x Instance_AcceleratorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Instance_AcceleratorType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_notebooks_v1_data_proto_enumTypes[12].Descriptor()
}

func (Instance_AcceleratorType) Type() protoreflect.EnumType {
	return &file_cloud_notebooks_v1_data_proto_enumTypes[12]
}

func (x Instance_AcceleratorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Instance_AcceleratorType.Descriptor instead.
func (Instance_AcceleratorType) EnumDescriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{17, 0}
}

// The definition of the states of this instance.
type Instance_State int32

const (
	// State is not specified.
	Instance_STATE_UNSPECIFIED Instance_State = 0
	// The control logic is starting the instance.
	Instance_STARTING Instance_State = 1
	// The control logic is installing required frameworks and registering the
	// instance with notebook proxy
	Instance_PROVISIONING Instance_State = 2
	// The instance is running.
	Instance_ACTIVE Instance_State = 3
	// The control logic is stopping the instance.
	Instance_STOPPING Instance_State = 4
	// The instance is stopped.
	Instance_STOPPED Instance_State = 5
	// The instance is deleted.
	Instance_DELETED Instance_State = 6
	// The instance is upgrading.
	Instance_UPGRADING Instance_State = 7
	// The instance is being created.
	Instance_INITIALIZING Instance_State = 8
	// The instance is getting registered.
	Instance_REGISTERING Instance_State = 9
	// The instance is suspending.
	Instance_SUSPENDING Instance_State = 10
	// The instance is suspended.
	Instance_SUSPENDED Instance_State = 11
)

// Enum value maps for Instance_State.
var (
	Instance_State_name = map[int32]string{
		0:  "STATE_UNSPECIFIED",
		1:  "STARTING",
		2:  "PROVISIONING",
		3:  "ACTIVE",
		4:  "STOPPING",
		5:  "STOPPED",
		6:  "DELETED",
		7:  "UPGRADING",
		8:  "INITIALIZING",
		9:  "REGISTERING",
		10: "SUSPENDING",
		11: "SUSPENDED",
	}
	Instance_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STARTING":          1,
		"PROVISIONING":      2,
		"ACTIVE":            3,
		"STOPPING":          4,
		"STOPPED":           5,
		"DELETED":           6,
		"UPGRADING":         7,
		"INITIALIZING":      8,
		"REGISTERING":       9,
		"SUSPENDING":        10,
		"SUSPENDED":         11,
	}
)

func (x Instance_State) Enum() *Instance_State {
	p := new(Instance_State)
	*p = x
	return p
}

func (x Instance_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Instance_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_notebooks_v1_data_proto_enumTypes[13].Descriptor()
}

func (Instance_State) Type() protoreflect.EnumType {
	return &file_cloud_notebooks_v1_data_proto_enumTypes[13]
}

func (x Instance_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Instance_State.Descriptor instead.
func (Instance_State) EnumDescriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{17, 1}
}

// Possible disk types for notebook instances.
type Instance_DiskType int32

const (
	// Disk type not set.
	Instance_DISK_TYPE_UNSPECIFIED Instance_DiskType = 0
	// Standard persistent disk type.
	Instance_PD_STANDARD Instance_DiskType = 1
	// SSD persistent disk type.
	Instance_PD_SSD Instance_DiskType = 2
	// Balanced persistent disk type.
	Instance_PD_BALANCED Instance_DiskType = 3
	// Extreme persistent disk type.
	Instance_PD_EXTREME Instance_DiskType = 4
)

// Enum value maps for Instance_DiskType.
var (
	Instance_DiskType_name = map[int32]string{
		0: "DISK_TYPE_UNSPECIFIED",
		1: "PD_STANDARD",
		2: "PD_SSD",
		3: "PD_BALANCED",
		4: "PD_EXTREME",
	}
	Instance_DiskType_value = map[string]int32{
		"DISK_TYPE_UNSPECIFIED": 0,
		"PD_STANDARD":           1,
		"PD_SSD":                2,
		"PD_BALANCED":           3,
		"PD_EXTREME":            4,
	}
)

func (x Instance_DiskType) Enum() *Instance_DiskType {
	p := new(Instance_DiskType)
	*p = x
	return p
}

func (x Instance_DiskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Instance_DiskType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_notebooks_v1_data_proto_enumTypes[14].Descriptor()
}

func (Instance_DiskType) Type() protoreflect.EnumType {
	return &file_cloud_notebooks_v1_data_proto_enumTypes[14]
}

func (x Instance_DiskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Instance_DiskType.Descriptor instead.
func (Instance_DiskType) EnumDescriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{17, 2}
}

// Definition of the disk encryption options.
type Instance_DiskEncryption int32

const (
	// Disk encryption is not specified.
	Instance_DISK_ENCRYPTION_UNSPECIFIED Instance_DiskEncryption = 0
	// Use Google managed encryption keys to encrypt the boot disk.
	Instance_GMEK Instance_DiskEncryption = 1
	// Use customer managed encryption keys to encrypt the boot disk.
	Instance_CMEK Instance_DiskEncryption = 2
)

// Enum value maps for Instance_DiskEncryption.
var (
	Instance_DiskEncryption_name = map[int32]string{
		0: "DISK_ENCRYPTION_UNSPECIFIED",
		1: "GMEK",
		2: "CMEK",
	}
	Instance_DiskEncryption_value = map[string]int32{
		"DISK_ENCRYPTION_UNSPECIFIED": 0,
		"GMEK":                        1,
		"CMEK":                        2,
	}
)

func (x Instance_DiskEncryption) Enum() *Instance_DiskEncryption {
	p := new(Instance_DiskEncryption)
	*p = x
	return p
}

func (x Instance_DiskEncryption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Instance_DiskEncryption) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_notebooks_v1_data_proto_enumTypes[15].Descriptor()
}

func (Instance_DiskEncryption) Type() protoreflect.EnumType {
	return &file_cloud_notebooks_v1_data_proto_enumTypes[15]
}

func (x Instance_DiskEncryption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Instance_DiskEncryption.Descriptor instead.
func (Instance_DiskEncryption) EnumDescriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{17, 3}
}

// The type of vNIC driver.
// Default should be UNSPECIFIED_NIC_TYPE.
type Instance_NicType int32

const (
	// No type specified.
	Instance_UNSPECIFIED_NIC_TYPE Instance_NicType = 0
	// VIRTIO
	Instance_VIRTIO_NET Instance_NicType = 1
	// GVNIC
	Instance_GVNIC Instance_NicType = 2
)

// Enum value maps for Instance_NicType.
var (
	Instance_NicType_name = map[int32]string{
		0: "UNSPECIFIED_NIC_TYPE",
		1: "VIRTIO_NET",
		2: "GVNIC",
	}
	Instance_NicType_value = map[string]int32{
		"UNSPECIFIED_NIC_TYPE": 0,
		"VIRTIO_NET":           1,
		"GVNIC":                2,
	}
)

func (x Instance_NicType) Enum() *Instance_NicType {
	p := new(Instance_NicType)
	*p = x
	return p
}

func (x Instance_NicType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Instance_NicType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_notebooks_v1_data_proto_enumTypes[16].Descriptor()
}

func (Instance_NicType) Type() protoreflect.EnumType {
	return &file_cloud_notebooks_v1_data_proto_enumTypes[16]
}

func (x Instance_NicType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Instance_NicType.Descriptor instead.
func (Instance_NicType) EnumDescriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{17, 4}
}

// The definition of the states of this upgrade history entry.
type Instance_UpgradeHistoryEntry_State int32

const (
	// State is not specified.
	Instance_UpgradeHistoryEntry_STATE_UNSPECIFIED Instance_UpgradeHistoryEntry_State = 0
	// The instance upgrade is started.
	Instance_UpgradeHistoryEntry_STARTED Instance_UpgradeHistoryEntry_State = 1
	// The instance upgrade is succeeded.
	Instance_UpgradeHistoryEntry_SUCCEEDED Instance_UpgradeHistoryEntry_State = 2
	// The instance upgrade is failed.
	Instance_UpgradeHistoryEntry_FAILED Instance_UpgradeHistoryEntry_State = 3
)

// Enum value maps for Instance_UpgradeHistoryEntry_State.
var (
	Instance_UpgradeHistoryEntry_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STARTED",
		2: "SUCCEEDED",
		3: "FAILED",
	}
	Instance_UpgradeHistoryEntry_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STARTED":           1,
		"SUCCEEDED":         2,
		"FAILED":            3,
	}
)

func (x Instance_UpgradeHistoryEntry_State) Enum() *Instance_UpgradeHistoryEntry_State {
	p := new(Instance_UpgradeHistoryEntry_State)
	*p = x
	return p
}

func (x Instance_UpgradeHistoryEntry_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Instance_UpgradeHistoryEntry_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_notebooks_v1_data_proto_enumTypes[17].Descriptor()
}

func (Instance_UpgradeHistoryEntry_State) Type() protoreflect.EnumType {
	return &file_cloud_notebooks_v1_data_proto_enumTypes[17]
}

func (x Instance_UpgradeHistoryEntry_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Instance_UpgradeHistoryEntry_State.Descriptor instead.
func (Instance_UpgradeHistoryEntry_State) EnumDescriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{17, 3, 0}
}

// The definition of operations of this upgrade history entry.
type Instance_UpgradeHistoryEntry_Action int32

const (
	// Operation is not specified.
	Instance_UpgradeHistoryEntry_ACTION_UNSPECIFIED Instance_UpgradeHistoryEntry_Action = 0
	// Upgrade.
	Instance_UpgradeHistoryEntry_UPGRADE Instance_UpgradeHistoryEntry_Action = 1
	// Rollback.
	Instance_UpgradeHistoryEntry_ROLLBACK Instance_UpgradeHistoryEntry_Action = 2
)

// Enum value maps for Instance_UpgradeHistoryEntry_Action.
var (
	Instance_UpgradeHistoryEntry_Action_name = map[int32]string{
		0: "ACTION_UNSPECIFIED",
		1: "UPGRADE",
		2: "ROLLBACK",
	}
	Instance_UpgradeHistoryEntry_Action_value = map[string]int32{
		"ACTION_UNSPECIFIED": 0,
		"UPGRADE":            1,
		"ROLLBACK":           2,
	}
)

func (x Instance_UpgradeHistoryEntry_Action) Enum() *Instance_UpgradeHistoryEntry_Action {
	p := new(Instance_UpgradeHistoryEntry_Action)
	*p = x
	return p
}

func (x Instance_UpgradeHistoryEntry_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Instance_UpgradeHistoryEntry_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_notebooks_v1_data_proto_enumTypes[18].Descriptor()
}

func (Instance_UpgradeHistoryEntry_Action) Type() protoreflect.EnumType {
	return &file_cloud_notebooks_v1_data_proto_enumTypes[18]
}

func (x Instance_UpgradeHistoryEntry_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Instance_UpgradeHistoryEntry_Action.Descriptor instead.
func (Instance_UpgradeHistoryEntry_Action) EnumDescriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{17, 3, 1}
}

// State of the job.
type Schedule_State int32

const (
	// Unspecified state.
	Schedule_STATE_UNSPECIFIED Schedule_State = 0
	// The job is executing normally.
	Schedule_ENABLED Schedule_State = 1
	// The job is paused by the user. It will not execute. A user can
	// intentionally pause the job using
	// [PauseJobRequest][].
	Schedule_PAUSED Schedule_State = 2
	// The job is disabled by the system due to error. The user
	// cannot directly set a job to be disabled.
	Schedule_DISABLED Schedule_State = 3
	// The job state resulting from a failed [CloudScheduler.UpdateJob][]
	// operation. To recover a job from this state, retry
	// [CloudScheduler.UpdateJob][] until a successful response is received.
	Schedule_UPDATE_FAILED Schedule_State = 4
	// The schedule resource is being created.
	Schedule_INITIALIZING Schedule_State = 5
	// The schedule resource is being deleted.
	Schedule_DELETING Schedule_State = 6
)

// Enum value maps for Schedule_State.
var (
	Schedule_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "ENABLED",
		2: "PAUSED",
		3: "DISABLED",
		4: "UPDATE_FAILED",
		5: "INITIALIZING",
		6: "DELETING",
	}
	Schedule_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"ENABLED":           1,
		"PAUSED":            2,
		"DISABLED":          3,
		"UPDATE_FAILED":     4,
		"INITIALIZING":      5,
		"DELETING":          6,
	}
)

func (x Schedule_State) Enum() *Schedule_State {
	p := new(Schedule_State)
	*p = x
	return p
}

func (x Schedule_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Schedule_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_notebooks_v1_data_proto_enumTypes[19].Descriptor()
}

func (Schedule_State) Type() protoreflect.EnumType {
	return &file_cloud_notebooks_v1_data_proto_enumTypes[19]
}

func (x Schedule_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Schedule_State.Descriptor instead.
func (Schedule_State) EnumDescriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{18, 0}
}

// Definition of a software environment that is used to start a notebook
// instance.
type Environment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Name of this environment.
	// Format:
	// `projects/{project_id}/locations/{location}/environments/{environment_id}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Display name of this environment for the UI.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// A brief description of this environment.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Type of the environment; can be one of VM image, or container image.
	//
	// Types that are assignable to ImageType:
	//
	//	*Environment_VmImage
	//	*Environment_ContainerImage
	ImageType isEnvironment_ImageType `protobuf_oneof:"image_type"`
	// Path to a Bash script that automatically runs after a notebook instance
	// fully boots up. The path must be a URL or
	// Cloud Storage path. Example: `"gs://path-to-file/file-name"`
	PostStartupScript string `protobuf:"bytes,8,opt,name=post_startup_script,json=postStartupScript,proto3" json:"post_startup_script,omitempty"`
	// Output only. The time at which this environment was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *Environment) Reset() {
	*x = Environment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Environment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Environment) ProtoMessage() {}

func (x *Environment) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Environment.ProtoReflect.Descriptor instead.
func (*Environment) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{0}
}

func (x *Environment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Environment) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Environment) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (m *Environment) GetImageType() isEnvironment_ImageType {
	if m != nil {
		return m.ImageType
	}
	return nil
}

func (x *Environment) GetVmImage() *VmImage {
	if x, ok := x.GetImageType().(*Environment_VmImage); ok {
		return x.VmImage
	}
	return nil
}

func (x *Environment) GetContainerImage() *ContainerImage {
	if x, ok := x.GetImageType().(*Environment_ContainerImage); ok {
		return x.ContainerImage
	}
	return nil
}

func (x *Environment) GetPostStartupScript() string {
	if x != nil {
		return x.PostStartupScript
	}
	return ""
}

func (x *Environment) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

type isEnvironment_ImageType interface {
	isEnvironment_ImageType()
}

type Environment_VmImage struct {
	// Use a Compute Engine VM image to start the notebook instance.
	VmImage *VmImage `protobuf:"bytes,6,opt,name=vm_image,json=vmImage,proto3,oneof"`
}

type Environment_ContainerImage struct {
	// Use a container image to start the notebook instance.
	ContainerImage *ContainerImage `protobuf:"bytes,7,opt,name=container_image,json=containerImage,proto3,oneof"`
}

func (*Environment_VmImage) isEnvironment_ImageType() {}

func (*Environment_ContainerImage) isEnvironment_ImageType() {}

// Definition of a custom Compute Engine virtual machine image for starting a
// notebook instance with the environment installed directly on the VM.
type VmImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the Google Cloud project that this VM image belongs
	// to. Format: `{project_id}`
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The reference to an external Compute Engine VM image.
	//
	// Types that are assignable to Image:
	//
	//	*VmImage_ImageName
	//	*VmImage_ImageFamily
	Image isVmImage_Image `protobuf_oneof:"image"`
}

func (x *VmImage) Reset() {
	*x = VmImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VmImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VmImage) ProtoMessage() {}

func (x *VmImage) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VmImage.ProtoReflect.Descriptor instead.
func (*VmImage) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{1}
}

func (x *VmImage) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (m *VmImage) GetImage() isVmImage_Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (x *VmImage) GetImageName() string {
	if x, ok := x.GetImage().(*VmImage_ImageName); ok {
		return x.ImageName
	}
	return ""
}

func (x *VmImage) GetImageFamily() string {
	if x, ok := x.GetImage().(*VmImage_ImageFamily); ok {
		return x.ImageFamily
	}
	return ""
}

type isVmImage_Image interface {
	isVmImage_Image()
}

type VmImage_ImageName struct {
	// Use VM image name to find the image.
	ImageName string `protobuf:"bytes,2,opt,name=image_name,json=imageName,proto3,oneof"`
}

type VmImage_ImageFamily struct {
	// Use this VM image family to find the image; the newest image in this
	// family will be used.
	ImageFamily string `protobuf:"bytes,3,opt,name=image_family,json=imageFamily,proto3,oneof"`
}

func (*VmImage_ImageName) isVmImage_Image() {}

func (*VmImage_ImageFamily) isVmImage_Image() {}

// Definition of a container image for starting a notebook instance with the
// environment installed in a container.
type ContainerImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The path to the container image repository. For example:
	// `gcr.io/{project_id}/{image_name}`
	Repository string `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	// The tag of the container image. If not specified, this defaults
	// to the latest tag.
	Tag string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *ContainerImage) Reset() {
	*x = ContainerImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerImage) ProtoMessage() {}

func (x *ContainerImage) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerImage.ProtoReflect.Descriptor instead.
func (*ContainerImage) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{2}
}

func (x *ContainerImage) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *ContainerImage) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

// The definition of a Runtime for a managed notebook instance.
type Runtime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The resource name of the runtime.
	// Format:
	// `projects/{project}/locations/{location}/runtimes/{runtimeId}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type of the runtime; currently only supports Compute Engine VM.
	//
	// Types that are assignable to RuntimeType:
	//
	//	*Runtime_VirtualMachine
	RuntimeType isRuntime_RuntimeType `protobuf_oneof:"runtime_type"`
	// Output only. Runtime state.
	State Runtime_State `protobuf:"varint,3,opt,name=state,proto3,enum=google.events.cloud.notebooks.v1.Runtime_State" json:"state,omitempty"`
	// Output only. Runtime health_state.
	HealthState Runtime_HealthState `protobuf:"varint,4,opt,name=health_state,json=healthState,proto3,enum=google.events.cloud.notebooks.v1.Runtime_HealthState" json:"health_state,omitempty"`
	// The config settings for accessing runtime.
	AccessConfig *RuntimeAccessConfig `protobuf:"bytes,5,opt,name=access_config,json=accessConfig,proto3" json:"access_config,omitempty"`
	// The config settings for software inside the runtime.
	SoftwareConfig *RuntimeSoftwareConfig `protobuf:"bytes,6,opt,name=software_config,json=softwareConfig,proto3" json:"software_config,omitempty"`
	// Output only. Contains Runtime daemon metrics such as Service status and
	// JupyterLab stats.
	Metrics *RuntimeMetrics `protobuf:"bytes,7,opt,name=metrics,proto3" json:"metrics,omitempty"`
	// Output only. Runtime creation time.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Runtime update time.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional. The labels to associate with this Managed Notebook or Runtime.
	// Label **keys** must contain 1 to 63 characters, and must conform to
	// [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt).
	// Label **values** may be empty, but, if present, must contain 1 to 63
	// characters, and must conform to [RFC
	// 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be
	// associated with a cluster.
	Labels map[string]string `protobuf:"bytes,23,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Runtime) Reset() {
	*x = Runtime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Runtime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Runtime) ProtoMessage() {}

func (x *Runtime) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Runtime.ProtoReflect.Descriptor instead.
func (*Runtime) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{3}
}

func (x *Runtime) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *Runtime) GetRuntimeType() isRuntime_RuntimeType {
	if m != nil {
		return m.RuntimeType
	}
	return nil
}

func (x *Runtime) GetVirtualMachine() *VirtualMachine {
	if x, ok := x.GetRuntimeType().(*Runtime_VirtualMachine); ok {
		return x.VirtualMachine
	}
	return nil
}

func (x *Runtime) GetState() Runtime_State {
	if x != nil {
		return x.State
	}
	return Runtime_STATE_UNSPECIFIED
}

func (x *Runtime) GetHealthState() Runtime_HealthState {
	if x != nil {
		return x.HealthState
	}
	return Runtime_HEALTH_STATE_UNSPECIFIED
}

func (x *Runtime) GetAccessConfig() *RuntimeAccessConfig {
	if x != nil {
		return x.AccessConfig
	}
	return nil
}

func (x *Runtime) GetSoftwareConfig() *RuntimeSoftwareConfig {
	if x != nil {
		return x.SoftwareConfig
	}
	return nil
}

func (x *Runtime) GetMetrics() *RuntimeMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Runtime) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Runtime) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Runtime) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type isRuntime_RuntimeType interface {
	isRuntime_RuntimeType()
}

type Runtime_VirtualMachine struct {
	// Use a Compute Engine VM image to start the managed notebook instance.
	VirtualMachine *VirtualMachine `protobuf:"bytes,2,opt,name=virtual_machine,json=virtualMachine,proto3,oneof"`
}

func (*Runtime_VirtualMachine) isRuntime_RuntimeType() {}

// Definition of the types of hardware accelerators that can be used.
// Definition of the types of hardware accelerators that can be used.
// See [Compute Engine
// AcceleratorTypes](https://cloud.google.com/compute/docs/reference/beta/acceleratorTypes).
// Examples:
//
// * `nvidia-tesla-k80`
// * `nvidia-tesla-p100`
// * `nvidia-tesla-v100`
// * `nvidia-tesla-p4`
// * `nvidia-tesla-t4`
// * `nvidia-tesla-a100`
type RuntimeAcceleratorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Accelerator model.
	Type RuntimeAcceleratorConfig_AcceleratorType `protobuf:"varint,1,opt,name=type,proto3,enum=google.events.cloud.notebooks.v1.RuntimeAcceleratorConfig_AcceleratorType" json:"type,omitempty"`
	// Count of cores of this accelerator.
	CoreCount int64 `protobuf:"varint,2,opt,name=core_count,json=coreCount,proto3" json:"core_count,omitempty"`
}

func (x *RuntimeAcceleratorConfig) Reset() {
	*x = RuntimeAcceleratorConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeAcceleratorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeAcceleratorConfig) ProtoMessage() {}

func (x *RuntimeAcceleratorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeAcceleratorConfig.ProtoReflect.Descriptor instead.
func (*RuntimeAcceleratorConfig) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{4}
}

func (x *RuntimeAcceleratorConfig) GetType() RuntimeAcceleratorConfig_AcceleratorType {
	if x != nil {
		return x.Type
	}
	return RuntimeAcceleratorConfig_ACCELERATOR_TYPE_UNSPECIFIED
}

func (x *RuntimeAcceleratorConfig) GetCoreCount() int64 {
	if x != nil {
		return x.CoreCount
	}
	return 0
}

// Represents a custom encryption key configuration that can be applied to
// a resource. This will encrypt all disks in Virtual Machine.
type EncryptionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Cloud KMS resource identifier of the customer-managed encryption key
	// used to protect a resource, such as a disks. It has the following
	// format:
	// `projects/{PROJECT_ID}/locations/{REGION}/keyRings/{KEY_RING_NAME}/cryptoKeys/{KEY_NAME}`
	KmsKey string `protobuf:"bytes,1,opt,name=kms_key,json=kmsKey,proto3" json:"kms_key,omitempty"`
}

func (x *EncryptionConfig) Reset() {
	*x = EncryptionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionConfig) ProtoMessage() {}

func (x *EncryptionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionConfig.ProtoReflect.Descriptor instead.
func (*EncryptionConfig) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{5}
}

func (x *EncryptionConfig) GetKmsKey() string {
	if x != nil {
		return x.KmsKey
	}
	return ""
}

// A Local attached disk resource.
type LocalDisk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Output only. Specifies whether the disk will be auto-deleted when
	// the instance is deleted (but not when the disk is detached from the
	// instance).
	AutoDelete bool `protobuf:"varint,1,opt,name=auto_delete,json=autoDelete,proto3" json:"auto_delete,omitempty"`
	// Optional. Output only. Indicates that this is a boot disk. The virtual
	// machine will use the first partition of the disk for its root filesystem.
	Boot bool `protobuf:"varint,2,opt,name=boot,proto3" json:"boot,omitempty"`
	// Optional. Output only. Specifies a unique device name
	// of your choice that is reflected into the
	// `/dev/disk/by-id/google-*` tree of a Linux operating system running within
	// the instance. This name can be used to reference the device for mounting,
	// resizing, and so on, from within the instance.
	//
	// If not specified, the server chooses a default device name to apply to this
	// disk, in the form persistent-disk-x, where x is a number assigned by Google
	// Compute Engine. This field is only applicable for persistent disks.
	DeviceName string `protobuf:"bytes,3,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// Output only. Indicates a list of features to enable on the guest operating
	// system. Applicable only for bootable images. Read  Enabling guest operating
	// system features to see a list of available options.
	GuestOsFeatures []*LocalDisk_RuntimeGuestOsFeature `protobuf:"bytes,4,rep,name=guest_os_features,json=guestOsFeatures,proto3" json:"guest_os_features,omitempty"`
	// Output only. A zero-based index to this disk, where 0 is reserved for the
	// boot disk. If you have many disks attached to an instance, each disk would
	// have a unique index number.
	Index int32 `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
	// Specifies the disk interface to use for attaching this disk, which is
	// either SCSI or NVME. The default is SCSI. Persistent disks must always use
	// SCSI and the request will fail if you attempt to attach a persistent disk
	// in any other format than SCSI. Local SSDs can use either NVME or SCSI. For
	// performance characteristics of SCSI over NVMe, see Local SSD performance.
	// Valid values:
	//
	// * `NVME`
	// * `SCSI`
	Interface string `protobuf:"bytes,7,opt,name=interface,proto3" json:"interface,omitempty"`
	// Output only. Type of the resource. Always compute#attachedDisk for attached
	// disks.
	Kind string `protobuf:"bytes,8,opt,name=kind,proto3" json:"kind,omitempty"`
	// Output only. Any valid publicly visible licenses.
	Licenses []string `protobuf:"bytes,9,rep,name=licenses,proto3" json:"licenses,omitempty"`
	// The mode in which to attach this disk, either `READ_WRITE` or `READ_ONLY`.
	// If not specified, the default is to attach the disk in `READ_WRITE` mode.
	// Valid values:
	//
	// * `READ_ONLY`
	// * `READ_WRITE`
	Mode string `protobuf:"bytes,10,opt,name=mode,proto3" json:"mode,omitempty"`
	// Specifies a valid partial or full URL to an existing Persistent Disk
	// resource.
	Source string `protobuf:"bytes,11,opt,name=source,proto3" json:"source,omitempty"`
	// Specifies the type of the disk, either `SCRATCH` or `PERSISTENT`. If not
	// specified, the default is `PERSISTENT`.
	// Valid values:
	//
	// * `PERSISTENT`
	// * `SCRATCH`
	Type string `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *LocalDisk) Reset() {
	*x = LocalDisk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalDisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalDisk) ProtoMessage() {}

func (x *LocalDisk) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalDisk.ProtoReflect.Descriptor instead.
func (*LocalDisk) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{6}
}

func (x *LocalDisk) GetAutoDelete() bool {
	if x != nil {
		return x.AutoDelete
	}
	return false
}

func (x *LocalDisk) GetBoot() bool {
	if x != nil {
		return x.Boot
	}
	return false
}

func (x *LocalDisk) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *LocalDisk) GetGuestOsFeatures() []*LocalDisk_RuntimeGuestOsFeature {
	if x != nil {
		return x.GuestOsFeatures
	}
	return nil
}

func (x *LocalDisk) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *LocalDisk) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *LocalDisk) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *LocalDisk) GetLicenses() []string {
	if x != nil {
		return x.Licenses
	}
	return nil
}

func (x *LocalDisk) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *LocalDisk) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *LocalDisk) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Input only. Specifies the parameters for a new disk that will be created
// alongside the new instance. Use initialization parameters to create boot
// disks or local SSDs attached to the new runtime.
// This property is mutually exclusive with the source property; you can only
// define one or the other, but not both.
type LocalDiskInitializeParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Provide this property when creating the disk.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Optional. Specifies the disk name. If not specified, the default is to use
	// the name of the instance. If the disk with the instance name exists already
	// in the given zone/region, a new name will be automatically generated.
	DiskName string `protobuf:"bytes,2,opt,name=disk_name,json=diskName,proto3" json:"disk_name,omitempty"`
	// Optional. Specifies the size of the disk in base-2 GB. If not specified,
	// the disk will be the same size as the image (usually 10GB). If specified,
	// the size must be equal to or larger than 10GB. Default 100 GB.
	DiskSizeGb int64 `protobuf:"varint,3,opt,name=disk_size_gb,json=diskSizeGb,proto3" json:"disk_size_gb,omitempty"`
	// Optional. Labels to apply to this disk. These can be later modified by the
	// disks.setLabels method. This field is only applicable for persistent disks.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LocalDiskInitializeParams) Reset() {
	*x = LocalDiskInitializeParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalDiskInitializeParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalDiskInitializeParams) ProtoMessage() {}

func (x *LocalDiskInitializeParams) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalDiskInitializeParams.ProtoReflect.Descriptor instead.
func (*LocalDiskInitializeParams) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{7}
}

func (x *LocalDiskInitializeParams) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LocalDiskInitializeParams) GetDiskName() string {
	if x != nil {
		return x.DiskName
	}
	return ""
}

func (x *LocalDiskInitializeParams) GetDiskSizeGb() int64 {
	if x != nil {
		return x.DiskSizeGb
	}
	return 0
}

func (x *LocalDiskInitializeParams) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Specifies the login configuration for Runtime
type RuntimeAccessConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of access mode this instance.
	AccessType RuntimeAccessConfig_RuntimeAccessType `protobuf:"varint,1,opt,name=access_type,json=accessType,proto3,enum=google.events.cloud.notebooks.v1.RuntimeAccessConfig_RuntimeAccessType" json:"access_type,omitempty"`
	// The owner of this runtime after creation. Format: `alias@example.com`
	// Currently supports one owner only.
	RuntimeOwner string `protobuf:"bytes,2,opt,name=runtime_owner,json=runtimeOwner,proto3" json:"runtime_owner,omitempty"`
	// Output only. The proxy endpoint that is used to access the runtime.
	ProxyUri string `protobuf:"bytes,3,opt,name=proxy_uri,json=proxyUri,proto3" json:"proxy_uri,omitempty"`
}

func (x *RuntimeAccessConfig) Reset() {
	*x = RuntimeAccessConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeAccessConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeAccessConfig) ProtoMessage() {}

func (x *RuntimeAccessConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeAccessConfig.ProtoReflect.Descriptor instead.
func (*RuntimeAccessConfig) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{8}
}

func (x *RuntimeAccessConfig) GetAccessType() RuntimeAccessConfig_RuntimeAccessType {
	if x != nil {
		return x.AccessType
	}
	return RuntimeAccessConfig_RUNTIME_ACCESS_TYPE_UNSPECIFIED
}

func (x *RuntimeAccessConfig) GetRuntimeOwner() string {
	if x != nil {
		return x.RuntimeOwner
	}
	return ""
}

func (x *RuntimeAccessConfig) GetProxyUri() string {
	if x != nil {
		return x.ProxyUri
	}
	return ""
}

// Specifies the selection and configuration of software inside the runtime.
// The properties to set on runtime.
// Properties keys are specified in `key:value` format, for example:
//
// * `idle_shutdown: true`
// * `idle_shutdown_timeout: 180`
// * `enable_health_monitoring: true`
type RuntimeSoftwareConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cron expression in UTC timezone, used to schedule instance auto upgrade.
	// Please follow the [cron format](https://en.wikipedia.org/wiki/Cron).
	NotebookUpgradeSchedule string `protobuf:"bytes,1,opt,name=notebook_upgrade_schedule,json=notebookUpgradeSchedule,proto3" json:"notebook_upgrade_schedule,omitempty"`
	// Verifies core internal services are running.
	// Default: True
	EnableHealthMonitoring *bool `protobuf:"varint,2,opt,name=enable_health_monitoring,json=enableHealthMonitoring,proto3,oneof" json:"enable_health_monitoring,omitempty"`
	// Runtime will automatically shutdown after idle_shutdown_time.
	// Default: True
	IdleShutdown *bool `protobuf:"varint,3,opt,name=idle_shutdown,json=idleShutdown,proto3,oneof" json:"idle_shutdown,omitempty"`
	// Time in minutes to wait before shutting down runtime. Default: 180 minutes
	IdleShutdownTimeout int32 `protobuf:"varint,4,opt,name=idle_shutdown_timeout,json=idleShutdownTimeout,proto3" json:"idle_shutdown_timeout,omitempty"`
	// Install Nvidia Driver automatically.
	// Default: True
	InstallGpuDriver bool `protobuf:"varint,5,opt,name=install_gpu_driver,json=installGpuDriver,proto3" json:"install_gpu_driver,omitempty"`
	// Specify a custom Cloud Storage path where the GPU driver is stored.
	// If not specified, we'll automatically choose from official GPU drivers.
	CustomGpuDriverPath string `protobuf:"bytes,6,opt,name=custom_gpu_driver_path,json=customGpuDriverPath,proto3" json:"custom_gpu_driver_path,omitempty"`
	// Path to a Bash script that automatically runs after a notebook instance
	// fully boots up. The path must be a URL or
	// Cloud Storage path (`gs://path-to-file/file-name`).
	PostStartupScript string `protobuf:"bytes,7,opt,name=post_startup_script,json=postStartupScript,proto3" json:"post_startup_script,omitempty"`
	// Optional. Use a list of container images to use as Kernels in the notebook
	// instance.
	Kernels []*ContainerImage `protobuf:"bytes,8,rep,name=kernels,proto3" json:"kernels,omitempty"`
	// Output only. Bool indicating whether an newer image is available in an
	// image family.
	Upgradeable *bool `protobuf:"varint,9,opt,name=upgradeable,proto3,oneof" json:"upgradeable,omitempty"`
	// Behavior for the post startup script.
	PostStartupScriptBehavior RuntimeSoftwareConfig_PostStartupScriptBehavior `protobuf:"varint,10,opt,name=post_startup_script_behavior,json=postStartupScriptBehavior,proto3,enum=google.events.cloud.notebooks.v1.RuntimeSoftwareConfig_PostStartupScriptBehavior" json:"post_startup_script_behavior,omitempty"`
	// Bool indicating whether JupyterLab terminal will be available or not.
	// Default: False
	DisableTerminal *bool `protobuf:"varint,11,opt,name=disable_terminal,json=disableTerminal,proto3,oneof" json:"disable_terminal,omitempty"`
	// Output only. version of boot image such as M100, from release label of the
	// image.
	Version *string `protobuf:"bytes,12,opt,name=version,proto3,oneof" json:"version,omitempty"`
	// Bool indicating whether mixer client should be disabled.
	// Default: False
	MixerDisabled *bool `protobuf:"varint,13,opt,name=mixer_disabled,json=mixerDisabled,proto3,oneof" json:"mixer_disabled,omitempty"`
}

func (x *RuntimeSoftwareConfig) Reset() {
	*x = RuntimeSoftwareConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeSoftwareConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeSoftwareConfig) ProtoMessage() {}

func (x *RuntimeSoftwareConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeSoftwareConfig.ProtoReflect.Descriptor instead.
func (*RuntimeSoftwareConfig) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{9}
}

func (x *RuntimeSoftwareConfig) GetNotebookUpgradeSchedule() string {
	if x != nil {
		return x.NotebookUpgradeSchedule
	}
	return ""
}

func (x *RuntimeSoftwareConfig) GetEnableHealthMonitoring() bool {
	if x != nil && x.EnableHealthMonitoring != nil {
		return *x.EnableHealthMonitoring
	}
	return false
}

func (x *RuntimeSoftwareConfig) GetIdleShutdown() bool {
	if x != nil && x.IdleShutdown != nil {
		return *x.IdleShutdown
	}
	return false
}

func (x *RuntimeSoftwareConfig) GetIdleShutdownTimeout() int32 {
	if x != nil {
		return x.IdleShutdownTimeout
	}
	return 0
}

func (x *RuntimeSoftwareConfig) GetInstallGpuDriver() bool {
	if x != nil {
		return x.InstallGpuDriver
	}
	return false
}

func (x *RuntimeSoftwareConfig) GetCustomGpuDriverPath() string {
	if x != nil {
		return x.CustomGpuDriverPath
	}
	return ""
}

func (x *RuntimeSoftwareConfig) GetPostStartupScript() string {
	if x != nil {
		return x.PostStartupScript
	}
	return ""
}

func (x *RuntimeSoftwareConfig) GetKernels() []*ContainerImage {
	if x != nil {
		return x.Kernels
	}
	return nil
}

func (x *RuntimeSoftwareConfig) GetUpgradeable() bool {
	if x != nil && x.Upgradeable != nil {
		return *x.Upgradeable
	}
	return false
}

func (x *RuntimeSoftwareConfig) GetPostStartupScriptBehavior() RuntimeSoftwareConfig_PostStartupScriptBehavior {
	if x != nil {
		return x.PostStartupScriptBehavior
	}
	return RuntimeSoftwareConfig_POST_STARTUP_SCRIPT_BEHAVIOR_UNSPECIFIED
}

func (x *RuntimeSoftwareConfig) GetDisableTerminal() bool {
	if x != nil && x.DisableTerminal != nil {
		return *x.DisableTerminal
	}
	return false
}

func (x *RuntimeSoftwareConfig) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *RuntimeSoftwareConfig) GetMixerDisabled() bool {
	if x != nil && x.MixerDisabled != nil {
		return *x.MixerDisabled
	}
	return false
}

// Contains runtime daemon metrics, such as OS and kernels and sessions stats.
type RuntimeMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The system metrics.
	SystemMetrics map[string]string `protobuf:"bytes,1,rep,name=system_metrics,json=systemMetrics,proto3" json:"system_metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RuntimeMetrics) Reset() {
	*x = RuntimeMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeMetrics) ProtoMessage() {}

func (x *RuntimeMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeMetrics.ProtoReflect.Descriptor instead.
func (*RuntimeMetrics) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{10}
}

func (x *RuntimeMetrics) GetSystemMetrics() map[string]string {
	if x != nil {
		return x.SystemMetrics
	}
	return nil
}

// A set of Shielded Instance options.
// See [Images using supported Shielded VM
// features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm).
// Not all combinations are valid.
type RuntimeShieldedInstanceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines whether the instance has Secure Boot enabled.
	//
	// Secure Boot helps ensure that the system only runs authentic software by
	// verifying the digital signature of all boot components, and halting the
	// boot process if signature verification fails. Disabled by default.
	EnableSecureBoot bool `protobuf:"varint,1,opt,name=enable_secure_boot,json=enableSecureBoot,proto3" json:"enable_secure_boot,omitempty"`
	// Defines whether the instance has the vTPM enabled. Enabled by default.
	EnableVtpm bool `protobuf:"varint,2,opt,name=enable_vtpm,json=enableVtpm,proto3" json:"enable_vtpm,omitempty"`
	// Defines whether the instance has integrity monitoring enabled.
	//
	// Enables monitoring and attestation of the boot integrity of the instance.
	// The attestation is performed against the integrity policy baseline. This
	// baseline is initially derived from the implicitly trusted boot image when
	// the instance is created. Enabled by default.
	EnableIntegrityMonitoring bool `protobuf:"varint,3,opt,name=enable_integrity_monitoring,json=enableIntegrityMonitoring,proto3" json:"enable_integrity_monitoring,omitempty"`
}

func (x *RuntimeShieldedInstanceConfig) Reset() {
	*x = RuntimeShieldedInstanceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeShieldedInstanceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeShieldedInstanceConfig) ProtoMessage() {}

func (x *RuntimeShieldedInstanceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeShieldedInstanceConfig.ProtoReflect.Descriptor instead.
func (*RuntimeShieldedInstanceConfig) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{11}
}

func (x *RuntimeShieldedInstanceConfig) GetEnableSecureBoot() bool {
	if x != nil {
		return x.EnableSecureBoot
	}
	return false
}

func (x *RuntimeShieldedInstanceConfig) GetEnableVtpm() bool {
	if x != nil {
		return x.EnableVtpm
	}
	return false
}

func (x *RuntimeShieldedInstanceConfig) GetEnableIntegrityMonitoring() bool {
	if x != nil {
		return x.EnableIntegrityMonitoring
	}
	return false
}

// Runtime using Virtual Machine for computing.
type VirtualMachine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The user-friendly name of the Managed Compute Engine instance.
	InstanceName string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	// Output only. The unique identifier of the Managed Compute Engine instance.
	InstanceId string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// Virtual Machine configuration settings.
	VirtualMachineConfig *VirtualMachineConfig `protobuf:"bytes,3,opt,name=virtual_machine_config,json=virtualMachineConfig,proto3" json:"virtual_machine_config,omitempty"`
}

func (x *VirtualMachine) Reset() {
	*x = VirtualMachine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachine) ProtoMessage() {}

func (x *VirtualMachine) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachine.ProtoReflect.Descriptor instead.
func (*VirtualMachine) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{12}
}

func (x *VirtualMachine) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *VirtualMachine) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *VirtualMachine) GetVirtualMachineConfig() *VirtualMachineConfig {
	if x != nil {
		return x.VirtualMachineConfig
	}
	return nil
}

// The config settings for virtual machine.
type VirtualMachineConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The zone where the virtual machine is located.
	// If using regional request, the notebooks service will pick a location
	// in the corresponding runtime region.
	// On a get request, zone will always be present. Example:
	// * `us-central1-b`
	Zone string `protobuf:"bytes,1,opt,name=zone,proto3" json:"zone,omitempty"`
	// Required. The Compute Engine machine type used for runtimes.
	// Short name is valid. Examples:
	// * `n1-standard-2`
	// * `e2-standard-8`
	MachineType string `protobuf:"bytes,2,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	// Optional. Use a list of container images to use as Kernels in the notebook
	// instance.
	ContainerImages []*ContainerImage `protobuf:"bytes,3,rep,name=container_images,json=containerImages,proto3" json:"container_images,omitempty"`
	// Required. Data disk option configuration settings.
	DataDisk *LocalDisk `protobuf:"bytes,4,opt,name=data_disk,json=dataDisk,proto3" json:"data_disk,omitempty"`
	// Optional. Encryption settings for virtual machine data disk.
	EncryptionConfig *EncryptionConfig `protobuf:"bytes,5,opt,name=encryption_config,json=encryptionConfig,proto3" json:"encryption_config,omitempty"`
	// Optional. Shielded VM Instance configuration settings.
	ShieldedInstanceConfig *RuntimeShieldedInstanceConfig `protobuf:"bytes,6,opt,name=shielded_instance_config,json=shieldedInstanceConfig,proto3" json:"shielded_instance_config,omitempty"`
	// Optional. The Compute Engine accelerator configuration for this runtime.
	AcceleratorConfig *RuntimeAcceleratorConfig `protobuf:"bytes,7,opt,name=accelerator_config,json=acceleratorConfig,proto3" json:"accelerator_config,omitempty"`
	// Optional. The Compute Engine network to be used for machine
	// communications. Cannot be specified with subnetwork. If neither
	// `network` nor `subnet` is specified, the "default" network of
	// the project is used, if it exists.
	//
	// A full URL or partial URI. Examples:
	//
	// * `https://www.googleapis.com/compute/v1/projects/[project_id]/global/networks/default`
	// * `projects/[project_id]/global/networks/default`
	//
	// Runtimes are managed resources inside Google Infrastructure.
	// Runtimes support the following network configurations:
	//
	// * Google Managed Network (Network & subnet are empty)
	// * Consumer Project VPC (network & subnet are required). Requires
	// configuring Private Service Access.
	// * Shared VPC (network & subnet are required). Requires configuring Private
	// Service Access.
	Network string `protobuf:"bytes,8,opt,name=network,proto3" json:"network,omitempty"`
	// Optional. The Compute Engine subnetwork to be used for machine
	// communications. Cannot be specified with network.
	//
	// A full URL or partial URI are valid. Examples:
	//
	// * `https://www.googleapis.com/compute/v1/projects/[project_id]/regions/us-east1/subnetworks/sub0`
	// * `projects/[project_id]/regions/us-east1/subnetworks/sub0`
	Subnet string `protobuf:"bytes,9,opt,name=subnet,proto3" json:"subnet,omitempty"`
	// Optional. If true, runtime will only have internal IP
	// addresses. By default, runtimes are not restricted to internal IP
	// addresses, and will have ephemeral external IP addresses assigned to each
	// vm. This `internal_ip_only` restriction can only be enabled for
	// subnetwork enabled networks, and all dependencies must be
	// configured to be accessible without external IP addresses.
	InternalIpOnly bool `protobuf:"varint,10,opt,name=internal_ip_only,json=internalIpOnly,proto3" json:"internal_ip_only,omitempty"`
	// Optional. The Compute Engine tags to add to runtime (see [Tagging
	// instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
	Tags []string `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty"`
	// Output only. The Compute Engine guest attributes. (see
	// [Project and instance
	// guest
	// attributes](https://cloud.google.com/compute/docs/storing-retrieving-metadata#guest_attributes)).
	GuestAttributes map[string]string `protobuf:"bytes,14,rep,name=guest_attributes,json=guestAttributes,proto3" json:"guest_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional. The Compute Engine metadata entries to add to virtual machine.
	// (see [Project and instance
	// metadata](https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).
	Metadata map[string]string `protobuf:"bytes,15,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional. The labels to associate with this runtime.
	// Label **keys** must contain 1 to 63 characters, and must conform to
	// [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt).
	// Label **values** may be empty, but, if present, must contain 1 to 63
	// characters, and must conform to [RFC
	// 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be
	// associated with a cluster.
	Labels map[string]string `protobuf:"bytes,16,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional. The type of vNIC to be used on this interface. This may be gVNIC
	// or VirtioNet.
	NicType VirtualMachineConfig_NicType `protobuf:"varint,17,opt,name=nic_type,json=nicType,proto3,enum=google.events.cloud.notebooks.v1.VirtualMachineConfig_NicType" json:"nic_type,omitempty"`
	// Optional. Reserved IP Range name is used for VPC Peering.
	// The subnetwork allocation will use the range *name* if it's assigned.
	//
	// Example: managed-notebooks-range-c
	//
	//	PEERING_RANGE_NAME_3=managed-notebooks-range-c
	//	gcloud compute addresses create $PEERING_RANGE_NAME_3 \
	//	  --global \
	//	  --prefix-length=24 \
	//	  --description="Google Cloud Managed Notebooks Range 24 c" \
	//	  --network=$NETWORK \
	//	  --addresses=192.168.0.0 \
	//	  --purpose=VPC_PEERING
	//
	// Field value will be: `managed-notebooks-range-c`
	ReservedIpRange string `protobuf:"bytes,18,opt,name=reserved_ip_range,json=reservedIpRange,proto3" json:"reserved_ip_range,omitempty"`
	// Optional. Boot image metadata used for runtime upgradeability.
	BootImage *VirtualMachineConfig_BootImage `protobuf:"bytes,19,opt,name=boot_image,json=bootImage,proto3" json:"boot_image,omitempty"`
}

func (x *VirtualMachineConfig) Reset() {
	*x = VirtualMachineConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineConfig) ProtoMessage() {}

func (x *VirtualMachineConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineConfig.ProtoReflect.Descriptor instead.
func (*VirtualMachineConfig) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{13}
}

func (x *VirtualMachineConfig) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *VirtualMachineConfig) GetMachineType() string {
	if x != nil {
		return x.MachineType
	}
	return ""
}

func (x *VirtualMachineConfig) GetContainerImages() []*ContainerImage {
	if x != nil {
		return x.ContainerImages
	}
	return nil
}

func (x *VirtualMachineConfig) GetDataDisk() *LocalDisk {
	if x != nil {
		return x.DataDisk
	}
	return nil
}

func (x *VirtualMachineConfig) GetEncryptionConfig() *EncryptionConfig {
	if x != nil {
		return x.EncryptionConfig
	}
	return nil
}

func (x *VirtualMachineConfig) GetShieldedInstanceConfig() *RuntimeShieldedInstanceConfig {
	if x != nil {
		return x.ShieldedInstanceConfig
	}
	return nil
}

func (x *VirtualMachineConfig) GetAcceleratorConfig() *RuntimeAcceleratorConfig {
	if x != nil {
		return x.AcceleratorConfig
	}
	return nil
}

func (x *VirtualMachineConfig) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *VirtualMachineConfig) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *VirtualMachineConfig) GetInternalIpOnly() bool {
	if x != nil {
		return x.InternalIpOnly
	}
	return false
}

func (x *VirtualMachineConfig) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *VirtualMachineConfig) GetGuestAttributes() map[string]string {
	if x != nil {
		return x.GuestAttributes
	}
	return nil
}

func (x *VirtualMachineConfig) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *VirtualMachineConfig) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *VirtualMachineConfig) GetNicType() VirtualMachineConfig_NicType {
	if x != nil {
		return x.NicType
	}
	return VirtualMachineConfig_UNSPECIFIED_NIC_TYPE
}

func (x *VirtualMachineConfig) GetReservedIpRange() string {
	if x != nil {
		return x.ReservedIpRange
	}
	return ""
}

func (x *VirtualMachineConfig) GetBootImage() *VirtualMachineConfig_BootImage {
	if x != nil {
		return x.BootImage
	}
	return nil
}

// The description a notebook execution workload.
type ExecutionTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Scale tier of the hardware used for notebook execution.
	// DEPRECATED Will be discontinued. As right now only CUSTOM is supported.
	ScaleTier ExecutionTemplate_ScaleTier `protobuf:"varint,1,opt,name=scale_tier,json=scaleTier,proto3,enum=google.events.cloud.notebooks.v1.ExecutionTemplate_ScaleTier" json:"scale_tier,omitempty"`
	// Specifies the type of virtual machine to use for your training
	// job's master worker. You must specify this field when `scaleTier` is set to
	// `CUSTOM`.
	//
	// You can use certain Compute Engine machine types directly in this field.
	// The following types are supported:
	//
	// - `n1-standard-4`
	// - `n1-standard-8`
	// - `n1-standard-16`
	// - `n1-standard-32`
	// - `n1-standard-64`
	// - `n1-standard-96`
	// - `n1-highmem-2`
	// - `n1-highmem-4`
	// - `n1-highmem-8`
	// - `n1-highmem-16`
	// - `n1-highmem-32`
	// - `n1-highmem-64`
	// - `n1-highmem-96`
	// - `n1-highcpu-16`
	// - `n1-highcpu-32`
	// - `n1-highcpu-64`
	// - `n1-highcpu-96`
	//
	// Alternatively, you can use the following legacy machine types:
	//
	// - `standard`
	// - `large_model`
	// - `complex_model_s`
	// - `complex_model_m`
	// - `complex_model_l`
	// - `standard_gpu`
	// - `complex_model_m_gpu`
	// - `complex_model_l_gpu`
	// - `standard_p100`
	// - `complex_model_m_p100`
	// - `standard_v100`
	// - `large_model_v100`
	// - `complex_model_m_v100`
	// - `complex_model_l_v100`
	//
	// Finally, if you want to use a TPU for training, specify `cloud_tpu` in this
	// field. Learn more about the [special configuration options for training
	// with
	// TPU](https://cloud.google.com/ai-platform/training/docs/using-tpus#configuring_a_custom_tpu_machine).
	MasterType string `protobuf:"bytes,2,opt,name=master_type,json=masterType,proto3" json:"master_type,omitempty"`
	// Configuration (count and accelerator type) for hardware running notebook
	// execution.
	AcceleratorConfig *ExecutionTemplate_SchedulerAcceleratorConfig `protobuf:"bytes,3,opt,name=accelerator_config,json=acceleratorConfig,proto3" json:"accelerator_config,omitempty"`
	// Labels for execution.
	// If execution is scheduled, a field included will be 'nbs-scheduled'.
	// Otherwise, it is an immediate execution, and an included field will be
	// 'nbs-immediate'. Use fields to efficiently index between various types of
	// executions.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Path to the notebook file to execute.
	// Must be in a Google Cloud Storage bucket.
	// Format: `gs://{bucket_name}/{folder}/{notebook_file_name}`
	// Ex: `gs://notebook_user/scheduled_notebooks/sentiment_notebook.ipynb`
	InputNotebookFile string `protobuf:"bytes,5,opt,name=input_notebook_file,json=inputNotebookFile,proto3" json:"input_notebook_file,omitempty"`
	// Container Image URI to a DLVM
	// Example: 'gcr.io/deeplearning-platform-release/base-cu100'
	// More examples can be found at:
	// https://cloud.google.com/ai-platform/deep-learning-containers/docs/choosing-container
	ContainerImageUri string `protobuf:"bytes,6,opt,name=container_image_uri,json=containerImageUri,proto3" json:"container_image_uri,omitempty"`
	// Path to the notebook folder to write to.
	// Must be in a Google Cloud Storage bucket path.
	// Format: `gs://{bucket_name}/{folder}`
	// Ex: `gs://notebook_user/scheduled_notebooks`
	OutputNotebookFolder string `protobuf:"bytes,7,opt,name=output_notebook_folder,json=outputNotebookFolder,proto3" json:"output_notebook_folder,omitempty"`
	// Parameters to be overridden in the notebook during execution.
	// Ref https://papermill.readthedocs.io/en/latest/usage-parameterize.html on
	// how to specifying parameters in the input notebook and pass them here
	// in an YAML file.
	// Ex: `gs://notebook_user/scheduled_notebooks/sentiment_notebook_params.yaml`
	ParamsYamlFile string `protobuf:"bytes,8,opt,name=params_yaml_file,json=paramsYamlFile,proto3" json:"params_yaml_file,omitempty"`
	// Parameters used within the 'input_notebook_file' notebook.
	Parameters string `protobuf:"bytes,9,opt,name=parameters,proto3" json:"parameters,omitempty"`
	// The email address of a service account to use when running the execution.
	// You must have the `iam.serviceAccounts.actAs` permission for the specified
	// service account.
	ServiceAccount string `protobuf:"bytes,10,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// The type of Job to be used on this execution.
	JobType ExecutionTemplate_JobType `protobuf:"varint,11,opt,name=job_type,json=jobType,proto3,enum=google.events.cloud.notebooks.v1.ExecutionTemplate_JobType" json:"job_type,omitempty"`
	// Parameters for an execution type.
	// NOTE: There are currently no extra parameters for VertexAI jobs.
	//
	// Types that are assignable to JobParameters:
	//
	//	*ExecutionTemplate_DataprocParameters_
	//	*ExecutionTemplate_VertexAiParameters
	JobParameters isExecutionTemplate_JobParameters `protobuf_oneof:"job_parameters"`
	// Name of the kernel spec to use. This must be specified if the
	// kernel spec name on the execution target does not match the name in the
	// input notebook file.
	KernelSpec string `protobuf:"bytes,14,opt,name=kernel_spec,json=kernelSpec,proto3" json:"kernel_spec,omitempty"`
	// The name of a Vertex AI [Tensorboard] resource to which this execution
	// will upload Tensorboard logs.
	// Format:
	// `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
	Tensorboard string `protobuf:"bytes,15,opt,name=tensorboard,proto3" json:"tensorboard,omitempty"`
}

func (x *ExecutionTemplate) Reset() {
	*x = ExecutionTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionTemplate) ProtoMessage() {}

func (x *ExecutionTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionTemplate.ProtoReflect.Descriptor instead.
func (*ExecutionTemplate) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{14}
}

func (x *ExecutionTemplate) GetScaleTier() ExecutionTemplate_ScaleTier {
	if x != nil {
		return x.ScaleTier
	}
	return ExecutionTemplate_SCALE_TIER_UNSPECIFIED
}

func (x *ExecutionTemplate) GetMasterType() string {
	if x != nil {
		return x.MasterType
	}
	return ""
}

func (x *ExecutionTemplate) GetAcceleratorConfig() *ExecutionTemplate_SchedulerAcceleratorConfig {
	if x != nil {
		return x.AcceleratorConfig
	}
	return nil
}

func (x *ExecutionTemplate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ExecutionTemplate) GetInputNotebookFile() string {
	if x != nil {
		return x.InputNotebookFile
	}
	return ""
}

func (x *ExecutionTemplate) GetContainerImageUri() string {
	if x != nil {
		return x.ContainerImageUri
	}
	return ""
}

func (x *ExecutionTemplate) GetOutputNotebookFolder() string {
	if x != nil {
		return x.OutputNotebookFolder
	}
	return ""
}

func (x *ExecutionTemplate) GetParamsYamlFile() string {
	if x != nil {
		return x.ParamsYamlFile
	}
	return ""
}

func (x *ExecutionTemplate) GetParameters() string {
	if x != nil {
		return x.Parameters
	}
	return ""
}

func (x *ExecutionTemplate) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *ExecutionTemplate) GetJobType() ExecutionTemplate_JobType {
	if x != nil {
		return x.JobType
	}
	return ExecutionTemplate_JOB_TYPE_UNSPECIFIED
}

func (m *ExecutionTemplate) GetJobParameters() isExecutionTemplate_JobParameters {
	if m != nil {
		return m.JobParameters
	}
	return nil
}

func (x *ExecutionTemplate) GetDataprocParameters() *ExecutionTemplate_DataprocParameters {
	if x, ok := x.GetJobParameters().(*ExecutionTemplate_DataprocParameters_); ok {
		return x.DataprocParameters
	}
	return nil
}

func (x *ExecutionTemplate) GetVertexAiParameters() *ExecutionTemplate_VertexAIParameters {
	if x, ok := x.GetJobParameters().(*ExecutionTemplate_VertexAiParameters); ok {
		return x.VertexAiParameters
	}
	return nil
}

func (x *ExecutionTemplate) GetKernelSpec() string {
	if x != nil {
		return x.KernelSpec
	}
	return ""
}

func (x *ExecutionTemplate) GetTensorboard() string {
	if x != nil {
		return x.Tensorboard
	}
	return ""
}

type isExecutionTemplate_JobParameters interface {
	isExecutionTemplate_JobParameters()
}

type ExecutionTemplate_DataprocParameters_ struct {
	// Parameters used in Dataproc JobType executions.
	DataprocParameters *ExecutionTemplate_DataprocParameters `protobuf:"bytes,12,opt,name=dataproc_parameters,json=dataprocParameters,proto3,oneof"`
}

type ExecutionTemplate_VertexAiParameters struct {
	// Parameters used in Vertex AI JobType executions.
	VertexAiParameters *ExecutionTemplate_VertexAIParameters `protobuf:"bytes,13,opt,name=vertex_ai_parameters,json=vertexAiParameters,proto3,oneof"`
}

func (*ExecutionTemplate_DataprocParameters_) isExecutionTemplate_JobParameters() {}

func (*ExecutionTemplate_VertexAiParameters) isExecutionTemplate_JobParameters() {}

// The definition of a single executed notebook.
type Execution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// execute metadata including name, hardware spec, region, labels, etc.
	ExecutionTemplate *ExecutionTemplate `protobuf:"bytes,1,opt,name=execution_template,json=executionTemplate,proto3" json:"execution_template,omitempty"`
	// Output only. The resource name of the execute. Format:
	// `projects/{project_id}/locations/{location}/executions/{execution_id}`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Name used for UI purposes.
	// Name can only contain alphanumeric characters and underscores '_'.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// A brief description of this execution.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. Time the Execution was instantiated.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Time the Execution was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. State of the underlying AI Platform job.
	State Execution_State `protobuf:"varint,7,opt,name=state,proto3,enum=google.events.cloud.notebooks.v1.Execution_State" json:"state,omitempty"`
	// Output notebook file generated by this execution
	OutputNotebookFile string `protobuf:"bytes,8,opt,name=output_notebook_file,json=outputNotebookFile,proto3" json:"output_notebook_file,omitempty"`
	// Output only. The URI of the external job used to execute the notebook.
	JobUri string `protobuf:"bytes,9,opt,name=job_uri,json=jobUri,proto3" json:"job_uri,omitempty"`
}

func (x *Execution) Reset() {
	*x = Execution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Execution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Execution) ProtoMessage() {}

func (x *Execution) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Execution.ProtoReflect.Descriptor instead.
func (*Execution) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{15}
}

func (x *Execution) GetExecutionTemplate() *ExecutionTemplate {
	if x != nil {
		return x.ExecutionTemplate
	}
	return nil
}

func (x *Execution) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Execution) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Execution) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Execution) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Execution) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Execution) GetState() Execution_State {
	if x != nil {
		return x.State
	}
	return Execution_STATE_UNSPECIFIED
}

func (x *Execution) GetOutputNotebookFile() string {
	if x != nil {
		return x.OutputNotebookFile
	}
	return ""
}

func (x *Execution) GetJobUri() string {
	if x != nil {
		return x.JobUri
	}
	return ""
}

// Reservation Affinity for consuming Zonal reservation.
type ReservationAffinity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Type of reservation to consume
	ConsumeReservationType ReservationAffinity_Type `protobuf:"varint,1,opt,name=consume_reservation_type,json=consumeReservationType,proto3,enum=google.events.cloud.notebooks.v1.ReservationAffinity_Type" json:"consume_reservation_type,omitempty"`
	// Optional. Corresponds to the label key of reservation resource.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Optional. Corresponds to the label values of reservation resource.
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ReservationAffinity) Reset() {
	*x = ReservationAffinity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReservationAffinity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReservationAffinity) ProtoMessage() {}

func (x *ReservationAffinity) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReservationAffinity.ProtoReflect.Descriptor instead.
func (*ReservationAffinity) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{16}
}

func (x *ReservationAffinity) GetConsumeReservationType() ReservationAffinity_Type {
	if x != nil {
		return x.ConsumeReservationType
	}
	return ReservationAffinity_TYPE_UNSPECIFIED
}

func (x *ReservationAffinity) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ReservationAffinity) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// The definition of a notebook instance.
type Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The name of this notebook instance. Format:
	// `projects/{project_id}/locations/{location}/instances/{instance_id}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type of the environment; can be one of VM image, or container image.
	//
	// Types that are assignable to Environment:
	//
	//	*Instance_VmImage
	//	*Instance_ContainerImage
	Environment isInstance_Environment `protobuf_oneof:"environment"`
	// Path to a Bash script that automatically runs after a notebook instance
	// fully boots up. The path must be a URL or
	// Cloud Storage path (`gs://path-to-file/file-name`).
	PostStartupScript string `protobuf:"bytes,4,opt,name=post_startup_script,json=postStartupScript,proto3" json:"post_startup_script,omitempty"`
	// Output only. The proxy endpoint that is used to access the Jupyter
	// notebook.
	ProxyUri string `protobuf:"bytes,5,opt,name=proxy_uri,json=proxyUri,proto3" json:"proxy_uri,omitempty"`
	// The service account on this instance, giving access to other Google
	// Cloud services.
	// You can use any service account within the same project, but you
	// must have the service account user permission to use the instance.
	//
	// If not specified, the [Compute Engine default service
	// account](https://cloud.google.com/compute/docs/access/service-accounts#default_service_account)
	// is used.
	ServiceAccount string `protobuf:"bytes,7,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// Optional. The URIs of service account scopes to be included in
	// Compute Engine instances.
	//
	// If not specified, the following
	// [scopes](https://cloud.google.com/compute/docs/access/service-accounts#accesscopesiam)
	// are defined:
	//   - https://www.googleapis.com/auth/cloud-platform
	//   - https://www.googleapis.com/auth/userinfo.email
	//
	// If not using default scopes, you need at least:
	//
	//	https://www.googleapis.com/auth/compute
	ServiceAccountScopes []string `protobuf:"bytes,31,rep,name=service_account_scopes,json=serviceAccountScopes,proto3" json:"service_account_scopes,omitempty"`
	// Required. The [Compute Engine machine
	// type](https://cloud.google.com/compute/docs/machine-types) of this
	// instance.
	MachineType string `protobuf:"bytes,8,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	// The hardware accelerator used on this instance. If you use
	// accelerators, make sure that your configuration has
	// [enough vCPUs and memory to support the `machine_type` you have
	// selected](https://cloud.google.com/compute/docs/gpus/#gpus-list).
	AcceleratorConfig *Instance_AcceleratorConfig `protobuf:"bytes,9,opt,name=accelerator_config,json=acceleratorConfig,proto3" json:"accelerator_config,omitempty"`
	// Output only. The state of this instance.
	State Instance_State `protobuf:"varint,10,opt,name=state,proto3,enum=google.events.cloud.notebooks.v1.Instance_State" json:"state,omitempty"`
	// Whether the end user authorizes Google Cloud to install GPU driver
	// on this instance.
	// If this field is empty or set to false, the GPU driver won't be installed.
	// Only applicable to instances with GPUs.
	InstallGpuDriver bool `protobuf:"varint,11,opt,name=install_gpu_driver,json=installGpuDriver,proto3" json:"install_gpu_driver,omitempty"`
	// Specify a custom Cloud Storage path where the GPU driver is stored.
	// If not specified, we'll automatically choose from official GPU drivers.
	CustomGpuDriverPath string `protobuf:"bytes,12,opt,name=custom_gpu_driver_path,json=customGpuDriverPath,proto3" json:"custom_gpu_driver_path,omitempty"`
	// Output only. Attached disks to notebook instance.
	Disks []*Instance_Disk `protobuf:"bytes,28,rep,name=disks,proto3" json:"disks,omitempty"`
	// Optional. Shielded VM configuration.
	// [Images using supported Shielded VM
	// features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm).
	ShieldedInstanceConfig *Instance_ShieldedInstanceConfig `protobuf:"bytes,30,opt,name=shielded_instance_config,json=shieldedInstanceConfig,proto3" json:"shielded_instance_config,omitempty"`
	// If true, no external IP will be assigned to this instance.
	NoPublicIp bool `protobuf:"varint,17,opt,name=no_public_ip,json=noPublicIp,proto3" json:"no_public_ip,omitempty"`
	// If true, the notebook instance will not register with the proxy.
	NoProxyAccess bool `protobuf:"varint,18,opt,name=no_proxy_access,json=noProxyAccess,proto3" json:"no_proxy_access,omitempty"`
	// The name of the VPC that this instance is in.
	// Format:
	// `projects/{project_id}/global/networks/{network_id}`
	Network string `protobuf:"bytes,19,opt,name=network,proto3" json:"network,omitempty"`
	// The name of the subnet that this instance is in.
	// Format:
	// `projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}`
	Subnet string `protobuf:"bytes,20,opt,name=subnet,proto3" json:"subnet,omitempty"`
	// Labels to apply to this instance.
	// These can be later modified by the setLabels method.
	Labels map[string]string `protobuf:"bytes,21,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Custom metadata to apply to this instance.
	Metadata map[string]string `protobuf:"bytes,22,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional. The Compute Engine tags to add to runtime (see [Tagging
	// instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
	Tags []string `protobuf:"bytes,32,rep,name=tags,proto3" json:"tags,omitempty"`
	// The upgrade history of this instance.
	UpgradeHistory []*Instance_UpgradeHistoryEntry `protobuf:"bytes,29,rep,name=upgrade_history,json=upgradeHistory,proto3" json:"upgrade_history,omitempty"`
	// Optional. The type of vNIC to be used on this interface. This may be gVNIC
	// or VirtioNet.
	NicType Instance_NicType `protobuf:"varint,33,opt,name=nic_type,json=nicType,proto3,enum=google.events.cloud.notebooks.v1.Instance_NicType" json:"nic_type,omitempty"`
	// Optional. The optional reservation affinity. Setting this field will apply
	// the specified [Zonal Compute
	// Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources)
	// to this notebook instance.
	ReservationAffinity *ReservationAffinity `protobuf:"bytes,34,opt,name=reservation_affinity,json=reservationAffinity,proto3" json:"reservation_affinity,omitempty"`
	// Output only. Email address of entity that sent original CreateInstance
	// request.
	Creator string `protobuf:"bytes,36,opt,name=creator,proto3" json:"creator,omitempty"`
	// Optional. Flag to enable ip forwarding or not, default false/off.
	// https://cloud.google.com/vpc/docs/using-routes#canipforward
	CanIpForward bool `protobuf:"varint,39,opt,name=can_ip_forward,json=canIpForward,proto3" json:"can_ip_forward,omitempty"`
	// Output only. Instance creation time.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Instance update time.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *Instance) Reset() {
	*x = Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instance) ProtoMessage() {}

func (x *Instance) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instance.ProtoReflect.Descriptor instead.
func (*Instance) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{17}
}

func (x *Instance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *Instance) GetEnvironment() isInstance_Environment {
	if m != nil {
		return m.Environment
	}
	return nil
}

func (x *Instance) GetVmImage() *VmImage {
	if x, ok := x.GetEnvironment().(*Instance_VmImage); ok {
		return x.VmImage
	}
	return nil
}

func (x *Instance) GetContainerImage() *ContainerImage {
	if x, ok := x.GetEnvironment().(*Instance_ContainerImage); ok {
		return x.ContainerImage
	}
	return nil
}

func (x *Instance) GetPostStartupScript() string {
	if x != nil {
		return x.PostStartupScript
	}
	return ""
}

func (x *Instance) GetProxyUri() string {
	if x != nil {
		return x.ProxyUri
	}
	return ""
}

func (x *Instance) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *Instance) GetServiceAccountScopes() []string {
	if x != nil {
		return x.ServiceAccountScopes
	}
	return nil
}

func (x *Instance) GetMachineType() string {
	if x != nil {
		return x.MachineType
	}
	return ""
}

func (x *Instance) GetAcceleratorConfig() *Instance_AcceleratorConfig {
	if x != nil {
		return x.AcceleratorConfig
	}
	return nil
}

func (x *Instance) GetState() Instance_State {
	if x != nil {
		return x.State
	}
	return Instance_STATE_UNSPECIFIED
}

func (x *Instance) GetInstallGpuDriver() bool {
	if x != nil {
		return x.InstallGpuDriver
	}
	return false
}

func (x *Instance) GetCustomGpuDriverPath() string {
	if x != nil {
		return x.CustomGpuDriverPath
	}
	return ""
}

func (x *Instance) GetDisks() []*Instance_Disk {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *Instance) GetShieldedInstanceConfig() *Instance_ShieldedInstanceConfig {
	if x != nil {
		return x.ShieldedInstanceConfig
	}
	return nil
}

func (x *Instance) GetNoPublicIp() bool {
	if x != nil {
		return x.NoPublicIp
	}
	return false
}

func (x *Instance) GetNoProxyAccess() bool {
	if x != nil {
		return x.NoProxyAccess
	}
	return false
}

func (x *Instance) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Instance) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *Instance) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Instance) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Instance) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Instance) GetUpgradeHistory() []*Instance_UpgradeHistoryEntry {
	if x != nil {
		return x.UpgradeHistory
	}
	return nil
}

func (x *Instance) GetNicType() Instance_NicType {
	if x != nil {
		return x.NicType
	}
	return Instance_UNSPECIFIED_NIC_TYPE
}

func (x *Instance) GetReservationAffinity() *ReservationAffinity {
	if x != nil {
		return x.ReservationAffinity
	}
	return nil
}

func (x *Instance) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Instance) GetCanIpForward() bool {
	if x != nil {
		return x.CanIpForward
	}
	return false
}

func (x *Instance) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Instance) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type isInstance_Environment interface {
	isInstance_Environment()
}

type Instance_VmImage struct {
	// Use a Compute Engine VM image to start the notebook instance.
	VmImage *VmImage `protobuf:"bytes,2,opt,name=vm_image,json=vmImage,proto3,oneof"`
}

type Instance_ContainerImage struct {
	// Use a container image to start the notebook instance.
	ContainerImage *ContainerImage `protobuf:"bytes,3,opt,name=container_image,json=containerImage,proto3,oneof"`
}

func (*Instance_VmImage) isInstance_Environment() {}

func (*Instance_ContainerImage) isInstance_Environment() {}

// The definition of a schedule.
type Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The name of this schedule. Format:
	// `projects/{project_id}/locations/{location}/schedules/{schedule_id}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Display name used for UI purposes.
	// Name can only contain alphanumeric characters, hyphens `-`,
	// and underscores `_`.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// A brief description of this environment.
	Description string         `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	State       Schedule_State `protobuf:"varint,4,opt,name=state,proto3,enum=google.events.cloud.notebooks.v1.Schedule_State" json:"state,omitempty"`
	// Cron-tab formatted schedule by which the job will execute.
	// Format: minute, hour, day of month, month, day of week,
	// e.g. `0 0 * * WED` = every Wednesday
	// More examples: https://crontab.guru/examples.html
	CronSchedule string `protobuf:"bytes,5,opt,name=cron_schedule,json=cronSchedule,proto3" json:"cron_schedule,omitempty"`
	// Timezone on which the cron_schedule.
	// The value of this field must be a time zone name from the tz database.
	// TZ Database: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
	//
	// Note that some time zones include a provision for daylight savings time.
	// The rules for daylight saving time are determined by the chosen tz.
	// For UTC use the string "utc". If a time zone is not specified,
	// the default will be in UTC (also known as GMT).
	TimeZone string `protobuf:"bytes,6,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	// Output only. Time the schedule was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Time the schedule was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Notebook Execution Template corresponding to this schedule.
	ExecutionTemplate *ExecutionTemplate `protobuf:"bytes,9,opt,name=execution_template,json=executionTemplate,proto3" json:"execution_template,omitempty"`
	// Output only. The most recent execution names triggered from this schedule
	// and their corresponding states.
	RecentExecutions []*Execution `protobuf:"bytes,10,rep,name=recent_executions,json=recentExecutions,proto3" json:"recent_executions,omitempty"`
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{18}
}

func (x *Schedule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Schedule) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Schedule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Schedule) GetState() Schedule_State {
	if x != nil {
		return x.State
	}
	return Schedule_STATE_UNSPECIFIED
}

func (x *Schedule) GetCronSchedule() string {
	if x != nil {
		return x.CronSchedule
	}
	return ""
}

func (x *Schedule) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *Schedule) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Schedule) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Schedule) GetExecutionTemplate() *ExecutionTemplate {
	if x != nil {
		return x.ExecutionTemplate
	}
	return nil
}

func (x *Schedule) GetRecentExecutions() []*Execution {
	if x != nil {
		return x.RecentExecutions
	}
	return nil
}

// The data within all Runtime events.
type RuntimeEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The Runtime event payload. Unset for deletion events.
	Payload *Runtime `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
}

func (x *RuntimeEventData) Reset() {
	*x = RuntimeEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeEventData) ProtoMessage() {}

func (x *RuntimeEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeEventData.ProtoReflect.Descriptor instead.
func (*RuntimeEventData) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{19}
}

func (x *RuntimeEventData) GetPayload() *Runtime {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all Execution events.
type ExecutionEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The Execution event payload. Unset for deletion events.
	Payload *Execution `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
}

func (x *ExecutionEventData) Reset() {
	*x = ExecutionEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionEventData) ProtoMessage() {}

func (x *ExecutionEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionEventData.ProtoReflect.Descriptor instead.
func (*ExecutionEventData) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{20}
}

func (x *ExecutionEventData) GetPayload() *Execution {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all Instance events.
type InstanceEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The Instance event payload. Unset for deletion events.
	Payload *Instance `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
}

func (x *InstanceEventData) Reset() {
	*x = InstanceEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceEventData) ProtoMessage() {}

func (x *InstanceEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceEventData.ProtoReflect.Descriptor instead.
func (*InstanceEventData) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{21}
}

func (x *InstanceEventData) GetPayload() *Instance {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all Schedule events.
type ScheduleEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The Schedule event payload. Unset for deletion events.
	Payload *Schedule `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
}

func (x *ScheduleEventData) Reset() {
	*x = ScheduleEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleEventData) ProtoMessage() {}

func (x *ScheduleEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleEventData.ProtoReflect.Descriptor instead.
func (*ScheduleEventData) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{22}
}

func (x *ScheduleEventData) GetPayload() *Schedule {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all Environment events.
type EnvironmentEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The Environment event payload. Unset for deletion events.
	Payload *Environment `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
}

func (x *EnvironmentEventData) Reset() {
	*x = EnvironmentEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentEventData) ProtoMessage() {}

func (x *EnvironmentEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentEventData.ProtoReflect.Descriptor instead.
func (*EnvironmentEventData) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{23}
}

func (x *EnvironmentEventData) GetPayload() *Environment {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Optional. A list of features to enable on the guest operating system.
// Applicable only for bootable images.
// Read [Enabling guest operating system
// features](https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images#guest-os-features)
// to see a list of available options.
// Guest OS features for boot disk.
type LocalDisk_RuntimeGuestOsFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of a supported feature. Read [Enabling guest operating system
	// features](https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images#guest-os-features)
	// to see a list of available options.
	//
	// Valid values:
	//
	// * `FEATURE_TYPE_UNSPECIFIED`
	// * `MULTI_IP_SUBNET`
	// * `SECURE_BOOT`
	// * `UEFI_COMPATIBLE`
	// * `VIRTIO_SCSI_MULTIQUEUE`
	// * `WINDOWS`
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *LocalDisk_RuntimeGuestOsFeature) Reset() {
	*x = LocalDisk_RuntimeGuestOsFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalDisk_RuntimeGuestOsFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalDisk_RuntimeGuestOsFeature) ProtoMessage() {}

func (x *LocalDisk_RuntimeGuestOsFeature) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalDisk_RuntimeGuestOsFeature.ProtoReflect.Descriptor instead.
func (*LocalDisk_RuntimeGuestOsFeature) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{6, 0}
}

func (x *LocalDisk_RuntimeGuestOsFeature) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Definition of the boot image used by the Runtime.
// Used to facilitate runtime upgradeability.
type VirtualMachineConfig_BootImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VirtualMachineConfig_BootImage) Reset() {
	*x = VirtualMachineConfig_BootImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineConfig_BootImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineConfig_BootImage) ProtoMessage() {}

func (x *VirtualMachineConfig_BootImage) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineConfig_BootImage.ProtoReflect.Descriptor instead.
func (*VirtualMachineConfig_BootImage) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{13, 0}
}

// Definition of a hardware accelerator. Note that not all combinations
// of `type` and `core_count` are valid. See [GPUs on
// Compute Engine](https://cloud.google.com/compute/docs/gpus) to find a valid
// combination. TPUs are not supported.
type ExecutionTemplate_SchedulerAcceleratorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of this accelerator.
	Type ExecutionTemplate_SchedulerAcceleratorType `protobuf:"varint,1,opt,name=type,proto3,enum=google.events.cloud.notebooks.v1.ExecutionTemplate_SchedulerAcceleratorType" json:"type,omitempty"`
	// Count of cores of this accelerator.
	CoreCount int64 `protobuf:"varint,2,opt,name=core_count,json=coreCount,proto3" json:"core_count,omitempty"`
}

func (x *ExecutionTemplate_SchedulerAcceleratorConfig) Reset() {
	*x = ExecutionTemplate_SchedulerAcceleratorConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionTemplate_SchedulerAcceleratorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionTemplate_SchedulerAcceleratorConfig) ProtoMessage() {}

func (x *ExecutionTemplate_SchedulerAcceleratorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionTemplate_SchedulerAcceleratorConfig.ProtoReflect.Descriptor instead.
func (*ExecutionTemplate_SchedulerAcceleratorConfig) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{14, 0}
}

func (x *ExecutionTemplate_SchedulerAcceleratorConfig) GetType() ExecutionTemplate_SchedulerAcceleratorType {
	if x != nil {
		return x.Type
	}
	return ExecutionTemplate_SCHEDULER_ACCELERATOR_TYPE_UNSPECIFIED
}

func (x *ExecutionTemplate_SchedulerAcceleratorConfig) GetCoreCount() int64 {
	if x != nil {
		return x.CoreCount
	}
	return 0
}

// Parameters used in Dataproc JobType executions.
type ExecutionTemplate_DataprocParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URI for cluster used to run Dataproc execution.
	// Format: `projects/{PROJECT_ID}/regions/{REGION}/clusters/{CLUSTER_NAME}`
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *ExecutionTemplate_DataprocParameters) Reset() {
	*x = ExecutionTemplate_DataprocParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionTemplate_DataprocParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionTemplate_DataprocParameters) ProtoMessage() {}

func (x *ExecutionTemplate_DataprocParameters) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionTemplate_DataprocParameters.ProtoReflect.Descriptor instead.
func (*ExecutionTemplate_DataprocParameters) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{14, 1}
}

func (x *ExecutionTemplate_DataprocParameters) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

// Parameters used in Vertex AI JobType executions.
type ExecutionTemplate_VertexAIParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The full name of the Compute Engine
	// [network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks)
	// to which the Job should be peered. For example,
	// `projects/12345/global/networks/myVPC`.
	// [Format](https://cloud.google.com/compute/docs/reference/rest/v1/networks/insert)
	// is of the form `projects/{project}/global/networks/{network}`.
	// Where `{project}` is a project number, as in `12345`, and `{network}` is
	// a network name.
	//
	// Private services access must already be configured for the network. If
	// left unspecified, the job is not peered with any network.
	Network string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	// Environment variables.
	// At most 100 environment variables can be specified and unique.
	// Example: `GCP_BUCKET=gs://my-bucket/samples/`
	Env map[string]string `protobuf:"bytes,2,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExecutionTemplate_VertexAIParameters) Reset() {
	*x = ExecutionTemplate_VertexAIParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionTemplate_VertexAIParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionTemplate_VertexAIParameters) ProtoMessage() {}

func (x *ExecutionTemplate_VertexAIParameters) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionTemplate_VertexAIParameters.ProtoReflect.Descriptor instead.
func (*ExecutionTemplate_VertexAIParameters) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{14, 2}
}

func (x *ExecutionTemplate_VertexAIParameters) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ExecutionTemplate_VertexAIParameters) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

// Definition of a hardware accelerator. Note that not all combinations
// of `type` and `core_count` are valid. See [GPUs on Compute
// Engine](https://cloud.google.com/compute/docs/gpus/#gpus-list) to find a
// valid combination. TPUs are not supported.
type Instance_AcceleratorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of this accelerator.
	Type Instance_AcceleratorType `protobuf:"varint,1,opt,name=type,proto3,enum=google.events.cloud.notebooks.v1.Instance_AcceleratorType" json:"type,omitempty"`
	// Count of cores of this accelerator.
	CoreCount int64 `protobuf:"varint,2,opt,name=core_count,json=coreCount,proto3" json:"core_count,omitempty"`
}

func (x *Instance_AcceleratorConfig) Reset() {
	*x = Instance_AcceleratorConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instance_AcceleratorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instance_AcceleratorConfig) ProtoMessage() {}

func (x *Instance_AcceleratorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instance_AcceleratorConfig.ProtoReflect.Descriptor instead.
func (*Instance_AcceleratorConfig) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{17, 0}
}

func (x *Instance_AcceleratorConfig) GetType() Instance_AcceleratorType {
	if x != nil {
		return x.Type
	}
	return Instance_ACCELERATOR_TYPE_UNSPECIFIED
}

func (x *Instance_AcceleratorConfig) GetCoreCount() int64 {
	if x != nil {
		return x.CoreCount
	}
	return 0
}

// An instance-attached disk resource.
type Instance_Disk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates whether the disk will be auto-deleted when the instance is
	// deleted (but not when the disk is detached from the instance).
	AutoDelete bool `protobuf:"varint,1,opt,name=auto_delete,json=autoDelete,proto3" json:"auto_delete,omitempty"`
	// Indicates that this is a boot disk. The virtual machine will use the
	// first partition of the disk for its root filesystem.
	Boot bool `protobuf:"varint,2,opt,name=boot,proto3" json:"boot,omitempty"`
	// Indicates a unique device name of your choice that is reflected into the
	// `/dev/disk/by-id/google-*` tree of a Linux operating system running
	// within the instance. This name can be used to reference the device for
	// mounting, resizing, and so on, from within the instance.
	//
	// If not specified, the server chooses a default device name to apply to
	// this disk, in the form persistent-disk-x, where x is a number assigned by
	// Google Compute Engine.This field is only applicable for persistent disks.
	DeviceName string `protobuf:"bytes,3,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// Indicates the size of the disk in base-2 GB.
	DiskSizeGb int64 `protobuf:"varint,4,opt,name=disk_size_gb,json=diskSizeGb,proto3" json:"disk_size_gb,omitempty"`
	// Indicates a list of features to enable on the guest operating system.
	// Applicable only for bootable images. Read  Enabling guest operating
	// system features to see a list of available options.
	GuestOsFeatures []*Instance_Disk_GuestOsFeature `protobuf:"bytes,5,rep,name=guest_os_features,json=guestOsFeatures,proto3" json:"guest_os_features,omitempty"`
	// A zero-based index to this disk, where 0 is reserved for the
	// boot disk. If you have many disks attached to an instance, each disk
	// would have a unique index number.
	Index int64 `protobuf:"varint,6,opt,name=index,proto3" json:"index,omitempty"`
	// Indicates the disk interface to use for attaching this disk, which is
	// either SCSI or NVME. The default is SCSI. Persistent disks must always
	// use SCSI and the request will fail if you attempt to attach a persistent
	// disk in any other format than SCSI. Local SSDs can use either NVME or
	// SCSI. For performance characteristics of SCSI over NVMe, see Local SSD
	// performance.
	// Valid values:
	//
	// * `NVME`
	// * `SCSI`
	Interface string `protobuf:"bytes,7,opt,name=interface,proto3" json:"interface,omitempty"`
	// Type of the resource. Always compute#attachedDisk for attached
	// disks.
	Kind string `protobuf:"bytes,8,opt,name=kind,proto3" json:"kind,omitempty"`
	// A list of publicly visible licenses. Reserved for Google's use.
	// A License represents billing and aggregate usage data for public
	// and marketplace images.
	Licenses []string `protobuf:"bytes,9,rep,name=licenses,proto3" json:"licenses,omitempty"`
	// The mode in which to attach this disk, either `READ_WRITE` or
	// `READ_ONLY`. If not specified, the default is to attach the disk in
	// `READ_WRITE` mode. Valid values:
	//
	// * `READ_ONLY`
	// * `READ_WRITE`
	Mode string `protobuf:"bytes,10,opt,name=mode,proto3" json:"mode,omitempty"`
	// Indicates a valid partial or full URL to an existing Persistent Disk
	// resource.
	Source string `protobuf:"bytes,11,opt,name=source,proto3" json:"source,omitempty"`
	// Indicates the type of the disk, either `SCRATCH` or `PERSISTENT`.
	// Valid values:
	//
	// * `PERSISTENT`
	// * `SCRATCH`
	Type string `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Instance_Disk) Reset() {
	*x = Instance_Disk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instance_Disk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instance_Disk) ProtoMessage() {}

func (x *Instance_Disk) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instance_Disk.ProtoReflect.Descriptor instead.
func (*Instance_Disk) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{17, 1}
}

func (x *Instance_Disk) GetAutoDelete() bool {
	if x != nil {
		return x.AutoDelete
	}
	return false
}

func (x *Instance_Disk) GetBoot() bool {
	if x != nil {
		return x.Boot
	}
	return false
}

func (x *Instance_Disk) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *Instance_Disk) GetDiskSizeGb() int64 {
	if x != nil {
		return x.DiskSizeGb
	}
	return 0
}

func (x *Instance_Disk) GetGuestOsFeatures() []*Instance_Disk_GuestOsFeature {
	if x != nil {
		return x.GuestOsFeatures
	}
	return nil
}

func (x *Instance_Disk) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Instance_Disk) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *Instance_Disk) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Instance_Disk) GetLicenses() []string {
	if x != nil {
		return x.Licenses
	}
	return nil
}

func (x *Instance_Disk) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *Instance_Disk) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Instance_Disk) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// A set of Shielded Instance options.
// See [Images using supported Shielded VM
// features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm).
// Not all combinations are valid.
type Instance_ShieldedInstanceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines whether the instance has Secure Boot enabled.
	//
	// Secure Boot helps ensure that the system only runs authentic software by
	// verifying the digital signature of all boot components, and halting the
	// boot process if signature verification fails. Disabled by default.
	EnableSecureBoot bool `protobuf:"varint,1,opt,name=enable_secure_boot,json=enableSecureBoot,proto3" json:"enable_secure_boot,omitempty"`
	// Defines whether the instance has the vTPM enabled. Enabled by default.
	EnableVtpm bool `protobuf:"varint,2,opt,name=enable_vtpm,json=enableVtpm,proto3" json:"enable_vtpm,omitempty"`
	// Defines whether the instance has integrity monitoring enabled.
	//
	// Enables monitoring and attestation of the boot integrity of the instance.
	// The attestation is performed against the integrity policy baseline. This
	// baseline is initially derived from the implicitly trusted boot image when
	// the instance is created. Enabled by default.
	EnableIntegrityMonitoring bool `protobuf:"varint,3,opt,name=enable_integrity_monitoring,json=enableIntegrityMonitoring,proto3" json:"enable_integrity_monitoring,omitempty"`
}

func (x *Instance_ShieldedInstanceConfig) Reset() {
	*x = Instance_ShieldedInstanceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instance_ShieldedInstanceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instance_ShieldedInstanceConfig) ProtoMessage() {}

func (x *Instance_ShieldedInstanceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instance_ShieldedInstanceConfig.ProtoReflect.Descriptor instead.
func (*Instance_ShieldedInstanceConfig) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{17, 2}
}

func (x *Instance_ShieldedInstanceConfig) GetEnableSecureBoot() bool {
	if x != nil {
		return x.EnableSecureBoot
	}
	return false
}

func (x *Instance_ShieldedInstanceConfig) GetEnableVtpm() bool {
	if x != nil {
		return x.EnableVtpm
	}
	return false
}

func (x *Instance_ShieldedInstanceConfig) GetEnableIntegrityMonitoring() bool {
	if x != nil {
		return x.EnableIntegrityMonitoring
	}
	return false
}

// The entry of VM image upgrade history.
type Instance_UpgradeHistoryEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The snapshot of the boot disk of this notebook instance before upgrade.
	Snapshot string `protobuf:"bytes,1,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	// The VM image before this instance upgrade.
	VmImage string `protobuf:"bytes,2,opt,name=vm_image,json=vmImage,proto3" json:"vm_image,omitempty"`
	// The container image before this instance upgrade.
	ContainerImage string `protobuf:"bytes,3,opt,name=container_image,json=containerImage,proto3" json:"container_image,omitempty"`
	// The framework of this notebook instance.
	Framework string `protobuf:"bytes,4,opt,name=framework,proto3" json:"framework,omitempty"`
	// The version of the notebook instance before this upgrade.
	Version string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	// The state of this instance upgrade history entry.
	State Instance_UpgradeHistoryEntry_State `protobuf:"varint,6,opt,name=state,proto3,enum=google.events.cloud.notebooks.v1.Instance_UpgradeHistoryEntry_State" json:"state,omitempty"`
	// The time that this instance upgrade history entry is created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Target VM Image. Format: `ainotebooks-vm/project/image-name/name`.
	TargetImage string `protobuf:"bytes,8,opt,name=target_image,json=targetImage,proto3" json:"target_image,omitempty"`
	// Action. Rolloback or Upgrade.
	Action Instance_UpgradeHistoryEntry_Action `protobuf:"varint,9,opt,name=action,proto3,enum=google.events.cloud.notebooks.v1.Instance_UpgradeHistoryEntry_Action" json:"action,omitempty"`
	// Target VM Version, like m63.
	TargetVersion string `protobuf:"bytes,10,opt,name=target_version,json=targetVersion,proto3" json:"target_version,omitempty"`
}

func (x *Instance_UpgradeHistoryEntry) Reset() {
	*x = Instance_UpgradeHistoryEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instance_UpgradeHistoryEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instance_UpgradeHistoryEntry) ProtoMessage() {}

func (x *Instance_UpgradeHistoryEntry) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instance_UpgradeHistoryEntry.ProtoReflect.Descriptor instead.
func (*Instance_UpgradeHistoryEntry) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{17, 3}
}

func (x *Instance_UpgradeHistoryEntry) GetSnapshot() string {
	if x != nil {
		return x.Snapshot
	}
	return ""
}

func (x *Instance_UpgradeHistoryEntry) GetVmImage() string {
	if x != nil {
		return x.VmImage
	}
	return ""
}

func (x *Instance_UpgradeHistoryEntry) GetContainerImage() string {
	if x != nil {
		return x.ContainerImage
	}
	return ""
}

func (x *Instance_UpgradeHistoryEntry) GetFramework() string {
	if x != nil {
		return x.Framework
	}
	return ""
}

func (x *Instance_UpgradeHistoryEntry) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Instance_UpgradeHistoryEntry) GetState() Instance_UpgradeHistoryEntry_State {
	if x != nil {
		return x.State
	}
	return Instance_UpgradeHistoryEntry_STATE_UNSPECIFIED
}

func (x *Instance_UpgradeHistoryEntry) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Instance_UpgradeHistoryEntry) GetTargetImage() string {
	if x != nil {
		return x.TargetImage
	}
	return ""
}

func (x *Instance_UpgradeHistoryEntry) GetAction() Instance_UpgradeHistoryEntry_Action {
	if x != nil {
		return x.Action
	}
	return Instance_UpgradeHistoryEntry_ACTION_UNSPECIFIED
}

func (x *Instance_UpgradeHistoryEntry) GetTargetVersion() string {
	if x != nil {
		return x.TargetVersion
	}
	return ""
}

// Guest OS features for boot disk.
type Instance_Disk_GuestOsFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of a supported feature. Read  Enabling guest operating system
	// features to see a list of available options.
	// Valid values:
	//
	// * `FEATURE_TYPE_UNSPECIFIED`
	// * `MULTI_IP_SUBNET`
	// * `SECURE_BOOT`
	// * `UEFI_COMPATIBLE`
	// * `VIRTIO_SCSI_MULTIQUEUE`
	// * `WINDOWS`
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Instance_Disk_GuestOsFeature) Reset() {
	*x = Instance_Disk_GuestOsFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_notebooks_v1_data_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instance_Disk_GuestOsFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instance_Disk_GuestOsFeature) ProtoMessage() {}

func (x *Instance_Disk_GuestOsFeature) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_notebooks_v1_data_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instance_Disk_GuestOsFeature.ProtoReflect.Descriptor instead.
func (*Instance_Disk_GuestOsFeature) Descriptor() ([]byte, []int) {
	return file_cloud_notebooks_v1_data_proto_rawDescGZIP(), []int{17, 1, 0}
}

func (x *Instance_Disk_GuestOsFeature) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

var File_cloud_notebooks_v1_data_proto protoreflect.FileDescriptor

var file_cloud_notebooks_v1_data_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76,
	0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x86, 0x03, 0x0a, 0x0b, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x08, 0x76,
	0x6d, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x76, 0x6d, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70,
	0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70,
	0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x72, 0x0a, 0x07, 0x56,
	0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x1f, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22,
	0x42, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x74, 0x61, 0x67, 0x22, 0xc9, 0x08, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x48, 0x00,
	0x52, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x12, 0x45, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x5a, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e,
	0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x60, 0x0a,
	0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x4a, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x94, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54,
	0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x22, 0x77, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x47, 0x45, 0x4e,
	0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x42,
	0x0e, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xb9, 0x03, 0x0a, 0x18, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5e, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9d, 0x02, 0x0a, 0x0f,
	0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x1c, 0x41, 0x43, 0x43, 0x45, 0x4c, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x45, 0x53, 0x4c,
	0x41, 0x5f, 0x4b, 0x38, 0x30, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x56, 0x49, 0x44, 0x49,
	0x41, 0x5f, 0x54, 0x45, 0x53, 0x4c, 0x41, 0x5f, 0x50, 0x31, 0x30, 0x30, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x45, 0x53, 0x4c, 0x41, 0x5f, 0x56,
	0x31, 0x30, 0x30, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f,
	0x54, 0x45, 0x53, 0x4c, 0x41, 0x5f, 0x50, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x56,
	0x49, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x45, 0x53, 0x4c, 0x41, 0x5f, 0x54, 0x34, 0x10, 0x05, 0x12,
	0x15, 0x0a, 0x11, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x45, 0x53, 0x4c, 0x41, 0x5f,
	0x41, 0x31, 0x30, 0x30, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x50, 0x55, 0x5f, 0x56, 0x32,
	0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x50, 0x55, 0x5f, 0x56, 0x33, 0x10, 0x08, 0x12, 0x17,
	0x0a, 0x13, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x45, 0x53, 0x4c, 0x41, 0x5f, 0x54,
	0x34, 0x5f, 0x56, 0x57, 0x53, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x56, 0x49, 0x44, 0x49,
	0x41, 0x5f, 0x54, 0x45, 0x53, 0x4c, 0x41, 0x5f, 0x50, 0x31, 0x30, 0x30, 0x5f, 0x56, 0x57, 0x53,
	0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x45, 0x53,
	0x4c, 0x41, 0x5f, 0x50, 0x34, 0x5f, 0x56, 0x57, 0x53, 0x10, 0x0b, 0x22, 0x2b, 0x0a, 0x10, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x17, 0x0a, 0x07, 0x6b, 0x6d, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6b, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x22, 0xa1, 0x03, 0x0a, 0x09, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x75, 0x74,
	0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6d, 0x0a, 0x11,
	0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x73, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f,
	0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x44, 0x69, 0x73, 0x6b, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x4f, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0f, 0x67, 0x75, 0x65, 0x73,
	0x74, 0x4f, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a,
	0x2b, 0x0a, 0x15, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4f,
	0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xfd, 0x02, 0x0a,
	0x19, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x47, 0x62, 0x12, 0x5f, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x63, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x50, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x50, 0x44, 0x5f, 0x53, 0x53, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x50,
	0x44, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a,
	0x50, 0x44, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x45, 0x4d, 0x45, 0x10, 0x04, 0x22, 0xa1, 0x02, 0x0a,
	0x13, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x68, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x75, 0x72, 0x69,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x72, 0x69,
	0x22, 0x5e, 0x0a, 0x11, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x49,
	0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02,
	0x22, 0xfc, 0x07, 0x0a, 0x15, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x19, 0x6e, 0x6f,
	0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6e,
	0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x16, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0c,
	0x69, 0x64, 0x6c, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x15, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x69, 0x64, 0x6c, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x67,
	0x70, 0x75, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x47, 0x70, 0x75, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x70, 0x75, 0x5f,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x70, 0x75, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x4a, 0x0a, 0x07, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f,
	0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x92, 0x01, 0x0a, 0x1c, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x51, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x75, 0x70, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x52, 0x19, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x2e,
	0x0a, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x6d, 0x69, 0x78, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0d, 0x6d, 0x69, 0x78, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x19, 0x50, 0x6f,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x4f, 0x53, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x55, 0x50, 0x5f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x5f, 0x42,
	0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x55, 0x4e, 0x5f, 0x45, 0x56, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x4f,
	0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x45,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x02, 0x42, 0x1b, 0x0a, 0x19,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x64,
	0x6c, 0x65, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x6d, 0x69, 0x78, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0xbe, 0x01, 0x0a, 0x0e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x6a, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x40,
	0x0a, 0x12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xae, 0x01, 0x0a, 0x1d, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x68, 0x69, 0x65,
	0x6c, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x42, 0x6f, 0x6f, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x74, 0x70, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x74, 0x70,
	0x6d, 0x12, 0x3e, 0x0a, 0x1b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x22, 0xc4, 0x01, 0x0a, 0x0e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x16, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x14, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xd2, 0x0b, 0x0a, 0x14, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69,
	0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e,
	0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x12,
	0x5f, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x79, 0x0a, 0x18, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x68, 0x69,
	0x65, 0x6c, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x16, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x69, 0x0a, 0x12, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f,
	0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x4f, 0x6e,
	0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x76, 0x0a, 0x10, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x67,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x60,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x5a, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x59, 0x0a, 0x08,
	0x6e, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x6e, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x70, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x5f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f,
	0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x6f, 0x6f, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x1a, 0x0b, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x74, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x1a, 0x42, 0x0a, 0x14, 0x47, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3e, 0x0a,
	0x07, 0x4e, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x4e, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x49, 0x52, 0x54, 0x49, 0x4f, 0x5f, 0x4e, 0x45, 0x54,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x56, 0x4e, 0x49, 0x43, 0x10, 0x02, 0x22, 0x93, 0x0f,
	0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x5c, 0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f,
	0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x54, 0x69, 0x65, 0x72, 0x52, 0x09, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x69, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x7d, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11,
	0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x57, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4e, 0x6f,
	0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x69, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x79, 0x61, 0x6d, 0x6c, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x59, 0x61, 0x6d, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x79, 0x0a, 0x13, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e,
	0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x6f, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x48, 0x00, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x63, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x7a, 0x0a, 0x14, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x5f, 0x61, 0x69, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x41, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x12,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x41, 0x69, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x1a, 0x9d, 0x01, 0x0a, 0x1a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x60, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x72, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x2e, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x1a, 0xc9, 0x01, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x41, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x61, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x41,
	0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e, 0x76, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7b, 0x0a, 0x09,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x43, 0x41,
	0x4c, 0x45, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x31, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x55, 0x4d, 0x5f, 0x31, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x42, 0x41, 0x53, 0x49, 0x43, 0x5f, 0x47, 0x50, 0x55, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x42, 0x41, 0x53, 0x49, 0x43, 0x5f, 0x54, 0x50, 0x55, 0x10, 0x05, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x06, 0x22, 0xe3, 0x01, 0x0a, 0x18, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x4c, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x45, 0x53,
	0x4c, 0x41, 0x5f, 0x4b, 0x38, 0x30, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x56, 0x49, 0x44,
	0x49, 0x41, 0x5f, 0x54, 0x45, 0x53, 0x4c, 0x41, 0x5f, 0x50, 0x31, 0x30, 0x30, 0x10, 0x02, 0x12,
	0x15, 0x0a, 0x11, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x45, 0x53, 0x4c, 0x41, 0x5f,
	0x56, 0x31, 0x30, 0x30, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41,
	0x5f, 0x54, 0x45, 0x53, 0x4c, 0x41, 0x5f, 0x50, 0x34, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4e,
	0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x45, 0x53, 0x4c, 0x41, 0x5f, 0x54, 0x34, 0x10, 0x05,
	0x12, 0x15, 0x0a, 0x11, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x45, 0x53, 0x4c, 0x41,
	0x5f, 0x41, 0x31, 0x30, 0x30, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x50, 0x55, 0x5f, 0x56,
	0x32, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x50, 0x55, 0x5f, 0x56, 0x33, 0x10, 0x07, 0x22,
	0x40, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4a, 0x4f,
	0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x45, 0x52, 0x54, 0x45, 0x58, 0x5f, 0x41,
	0x49, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x41, 0x54, 0x41, 0x50, 0x52, 0x4f, 0x43, 0x10,
	0x02, 0x42, 0x10, 0x0a, 0x0e, 0x6a, 0x6f, 0x62, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x22, 0xf8, 0x04, 0x0a, 0x09, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x62, 0x0a, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f,
	0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x55, 0x72, 0x69, 0x22, 0x9f, 0x01, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45,
	0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x06,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12,
	0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x22, 0x96,
	0x02, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x74, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e,
	0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x5f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52,
	0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4e, 0x59, 0x5f,
	0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x22, 0xb6, 0x1e, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x76, 0x6d, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6d,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x76, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x5b, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x5f, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x6f, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x72, 0x69, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x1f, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6b, 0x0a, 0x12,
	0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e,
	0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e,
	0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x67, 0x70, 0x75,
	0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x47, 0x70, 0x75, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12,
	0x33, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x70, 0x75, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x45, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x1c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x44, 0x69, 0x73, 0x6b, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x7b, 0x0a, 0x18, 0x73,
	0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64,
	0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x16, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x6f, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x6e, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x6f, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x12, 0x4e, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x54, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x67,
	0x0a, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f,
	0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x4d, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4e, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6e,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x68, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x13, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61,
	0x6e, 0x5f, 0x69, 0x70, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x49, 0x70, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x82, 0x01, 0x0a, 0x11, 0x41,
	0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x4e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a,
	0xb4, 0x03, 0x0a, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61,
	0x75, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x62, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x47, 0x62,
	0x12, 0x6a, 0x0a, 0x11, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x73, 0x5f, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x2e, 0x47, 0x75, 0x65,
	0x73, 0x74, 0x4f, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0f, 0x67, 0x75, 0x65,
	0x73, 0x74, 0x4f, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x1a, 0x24, 0x0a, 0x0e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xa7, 0x01, 0x0a, 0x16, 0x53, 0x68, 0x69, 0x65, 0x6c,
	0x64, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x74, 0x70, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x74, 0x70, 0x6d,
	0x12, 0x3e, 0x0a, 0x1b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x1a, 0xf4, 0x04, 0x0a, 0x13, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6d, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x5a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x22, 0x3b, 0x0a, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x4f, 0x4c,
	0x4c, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x02, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x9d, 0x02, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x43, 0x45, 0x4c, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f,
	0x54, 0x45, 0x53, 0x4c, 0x41, 0x5f, 0x4b, 0x38, 0x30, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4e,
	0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x45, 0x53, 0x4c, 0x41, 0x5f, 0x50, 0x31, 0x30, 0x30,
	0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x45, 0x53,
	0x4c, 0x41, 0x5f, 0x56, 0x31, 0x30, 0x30, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x56, 0x49,
	0x44, 0x49, 0x41, 0x5f, 0x54, 0x45, 0x53, 0x4c, 0x41, 0x5f, 0x50, 0x34, 0x10, 0x04, 0x12, 0x13,
	0x0a, 0x0f, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x45, 0x53, 0x4c, 0x41, 0x5f, 0x54,
	0x34, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x45,
	0x53, 0x4c, 0x41, 0x5f, 0x41, 0x31, 0x30, 0x30, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x56,
	0x49, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x45, 0x53, 0x4c, 0x41, 0x5f, 0x54, 0x34, 0x5f, 0x56, 0x57,
	0x53, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x45,
	0x53, 0x4c, 0x41, 0x5f, 0x50, 0x31, 0x30, 0x30, 0x5f, 0x56, 0x57, 0x53, 0x10, 0x09, 0x12, 0x17,
	0x0a, 0x13, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x45, 0x53, 0x4c, 0x41, 0x5f, 0x50,
	0x34, 0x5f, 0x56, 0x57, 0x53, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x50, 0x55, 0x5f, 0x56,
	0x32, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x50, 0x55, 0x5f, 0x56, 0x33, 0x10, 0x07, 0x22,
	0xc3, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54,
	0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45,
	0x52, 0x49, 0x4e, 0x47, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e,
	0x44, 0x45, 0x44, 0x10, 0x0b, 0x22, 0x63, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x50, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x50, 0x44, 0x5f, 0x53, 0x53, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x44, 0x5f,
	0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x44,
	0x5f, 0x45, 0x58, 0x54, 0x52, 0x45, 0x4d, 0x45, 0x10, 0x04, 0x22, 0x45, 0x0a, 0x0e, 0x44, 0x69,
	0x73, 0x6b, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x1b,
	0x44, 0x49, 0x53, 0x4b, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x47, 0x4d, 0x45, 0x4b, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4d, 0x45, 0x4b, 0x10,
	0x02, 0x22, 0x3e, 0x0a, 0x07, 0x4e, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x4e, 0x49, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x49, 0x52, 0x54, 0x49, 0x4f,
	0x5f, 0x4e, 0x45, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x56, 0x4e, 0x49, 0x43, 0x10,
	0x02, 0x42, 0x0d, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x9f, 0x05, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x12, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x11, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x58,
	0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x78, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x41, 0x42,
	0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x11, 0x0a, 0x0d, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49,
	0x4e, 0x47, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x06, 0x22, 0x68, 0x0a, 0x10, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f,
	0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x6c, 0x0a, 0x12,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x4a, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x6a, 0x0a, 0x11, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x49, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x6a, 0x0a, 0x11, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x70, 0x0a, 0x14, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x42, 0x76, 0xaa, 0x02, 0x29, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x73, 0x5c, 0x56, 0x31, 0xea, 0x02, 0x24, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x4e,
	0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_notebooks_v1_data_proto_rawDescOnce sync.Once
	file_cloud_notebooks_v1_data_proto_rawDescData = file_cloud_notebooks_v1_data_proto_rawDesc
)

func file_cloud_notebooks_v1_data_proto_rawDescGZIP() []byte {
	file_cloud_notebooks_v1_data_proto_rawDescOnce.Do(func() {
		file_cloud_notebooks_v1_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_notebooks_v1_data_proto_rawDescData)
	})
	return file_cloud_notebooks_v1_data_proto_rawDescData
}

var file_cloud_notebooks_v1_data_proto_enumTypes = make([]protoimpl.EnumInfo, 20)
var file_cloud_notebooks_v1_data_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_cloud_notebooks_v1_data_proto_goTypes = []interface{}{
	(Runtime_State)(0),                                   // 0: google.events.cloud.notebooks.v1.Runtime.State
	(Runtime_HealthState)(0),                             // 1: google.events.cloud.notebooks.v1.Runtime.HealthState
	(RuntimeAcceleratorConfig_AcceleratorType)(0),        // 2: google.events.cloud.notebooks.v1.RuntimeAcceleratorConfig.AcceleratorType
	(LocalDiskInitializeParams_DiskType)(0),              // 3: google.events.cloud.notebooks.v1.LocalDiskInitializeParams.DiskType
	(RuntimeAccessConfig_RuntimeAccessType)(0),           // 4: google.events.cloud.notebooks.v1.RuntimeAccessConfig.RuntimeAccessType
	(RuntimeSoftwareConfig_PostStartupScriptBehavior)(0), // 5: google.events.cloud.notebooks.v1.RuntimeSoftwareConfig.PostStartupScriptBehavior
	(VirtualMachineConfig_NicType)(0),                    // 6: google.events.cloud.notebooks.v1.VirtualMachineConfig.NicType
	(ExecutionTemplate_ScaleTier)(0),                     // 7: google.events.cloud.notebooks.v1.ExecutionTemplate.ScaleTier
	(ExecutionTemplate_SchedulerAcceleratorType)(0),      // 8: google.events.cloud.notebooks.v1.ExecutionTemplate.SchedulerAcceleratorType
	(ExecutionTemplate_JobType)(0),                       // 9: google.events.cloud.notebooks.v1.ExecutionTemplate.JobType
	(Execution_State)(0),                                 // 10: google.events.cloud.notebooks.v1.Execution.State
	(ReservationAffinity_Type)(0),                        // 11: google.events.cloud.notebooks.v1.ReservationAffinity.Type
	(Instance_AcceleratorType)(0),                        // 12: google.events.cloud.notebooks.v1.Instance.AcceleratorType
	(Instance_State)(0),                                  // 13: google.events.cloud.notebooks.v1.Instance.State
	(Instance_DiskType)(0),                               // 14: google.events.cloud.notebooks.v1.Instance.DiskType
	(Instance_DiskEncryption)(0),                         // 15: google.events.cloud.notebooks.v1.Instance.DiskEncryption
	(Instance_NicType)(0),                                // 16: google.events.cloud.notebooks.v1.Instance.NicType
	(Instance_UpgradeHistoryEntry_State)(0),              // 17: google.events.cloud.notebooks.v1.Instance.UpgradeHistoryEntry.State
	(Instance_UpgradeHistoryEntry_Action)(0),             // 18: google.events.cloud.notebooks.v1.Instance.UpgradeHistoryEntry.Action
	(Schedule_State)(0),                                  // 19: google.events.cloud.notebooks.v1.Schedule.State
	(*Environment)(nil),                                  // 20: google.events.cloud.notebooks.v1.Environment
	(*VmImage)(nil),                                      // 21: google.events.cloud.notebooks.v1.VmImage
	(*ContainerImage)(nil),                               // 22: google.events.cloud.notebooks.v1.ContainerImage
	(*Runtime)(nil),                                      // 23: google.events.cloud.notebooks.v1.Runtime
	(*RuntimeAcceleratorConfig)(nil),                     // 24: google.events.cloud.notebooks.v1.RuntimeAcceleratorConfig
	(*EncryptionConfig)(nil),                             // 25: google.events.cloud.notebooks.v1.EncryptionConfig
	(*LocalDisk)(nil),                                    // 26: google.events.cloud.notebooks.v1.LocalDisk
	(*LocalDiskInitializeParams)(nil),                    // 27: google.events.cloud.notebooks.v1.LocalDiskInitializeParams
	(*RuntimeAccessConfig)(nil),                          // 28: google.events.cloud.notebooks.v1.RuntimeAccessConfig
	(*RuntimeSoftwareConfig)(nil),                        // 29: google.events.cloud.notebooks.v1.RuntimeSoftwareConfig
	(*RuntimeMetrics)(nil),                               // 30: google.events.cloud.notebooks.v1.RuntimeMetrics
	(*RuntimeShieldedInstanceConfig)(nil),                // 31: google.events.cloud.notebooks.v1.RuntimeShieldedInstanceConfig
	(*VirtualMachine)(nil),                               // 32: google.events.cloud.notebooks.v1.VirtualMachine
	(*VirtualMachineConfig)(nil),                         // 33: google.events.cloud.notebooks.v1.VirtualMachineConfig
	(*ExecutionTemplate)(nil),                            // 34: google.events.cloud.notebooks.v1.ExecutionTemplate
	(*Execution)(nil),                                    // 35: google.events.cloud.notebooks.v1.Execution
	(*ReservationAffinity)(nil),                          // 36: google.events.cloud.notebooks.v1.ReservationAffinity
	(*Instance)(nil),                                     // 37: google.events.cloud.notebooks.v1.Instance
	(*Schedule)(nil),                                     // 38: google.events.cloud.notebooks.v1.Schedule
	(*RuntimeEventData)(nil),                             // 39: google.events.cloud.notebooks.v1.RuntimeEventData
	(*ExecutionEventData)(nil),                           // 40: google.events.cloud.notebooks.v1.ExecutionEventData
	(*InstanceEventData)(nil),                            // 41: google.events.cloud.notebooks.v1.InstanceEventData
	(*ScheduleEventData)(nil),                            // 42: google.events.cloud.notebooks.v1.ScheduleEventData
	(*EnvironmentEventData)(nil),                         // 43: google.events.cloud.notebooks.v1.EnvironmentEventData
	nil,                                                  // 44: google.events.cloud.notebooks.v1.Runtime.LabelsEntry
	(*LocalDisk_RuntimeGuestOsFeature)(nil),              // 45: google.events.cloud.notebooks.v1.LocalDisk.RuntimeGuestOsFeature
	nil,                                                  // 46: google.events.cloud.notebooks.v1.LocalDiskInitializeParams.LabelsEntry
	nil,                                                  // 47: google.events.cloud.notebooks.v1.RuntimeMetrics.SystemMetricsEntry
	(*VirtualMachineConfig_BootImage)(nil),               // 48: google.events.cloud.notebooks.v1.VirtualMachineConfig.BootImage
	nil,                                                  // 49: google.events.cloud.notebooks.v1.VirtualMachineConfig.GuestAttributesEntry
	nil,                                                  // 50: google.events.cloud.notebooks.v1.VirtualMachineConfig.MetadataEntry
	nil,                                                  // 51: google.events.cloud.notebooks.v1.VirtualMachineConfig.LabelsEntry
	(*ExecutionTemplate_SchedulerAcceleratorConfig)(nil), // 52: google.events.cloud.notebooks.v1.ExecutionTemplate.SchedulerAcceleratorConfig
	(*ExecutionTemplate_DataprocParameters)(nil),         // 53: google.events.cloud.notebooks.v1.ExecutionTemplate.DataprocParameters
	(*ExecutionTemplate_VertexAIParameters)(nil),         // 54: google.events.cloud.notebooks.v1.ExecutionTemplate.VertexAIParameters
	nil,                                     // 55: google.events.cloud.notebooks.v1.ExecutionTemplate.LabelsEntry
	nil,                                     // 56: google.events.cloud.notebooks.v1.ExecutionTemplate.VertexAIParameters.EnvEntry
	(*Instance_AcceleratorConfig)(nil),      // 57: google.events.cloud.notebooks.v1.Instance.AcceleratorConfig
	(*Instance_Disk)(nil),                   // 58: google.events.cloud.notebooks.v1.Instance.Disk
	(*Instance_ShieldedInstanceConfig)(nil), // 59: google.events.cloud.notebooks.v1.Instance.ShieldedInstanceConfig
	(*Instance_UpgradeHistoryEntry)(nil),    // 60: google.events.cloud.notebooks.v1.Instance.UpgradeHistoryEntry
	nil,                                     // 61: google.events.cloud.notebooks.v1.Instance.LabelsEntry
	nil,                                     // 62: google.events.cloud.notebooks.v1.Instance.MetadataEntry
	(*Instance_Disk_GuestOsFeature)(nil),    // 63: google.events.cloud.notebooks.v1.Instance.Disk.GuestOsFeature
	(*timestamppb.Timestamp)(nil),           // 64: google.protobuf.Timestamp
}
var file_cloud_notebooks_v1_data_proto_depIdxs = []int32{
	21, // 0: google.events.cloud.notebooks.v1.Environment.vm_image:type_name -> google.events.cloud.notebooks.v1.VmImage
	22, // 1: google.events.cloud.notebooks.v1.Environment.container_image:type_name -> google.events.cloud.notebooks.v1.ContainerImage
	64, // 2: google.events.cloud.notebooks.v1.Environment.create_time:type_name -> google.protobuf.Timestamp
	32, // 3: google.events.cloud.notebooks.v1.Runtime.virtual_machine:type_name -> google.events.cloud.notebooks.v1.VirtualMachine
	0,  // 4: google.events.cloud.notebooks.v1.Runtime.state:type_name -> google.events.cloud.notebooks.v1.Runtime.State
	1,  // 5: google.events.cloud.notebooks.v1.Runtime.health_state:type_name -> google.events.cloud.notebooks.v1.Runtime.HealthState
	28, // 6: google.events.cloud.notebooks.v1.Runtime.access_config:type_name -> google.events.cloud.notebooks.v1.RuntimeAccessConfig
	29, // 7: google.events.cloud.notebooks.v1.Runtime.software_config:type_name -> google.events.cloud.notebooks.v1.RuntimeSoftwareConfig
	30, // 8: google.events.cloud.notebooks.v1.Runtime.metrics:type_name -> google.events.cloud.notebooks.v1.RuntimeMetrics
	64, // 9: google.events.cloud.notebooks.v1.Runtime.create_time:type_name -> google.protobuf.Timestamp
	64, // 10: google.events.cloud.notebooks.v1.Runtime.update_time:type_name -> google.protobuf.Timestamp
	44, // 11: google.events.cloud.notebooks.v1.Runtime.labels:type_name -> google.events.cloud.notebooks.v1.Runtime.LabelsEntry
	2,  // 12: google.events.cloud.notebooks.v1.RuntimeAcceleratorConfig.type:type_name -> google.events.cloud.notebooks.v1.RuntimeAcceleratorConfig.AcceleratorType
	45, // 13: google.events.cloud.notebooks.v1.LocalDisk.guest_os_features:type_name -> google.events.cloud.notebooks.v1.LocalDisk.RuntimeGuestOsFeature
	46, // 14: google.events.cloud.notebooks.v1.LocalDiskInitializeParams.labels:type_name -> google.events.cloud.notebooks.v1.LocalDiskInitializeParams.LabelsEntry
	4,  // 15: google.events.cloud.notebooks.v1.RuntimeAccessConfig.access_type:type_name -> google.events.cloud.notebooks.v1.RuntimeAccessConfig.RuntimeAccessType
	22, // 16: google.events.cloud.notebooks.v1.RuntimeSoftwareConfig.kernels:type_name -> google.events.cloud.notebooks.v1.ContainerImage
	5,  // 17: google.events.cloud.notebooks.v1.RuntimeSoftwareConfig.post_startup_script_behavior:type_name -> google.events.cloud.notebooks.v1.RuntimeSoftwareConfig.PostStartupScriptBehavior
	47, // 18: google.events.cloud.notebooks.v1.RuntimeMetrics.system_metrics:type_name -> google.events.cloud.notebooks.v1.RuntimeMetrics.SystemMetricsEntry
	33, // 19: google.events.cloud.notebooks.v1.VirtualMachine.virtual_machine_config:type_name -> google.events.cloud.notebooks.v1.VirtualMachineConfig
	22, // 20: google.events.cloud.notebooks.v1.VirtualMachineConfig.container_images:type_name -> google.events.cloud.notebooks.v1.ContainerImage
	26, // 21: google.events.cloud.notebooks.v1.VirtualMachineConfig.data_disk:type_name -> google.events.cloud.notebooks.v1.LocalDisk
	25, // 22: google.events.cloud.notebooks.v1.VirtualMachineConfig.encryption_config:type_name -> google.events.cloud.notebooks.v1.EncryptionConfig
	31, // 23: google.events.cloud.notebooks.v1.VirtualMachineConfig.shielded_instance_config:type_name -> google.events.cloud.notebooks.v1.RuntimeShieldedInstanceConfig
	24, // 24: google.events.cloud.notebooks.v1.VirtualMachineConfig.accelerator_config:type_name -> google.events.cloud.notebooks.v1.RuntimeAcceleratorConfig
	49, // 25: google.events.cloud.notebooks.v1.VirtualMachineConfig.guest_attributes:type_name -> google.events.cloud.notebooks.v1.VirtualMachineConfig.GuestAttributesEntry
	50, // 26: google.events.cloud.notebooks.v1.VirtualMachineConfig.metadata:type_name -> google.events.cloud.notebooks.v1.VirtualMachineConfig.MetadataEntry
	51, // 27: google.events.cloud.notebooks.v1.VirtualMachineConfig.labels:type_name -> google.events.cloud.notebooks.v1.VirtualMachineConfig.LabelsEntry
	6,  // 28: google.events.cloud.notebooks.v1.VirtualMachineConfig.nic_type:type_name -> google.events.cloud.notebooks.v1.VirtualMachineConfig.NicType
	48, // 29: google.events.cloud.notebooks.v1.VirtualMachineConfig.boot_image:type_name -> google.events.cloud.notebooks.v1.VirtualMachineConfig.BootImage
	7,  // 30: google.events.cloud.notebooks.v1.ExecutionTemplate.scale_tier:type_name -> google.events.cloud.notebooks.v1.ExecutionTemplate.ScaleTier
	52, // 31: google.events.cloud.notebooks.v1.ExecutionTemplate.accelerator_config:type_name -> google.events.cloud.notebooks.v1.ExecutionTemplate.SchedulerAcceleratorConfig
	55, // 32: google.events.cloud.notebooks.v1.ExecutionTemplate.labels:type_name -> google.events.cloud.notebooks.v1.ExecutionTemplate.LabelsEntry
	9,  // 33: google.events.cloud.notebooks.v1.ExecutionTemplate.job_type:type_name -> google.events.cloud.notebooks.v1.ExecutionTemplate.JobType
	53, // 34: google.events.cloud.notebooks.v1.ExecutionTemplate.dataproc_parameters:type_name -> google.events.cloud.notebooks.v1.ExecutionTemplate.DataprocParameters
	54, // 35: google.events.cloud.notebooks.v1.ExecutionTemplate.vertex_ai_parameters:type_name -> google.events.cloud.notebooks.v1.ExecutionTemplate.VertexAIParameters
	34, // 36: google.events.cloud.notebooks.v1.Execution.execution_template:type_name -> google.events.cloud.notebooks.v1.ExecutionTemplate
	64, // 37: google.events.cloud.notebooks.v1.Execution.create_time:type_name -> google.protobuf.Timestamp
	64, // 38: google.events.cloud.notebooks.v1.Execution.update_time:type_name -> google.protobuf.Timestamp
	10, // 39: google.events.cloud.notebooks.v1.Execution.state:type_name -> google.events.cloud.notebooks.v1.Execution.State
	11, // 40: google.events.cloud.notebooks.v1.ReservationAffinity.consume_reservation_type:type_name -> google.events.cloud.notebooks.v1.ReservationAffinity.Type
	21, // 41: google.events.cloud.notebooks.v1.Instance.vm_image:type_name -> google.events.cloud.notebooks.v1.VmImage
	22, // 42: google.events.cloud.notebooks.v1.Instance.container_image:type_name -> google.events.cloud.notebooks.v1.ContainerImage
	57, // 43: google.events.cloud.notebooks.v1.Instance.accelerator_config:type_name -> google.events.cloud.notebooks.v1.Instance.AcceleratorConfig
	13, // 44: google.events.cloud.notebooks.v1.Instance.state:type_name -> google.events.cloud.notebooks.v1.Instance.State
	58, // 45: google.events.cloud.notebooks.v1.Instance.disks:type_name -> google.events.cloud.notebooks.v1.Instance.Disk
	59, // 46: google.events.cloud.notebooks.v1.Instance.shielded_instance_config:type_name -> google.events.cloud.notebooks.v1.Instance.ShieldedInstanceConfig
	61, // 47: google.events.cloud.notebooks.v1.Instance.labels:type_name -> google.events.cloud.notebooks.v1.Instance.LabelsEntry
	62, // 48: google.events.cloud.notebooks.v1.Instance.metadata:type_name -> google.events.cloud.notebooks.v1.Instance.MetadataEntry
	60, // 49: google.events.cloud.notebooks.v1.Instance.upgrade_history:type_name -> google.events.cloud.notebooks.v1.Instance.UpgradeHistoryEntry
	16, // 50: google.events.cloud.notebooks.v1.Instance.nic_type:type_name -> google.events.cloud.notebooks.v1.Instance.NicType
	36, // 51: google.events.cloud.notebooks.v1.Instance.reservation_affinity:type_name -> google.events.cloud.notebooks.v1.ReservationAffinity
	64, // 52: google.events.cloud.notebooks.v1.Instance.create_time:type_name -> google.protobuf.Timestamp
	64, // 53: google.events.cloud.notebooks.v1.Instance.update_time:type_name -> google.protobuf.Timestamp
	19, // 54: google.events.cloud.notebooks.v1.Schedule.state:type_name -> google.events.cloud.notebooks.v1.Schedule.State
	64, // 55: google.events.cloud.notebooks.v1.Schedule.create_time:type_name -> google.protobuf.Timestamp
	64, // 56: google.events.cloud.notebooks.v1.Schedule.update_time:type_name -> google.protobuf.Timestamp
	34, // 57: google.events.cloud.notebooks.v1.Schedule.execution_template:type_name -> google.events.cloud.notebooks.v1.ExecutionTemplate
	35, // 58: google.events.cloud.notebooks.v1.Schedule.recent_executions:type_name -> google.events.cloud.notebooks.v1.Execution
	23, // 59: google.events.cloud.notebooks.v1.RuntimeEventData.payload:type_name -> google.events.cloud.notebooks.v1.Runtime
	35, // 60: google.events.cloud.notebooks.v1.ExecutionEventData.payload:type_name -> google.events.cloud.notebooks.v1.Execution
	37, // 61: google.events.cloud.notebooks.v1.InstanceEventData.payload:type_name -> google.events.cloud.notebooks.v1.Instance
	38, // 62: google.events.cloud.notebooks.v1.ScheduleEventData.payload:type_name -> google.events.cloud.notebooks.v1.Schedule
	20, // 63: google.events.cloud.notebooks.v1.EnvironmentEventData.payload:type_name -> google.events.cloud.notebooks.v1.Environment
	8,  // 64: google.events.cloud.notebooks.v1.ExecutionTemplate.SchedulerAcceleratorConfig.type:type_name -> google.events.cloud.notebooks.v1.ExecutionTemplate.SchedulerAcceleratorType
	56, // 65: google.events.cloud.notebooks.v1.ExecutionTemplate.VertexAIParameters.env:type_name -> google.events.cloud.notebooks.v1.ExecutionTemplate.VertexAIParameters.EnvEntry
	12, // 66: google.events.cloud.notebooks.v1.Instance.AcceleratorConfig.type:type_name -> google.events.cloud.notebooks.v1.Instance.AcceleratorType
	63, // 67: google.events.cloud.notebooks.v1.Instance.Disk.guest_os_features:type_name -> google.events.cloud.notebooks.v1.Instance.Disk.GuestOsFeature
	17, // 68: google.events.cloud.notebooks.v1.Instance.UpgradeHistoryEntry.state:type_name -> google.events.cloud.notebooks.v1.Instance.UpgradeHistoryEntry.State
	64, // 69: google.events.cloud.notebooks.v1.Instance.UpgradeHistoryEntry.create_time:type_name -> google.protobuf.Timestamp
	18, // 70: google.events.cloud.notebooks.v1.Instance.UpgradeHistoryEntry.action:type_name -> google.events.cloud.notebooks.v1.Instance.UpgradeHistoryEntry.Action
	71, // [71:71] is the sub-list for method output_type
	71, // [71:71] is the sub-list for method input_type
	71, // [71:71] is the sub-list for extension type_name
	71, // [71:71] is the sub-list for extension extendee
	0,  // [0:71] is the sub-list for field type_name
}

func init() { file_cloud_notebooks_v1_data_proto_init() }
func file_cloud_notebooks_v1_data_proto_init() {
	if File_cloud_notebooks_v1_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_notebooks_v1_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Environment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VmImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Runtime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeAcceleratorConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalDisk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalDiskInitializeParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeAccessConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeSoftwareConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeShieldedInstanceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Execution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReservationAffinity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalDisk_RuntimeGuestOsFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineConfig_BootImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionTemplate_SchedulerAcceleratorConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionTemplate_DataprocParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionTemplate_VertexAIParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instance_AcceleratorConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instance_Disk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instance_ShieldedInstanceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instance_UpgradeHistoryEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_notebooks_v1_data_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instance_Disk_GuestOsFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cloud_notebooks_v1_data_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Environment_VmImage)(nil),
		(*Environment_ContainerImage)(nil),
	}
	file_cloud_notebooks_v1_data_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*VmImage_ImageName)(nil),
		(*VmImage_ImageFamily)(nil),
	}
	file_cloud_notebooks_v1_data_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Runtime_VirtualMachine)(nil),
	}
	file_cloud_notebooks_v1_data_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_cloud_notebooks_v1_data_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*ExecutionTemplate_DataprocParameters_)(nil),
		(*ExecutionTemplate_VertexAiParameters)(nil),
	}
	file_cloud_notebooks_v1_data_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*Instance_VmImage)(nil),
		(*Instance_ContainerImage)(nil),
	}
	file_cloud_notebooks_v1_data_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_cloud_notebooks_v1_data_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_cloud_notebooks_v1_data_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_cloud_notebooks_v1_data_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_cloud_notebooks_v1_data_proto_msgTypes[23].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_notebooks_v1_data_proto_rawDesc,
			NumEnums:      20,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_notebooks_v1_data_proto_goTypes,
		DependencyIndexes: file_cloud_notebooks_v1_data_proto_depIdxs,
		EnumInfos:         file_cloud_notebooks_v1_data_proto_enumTypes,
		MessageInfos:      file_cloud_notebooks_v1_data_proto_msgTypes,
	}.Build()
	File_cloud_notebooks_v1_data_proto = out.File
	file_cloud_notebooks_v1_data_proto_rawDesc = nil
	file_cloud_notebooks_v1_data_proto_goTypes = nil
	file_cloud_notebooks_v1_data_proto_depIdxs = nil
}
