// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v3.21.6
// source: cloud/apigeeregistry/v1/data.proto

package apigeeregistrydata

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// State of the Instance.
type Instance_State int32

const (
	// The default value. This value is used if the state is omitted.
	Instance_STATE_UNSPECIFIED Instance_State = 0
	// The Instance has not been initialized or has been deleted.
	Instance_INACTIVE Instance_State = 1
	// The Instance is being created.
	Instance_CREATING Instance_State = 2
	// The Instance has been created and is ready for use.
	Instance_ACTIVE Instance_State = 3
	// The Instance is being updated.
	Instance_UPDATING Instance_State = 4
	// The Instance is being deleted.
	Instance_DELETING Instance_State = 5
	// The Instance encountered an error during a state change.
	Instance_FAILED Instance_State = 6
)

// Enum value maps for Instance_State.
var (
	Instance_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "INACTIVE",
		2: "CREATING",
		3: "ACTIVE",
		4: "UPDATING",
		5: "DELETING",
		6: "FAILED",
	}
	Instance_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"INACTIVE":          1,
		"CREATING":          2,
		"ACTIVE":            3,
		"UPDATING":          4,
		"DELETING":          5,
		"FAILED":            6,
	}
)

func (x Instance_State) Enum() *Instance_State {
	p := new(Instance_State)
	*p = x
	return p
}

func (x Instance_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Instance_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_apigeeregistry_v1_data_proto_enumTypes[0].Descriptor()
}

func (Instance_State) Type() protoreflect.EnumType {
	return &file_cloud_apigeeregistry_v1_data_proto_enumTypes[0]
}

func (x Instance_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Instance_State.Descriptor instead.
func (Instance_State) EnumDescriptor() ([]byte, []int) {
	return file_cloud_apigeeregistry_v1_data_proto_rawDescGZIP(), []int{0, 0}
}

// An Instance represents the instance resources of the Registry.
// Currently, only one instance is allowed for each project.
type Instance struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: `projects/*/locations/*/instance`.
	// Currently only `locations/global` is supported.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Creation timestamp.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Last update timestamp.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The current state of the Instance.
	State Instance_State `protobuf:"varint,4,opt,name=state,proto3,enum=google.events.cloud.apigeeregistry.v1.Instance_State" json:"state,omitempty"`
	// Output only. Extra information of Instance.State if the state is `FAILED`.
	StateMessage string `protobuf:"bytes,5,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
	// Required. Config of the Instance.
	Config        *Instance_Config `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Instance) Reset() {
	*x = Instance{}
	mi := &file_cloud_apigeeregistry_v1_data_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instance) ProtoMessage() {}

func (x *Instance) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_apigeeregistry_v1_data_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instance.ProtoReflect.Descriptor instead.
func (*Instance) Descriptor() ([]byte, []int) {
	return file_cloud_apigeeregistry_v1_data_proto_rawDescGZIP(), []int{0}
}

func (x *Instance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Instance) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Instance) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Instance) GetState() Instance_State {
	if x != nil {
		return x.State
	}
	return Instance_STATE_UNSPECIFIED
}

func (x *Instance) GetStateMessage() string {
	if x != nil {
		return x.StateMessage
	}
	return ""
}

func (x *Instance) GetConfig() *Instance_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

// A top-level description of an API.
// Produced by producers and are commitments to provide services.
type Api struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Human-meaningful name.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// A detailed description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. Creation timestamp.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Last update timestamp.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// A user-definable description of the availability of this service.
	// Format: free-form, but we expect single words that describe availability,
	// e.g., "NONE", "TESTING", "PREVIEW", "GENERAL", "DEPRECATED", "SHUTDOWN".
	Availability string `protobuf:"bytes,6,opt,name=availability,proto3" json:"availability,omitempty"`
	// The recommended version of the API.
	// Format:
	// `projects/{project}/locations/{location}/apis/{api}/versions/{version}`
	RecommendedVersion string `protobuf:"bytes,7,opt,name=recommended_version,json=recommendedVersion,proto3" json:"recommended_version,omitempty"`
	// The recommended deployment of the API.
	// Format:
	// `projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}`
	RecommendedDeployment string `protobuf:"bytes,8,opt,name=recommended_deployment,json=recommendedDeployment,proto3" json:"recommended_deployment,omitempty"`
	// Labels attach identifying metadata to resources. Identifying metadata can
	// be used to filter list operations.
	//
	// Label keys and values can be no longer than 64 characters
	// (Unicode codepoints), can only contain lowercase letters, numeric
	// characters, underscores, and dashes. International characters are allowed.
	// No more than 64 user labels can be associated with one resource (System
	// labels are excluded).
	//
	// See https://goo.gl/xmQnxf for more information and examples of labels.
	// System reserved label keys are prefixed with
	// `apigeeregistry.googleapis.com/` and cannot be changed.
	Labels map[string]string `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Annotations attach non-identifying metadata to resources.
	//
	// Annotation keys and values are less restricted than those of labels, but
	// should be generally used for small values of broad interest. Larger, topic-
	// specific metadata should be stored in Artifacts.
	Annotations   map[string]string `protobuf:"bytes,10,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Api) Reset() {
	*x = Api{}
	mi := &file_cloud_apigeeregistry_v1_data_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Api) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Api) ProtoMessage() {}

func (x *Api) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_apigeeregistry_v1_data_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Api.ProtoReflect.Descriptor instead.
func (*Api) Descriptor() ([]byte, []int) {
	return file_cloud_apigeeregistry_v1_data_proto_rawDescGZIP(), []int{1}
}

func (x *Api) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Api) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Api) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Api) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Api) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Api) GetAvailability() string {
	if x != nil {
		return x.Availability
	}
	return ""
}

func (x *Api) GetRecommendedVersion() string {
	if x != nil {
		return x.RecommendedVersion
	}
	return ""
}

func (x *Api) GetRecommendedDeployment() string {
	if x != nil {
		return x.RecommendedDeployment
	}
	return ""
}

func (x *Api) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Api) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

// Describes a particular version of an API.
// ApiVersions are what consumers actually use.
type ApiVersion struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Human-meaningful name.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// A detailed description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. Creation timestamp.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Last update timestamp.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// A user-definable description of the lifecycle phase of this API version.
	// Format: free-form, but we expect single words that describe API maturity,
	// e.g., "CONCEPT", "DESIGN", "DEVELOPMENT", "STAGING", "PRODUCTION",
	// "DEPRECATED", "RETIRED".
	State string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	// Labels attach identifying metadata to resources. Identifying metadata can
	// be used to filter list operations.
	//
	// Label keys and values can be no longer than 64 characters
	// (Unicode codepoints), can only contain lowercase letters, numeric
	// characters, underscores and dashes. International characters are allowed.
	// No more than 64 user labels can be associated with one resource (System
	// labels are excluded).
	//
	// See https://goo.gl/xmQnxf for more information and examples of labels.
	// System reserved label keys are prefixed with
	// `apigeeregistry.googleapis.com/` and cannot be changed.
	Labels map[string]string `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Annotations attach non-identifying metadata to resources.
	//
	// Annotation keys and values are less restricted than those of labels, but
	// should be generally used for small values of broad interest. Larger, topic-
	// specific metadata should be stored in Artifacts.
	Annotations   map[string]string `protobuf:"bytes,8,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiVersion) Reset() {
	*x = ApiVersion{}
	mi := &file_cloud_apigeeregistry_v1_data_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiVersion) ProtoMessage() {}

func (x *ApiVersion) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_apigeeregistry_v1_data_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiVersion.ProtoReflect.Descriptor instead.
func (*ApiVersion) Descriptor() ([]byte, []int) {
	return file_cloud_apigeeregistry_v1_data_proto_rawDescGZIP(), []int{2}
}

func (x *ApiVersion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApiVersion) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ApiVersion) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ApiVersion) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ApiVersion) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ApiVersion) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ApiVersion) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ApiVersion) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

// Describes a version of an API in a structured way.
// ApiSpecs provide formal descriptions that consumers can use to use a version.
// ApiSpec resources are intended to be fully-resolved descriptions of an
// ApiVersion. When specs consist of multiple files, these should be bundled
// together (e.g., in a zip archive) and stored as a unit. Multiple specs can
// exist to provide representations in different API description formats.
// Synchronization of these representations would be provided by tooling and
// background services.
type ApiSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A possibly-hierarchical name used to refer to the spec from other specs.
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	// A detailed description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. Immutable. The revision ID of the spec.
	// A new revision is committed whenever the spec contents are changed.
	// The format is an 8-character hexadecimal string.
	RevisionId string `protobuf:"bytes,4,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
	// Output only. Creation timestamp; when the spec resource was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Revision creation timestamp; when the represented revision was
	// created.
	RevisionCreateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=revision_create_time,json=revisionCreateTime,proto3" json:"revision_create_time,omitempty"`
	// Output only. Last update timestamp: when the represented revision was last
	// modified.
	RevisionUpdateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=revision_update_time,json=revisionUpdateTime,proto3" json:"revision_update_time,omitempty"`
	// A style (format) descriptor for this spec that is specified as a Media Type
	// (https://en.wikipedia.org/wiki/Media_type). Possible values include
	// `application/vnd.apigee.proto`, `application/vnd.apigee.openapi`, and
	// `application/vnd.apigee.graphql`, with possible suffixes representing
	// compression types. These hypothetical names are defined in the vendor tree
	// defined in RFC6838 (https://tools.ietf.org/html/rfc6838) and are not final.
	// Content types can specify compression. Currently only GZip compression is
	// supported (indicated with "+gzip").
	MimeType string `protobuf:"bytes,8,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	// Output only. The size of the spec file in bytes. If the spec is gzipped,
	// this is the size of the uncompressed spec.
	SizeBytes int32 `protobuf:"varint,9,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	// Output only. A SHA-256 hash of the spec's contents. If the spec is gzipped,
	// this is the hash of the uncompressed spec.
	Hash string `protobuf:"bytes,10,opt,name=hash,proto3" json:"hash,omitempty"`
	// The original source URI of the spec (if one exists).
	// This is an external location that can be used for reference purposes
	// but which may not be authoritative since this external resource may
	// change after the spec is retrieved.
	SourceUri string `protobuf:"bytes,11,opt,name=source_uri,json=sourceUri,proto3" json:"source_uri,omitempty"`
	// Labels attach identifying metadata to resources. Identifying metadata can
	// be used to filter list operations.
	//
	// Label keys and values can be no longer than 64 characters
	// (Unicode codepoints), can only contain lowercase letters, numeric
	// characters, underscores and dashes. International characters are allowed.
	// No more than 64 user labels can be associated with one resource (System
	// labels are excluded).
	//
	// See https://goo.gl/xmQnxf for more information and examples of labels.
	// System reserved label keys are prefixed with
	// `apigeeregistry.googleapis.com/` and cannot be changed.
	Labels map[string]string `protobuf:"bytes,14,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Annotations attach non-identifying metadata to resources.
	//
	// Annotation keys and values are less restricted than those of labels, but
	// should be generally used for small values of broad interest. Larger, topic-
	// specific metadata should be stored in Artifacts.
	Annotations   map[string]string `protobuf:"bytes,15,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiSpec) Reset() {
	*x = ApiSpec{}
	mi := &file_cloud_apigeeregistry_v1_data_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiSpec) ProtoMessage() {}

func (x *ApiSpec) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_apigeeregistry_v1_data_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiSpec.ProtoReflect.Descriptor instead.
func (*ApiSpec) Descriptor() ([]byte, []int) {
	return file_cloud_apigeeregistry_v1_data_proto_rawDescGZIP(), []int{3}
}

func (x *ApiSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApiSpec) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ApiSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ApiSpec) GetRevisionId() string {
	if x != nil {
		return x.RevisionId
	}
	return ""
}

func (x *ApiSpec) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ApiSpec) GetRevisionCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RevisionCreateTime
	}
	return nil
}

func (x *ApiSpec) GetRevisionUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RevisionUpdateTime
	}
	return nil
}

func (x *ApiSpec) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *ApiSpec) GetSizeBytes() int32 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *ApiSpec) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ApiSpec) GetSourceUri() string {
	if x != nil {
		return x.SourceUri
	}
	return ""
}

func (x *ApiSpec) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ApiSpec) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

// Describes a service running at particular address that
// provides a particular version of an API. ApiDeployments have revisions which
// correspond to different configurations of a single deployment in time.
// Revision identifiers should be updated whenever the served API spec or
// endpoint address changes.
type ApiDeployment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Human-meaningful name.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// A detailed description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. Immutable. The revision ID of the deployment.
	// A new revision is committed whenever the deployment contents are changed.
	// The format is an 8-character hexadecimal string.
	RevisionId string `protobuf:"bytes,4,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
	// Output only. Creation timestamp; when the deployment resource was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Revision creation timestamp; when the represented revision was
	// created.
	RevisionCreateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=revision_create_time,json=revisionCreateTime,proto3" json:"revision_create_time,omitempty"`
	// Output only. Last update timestamp: when the represented revision was last
	// modified.
	RevisionUpdateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=revision_update_time,json=revisionUpdateTime,proto3" json:"revision_update_time,omitempty"`
	// The full resource name (including revision ID) of the spec of the API being
	// served by the deployment. Changes to this value will update the revision.
	// Format: `apis/{api}/deployments/{deployment}`
	ApiSpecRevision string `protobuf:"bytes,8,opt,name=api_spec_revision,json=apiSpecRevision,proto3" json:"api_spec_revision,omitempty"`
	// The address where the deployment is serving. Changes to this value will
	// update the revision.
	EndpointUri string `protobuf:"bytes,9,opt,name=endpoint_uri,json=endpointUri,proto3" json:"endpoint_uri,omitempty"`
	// The address of the external channel of the API (e.g., the Developer
	// Portal). Changes to this value will not affect the revision.
	ExternalChannelUri string `protobuf:"bytes,10,opt,name=external_channel_uri,json=externalChannelUri,proto3" json:"external_channel_uri,omitempty"`
	// Text briefly identifying the intended audience of the API. Changes to this
	// value will not affect the revision.
	IntendedAudience string `protobuf:"bytes,11,opt,name=intended_audience,json=intendedAudience,proto3" json:"intended_audience,omitempty"`
	// Text briefly describing how to access the endpoint. Changes to this value
	// will not affect the revision.
	AccessGuidance string `protobuf:"bytes,12,opt,name=access_guidance,json=accessGuidance,proto3" json:"access_guidance,omitempty"`
	// Labels attach identifying metadata to resources. Identifying metadata can
	// be used to filter list operations.
	//
	// Label keys and values can be no longer than 64 characters
	// (Unicode codepoints), can only contain lowercase letters, numeric
	// characters, underscores and dashes. International characters are allowed.
	// No more than 64 user labels can be associated with one resource (System
	// labels are excluded).
	//
	// See https://goo.gl/xmQnxf for more information and examples of labels.
	// System reserved label keys are prefixed with
	// `apigeeregistry.googleapis.com/` and cannot be changed.
	Labels map[string]string `protobuf:"bytes,14,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Annotations attach non-identifying metadata to resources.
	//
	// Annotation keys and values are less restricted than those of labels, but
	// should be generally used for small values of broad interest. Larger, topic-
	// specific metadata should be stored in Artifacts.
	Annotations   map[string]string `protobuf:"bytes,15,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiDeployment) Reset() {
	*x = ApiDeployment{}
	mi := &file_cloud_apigeeregistry_v1_data_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiDeployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiDeployment) ProtoMessage() {}

func (x *ApiDeployment) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_apigeeregistry_v1_data_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiDeployment.ProtoReflect.Descriptor instead.
func (*ApiDeployment) Descriptor() ([]byte, []int) {
	return file_cloud_apigeeregistry_v1_data_proto_rawDescGZIP(), []int{4}
}

func (x *ApiDeployment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApiDeployment) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ApiDeployment) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ApiDeployment) GetRevisionId() string {
	if x != nil {
		return x.RevisionId
	}
	return ""
}

func (x *ApiDeployment) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ApiDeployment) GetRevisionCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RevisionCreateTime
	}
	return nil
}

func (x *ApiDeployment) GetRevisionUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RevisionUpdateTime
	}
	return nil
}

func (x *ApiDeployment) GetApiSpecRevision() string {
	if x != nil {
		return x.ApiSpecRevision
	}
	return ""
}

func (x *ApiDeployment) GetEndpointUri() string {
	if x != nil {
		return x.EndpointUri
	}
	return ""
}

func (x *ApiDeployment) GetExternalChannelUri() string {
	if x != nil {
		return x.ExternalChannelUri
	}
	return ""
}

func (x *ApiDeployment) GetIntendedAudience() string {
	if x != nil {
		return x.IntendedAudience
	}
	return ""
}

func (x *ApiDeployment) GetAccessGuidance() string {
	if x != nil {
		return x.AccessGuidance
	}
	return ""
}

func (x *ApiDeployment) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ApiDeployment) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

// The data within all ApiVersion events.
type ApiVersionEventData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The ApiVersion event payload. Unset for deletion events.
	Payload       *ApiVersion `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiVersionEventData) Reset() {
	*x = ApiVersionEventData{}
	mi := &file_cloud_apigeeregistry_v1_data_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiVersionEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiVersionEventData) ProtoMessage() {}

func (x *ApiVersionEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_apigeeregistry_v1_data_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiVersionEventData.ProtoReflect.Descriptor instead.
func (*ApiVersionEventData) Descriptor() ([]byte, []int) {
	return file_cloud_apigeeregistry_v1_data_proto_rawDescGZIP(), []int{5}
}

func (x *ApiVersionEventData) GetPayload() *ApiVersion {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all Instance events.
type InstanceEventData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The Instance event payload. Unset for deletion events.
	Payload       *Instance `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InstanceEventData) Reset() {
	*x = InstanceEventData{}
	mi := &file_cloud_apigeeregistry_v1_data_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstanceEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceEventData) ProtoMessage() {}

func (x *InstanceEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_apigeeregistry_v1_data_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceEventData.ProtoReflect.Descriptor instead.
func (*InstanceEventData) Descriptor() ([]byte, []int) {
	return file_cloud_apigeeregistry_v1_data_proto_rawDescGZIP(), []int{6}
}

func (x *InstanceEventData) GetPayload() *Instance {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all ApiSpec events.
type ApiSpecEventData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The ApiSpec event payload. Unset for deletion events.
	Payload       *ApiSpec `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiSpecEventData) Reset() {
	*x = ApiSpecEventData{}
	mi := &file_cloud_apigeeregistry_v1_data_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiSpecEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiSpecEventData) ProtoMessage() {}

func (x *ApiSpecEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_apigeeregistry_v1_data_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiSpecEventData.ProtoReflect.Descriptor instead.
func (*ApiSpecEventData) Descriptor() ([]byte, []int) {
	return file_cloud_apigeeregistry_v1_data_proto_rawDescGZIP(), []int{7}
}

func (x *ApiSpecEventData) GetPayload() *ApiSpec {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all ApiDeployment events.
type ApiDeploymentEventData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The ApiDeployment event payload. Unset for deletion events.
	Payload       *ApiDeployment `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiDeploymentEventData) Reset() {
	*x = ApiDeploymentEventData{}
	mi := &file_cloud_apigeeregistry_v1_data_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiDeploymentEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiDeploymentEventData) ProtoMessage() {}

func (x *ApiDeploymentEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_apigeeregistry_v1_data_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiDeploymentEventData.ProtoReflect.Descriptor instead.
func (*ApiDeploymentEventData) Descriptor() ([]byte, []int) {
	return file_cloud_apigeeregistry_v1_data_proto_rawDescGZIP(), []int{8}
}

func (x *ApiDeploymentEventData) GetPayload() *ApiDeployment {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all Api events.
type ApiEventData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The Api event payload. Unset for deletion events.
	Payload       *Api `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiEventData) Reset() {
	*x = ApiEventData{}
	mi := &file_cloud_apigeeregistry_v1_data_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiEventData) ProtoMessage() {}

func (x *ApiEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_apigeeregistry_v1_data_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiEventData.ProtoReflect.Descriptor instead.
func (*ApiEventData) Descriptor() ([]byte, []int) {
	return file_cloud_apigeeregistry_v1_data_proto_rawDescGZIP(), []int{9}
}

func (x *ApiEventData) GetPayload() *Api {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Available configurations to provision an Instance.
type Instance_Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Output only. The GCP location where the Instance resides.
	Location string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// Required. The Customer Managed Encryption Key (CMEK) used for data
	// encryption. The CMEK name should follow the format of
	// `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`,
	// where the `location` must match InstanceConfig.location.
	CmekKeyName   string `protobuf:"bytes,2,opt,name=cmek_key_name,json=cmekKeyName,proto3" json:"cmek_key_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Instance_Config) Reset() {
	*x = Instance_Config{}
	mi := &file_cloud_apigeeregistry_v1_data_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Instance_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instance_Config) ProtoMessage() {}

func (x *Instance_Config) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_apigeeregistry_v1_data_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instance_Config.ProtoReflect.Descriptor instead.
func (*Instance_Config) Descriptor() ([]byte, []int) {
	return file_cloud_apigeeregistry_v1_data_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Instance_Config) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Instance_Config) GetCmekKeyName() string {
	if x != nil {
		return x.CmekKeyName
	}
	return ""
}

var File_cloud_apigeeregistry_v1_data_proto protoreflect.FileDescriptor

const file_cloud_apigeeregistry_v1_data_proto_rawDesc = "" +
	"\n" +
	"\"cloud/apigeeregistry/v1/data.proto\x12%google.events.cloud.apigeeregistry.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\x94\x04\n" +
	"\bInstance\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12;\n" +
	"\vcreate_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12K\n" +
	"\x05state\x18\x04 \x01(\x0e25.google.events.cloud.apigeeregistry.v1.Instance.StateR\x05state\x12#\n" +
	"\rstate_message\x18\x05 \x01(\tR\fstateMessage\x12N\n" +
	"\x06config\x18\x06 \x01(\v26.google.events.cloud.apigeeregistry.v1.Instance.ConfigR\x06config\x1aH\n" +
	"\x06Config\x12\x1a\n" +
	"\blocation\x18\x01 \x01(\tR\blocation\x12\"\n" +
	"\rcmek_key_name\x18\x02 \x01(\tR\vcmekKeyName\"n\n" +
	"\x05State\x12\x15\n" +
	"\x11STATE_UNSPECIFIED\x10\x00\x12\f\n" +
	"\bINACTIVE\x10\x01\x12\f\n" +
	"\bCREATING\x10\x02\x12\n" +
	"\n" +
	"\x06ACTIVE\x10\x03\x12\f\n" +
	"\bUPDATING\x10\x04\x12\f\n" +
	"\bDELETING\x10\x05\x12\n" +
	"\n" +
	"\x06FAILED\x10\x06\"\x8e\x05\n" +
	"\x03Api\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12!\n" +
	"\fdisplay_name\x18\x02 \x01(\tR\vdisplayName\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12;\n" +
	"\vcreate_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12\"\n" +
	"\favailability\x18\x06 \x01(\tR\favailability\x12/\n" +
	"\x13recommended_version\x18\a \x01(\tR\x12recommendedVersion\x125\n" +
	"\x16recommended_deployment\x18\b \x01(\tR\x15recommendedDeployment\x12N\n" +
	"\x06labels\x18\t \x03(\v26.google.events.cloud.apigeeregistry.v1.Api.LabelsEntryR\x06labels\x12]\n" +
	"\vannotations\x18\n" +
	" \x03(\v2;.google.events.cloud.apigeeregistry.v1.Api.AnnotationsEntryR\vannotations\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a>\n" +
	"\x10AnnotationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xad\x04\n" +
	"\n" +
	"ApiVersion\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12!\n" +
	"\fdisplay_name\x18\x02 \x01(\tR\vdisplayName\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12;\n" +
	"\vcreate_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12\x14\n" +
	"\x05state\x18\x06 \x01(\tR\x05state\x12U\n" +
	"\x06labels\x18\a \x03(\v2=.google.events.cloud.apigeeregistry.v1.ApiVersion.LabelsEntryR\x06labels\x12d\n" +
	"\vannotations\x18\b \x03(\v2B.google.events.cloud.apigeeregistry.v1.ApiVersion.AnnotationsEntryR\vannotations\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a>\n" +
	"\x10AnnotationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xf6\x05\n" +
	"\aApiSpec\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1f\n" +
	"\vrevision_id\x18\x04 \x01(\tR\n" +
	"revisionId\x12;\n" +
	"\vcreate_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12L\n" +
	"\x14revision_create_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\x12revisionCreateTime\x12L\n" +
	"\x14revision_update_time\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\x12revisionUpdateTime\x12\x1b\n" +
	"\tmime_type\x18\b \x01(\tR\bmimeType\x12\x1d\n" +
	"\n" +
	"size_bytes\x18\t \x01(\x05R\tsizeBytes\x12\x12\n" +
	"\x04hash\x18\n" +
	" \x01(\tR\x04hash\x12\x1d\n" +
	"\n" +
	"source_uri\x18\v \x01(\tR\tsourceUri\x12R\n" +
	"\x06labels\x18\x0e \x03(\v2:.google.events.cloud.apigeeregistry.v1.ApiSpec.LabelsEntryR\x06labels\x12a\n" +
	"\vannotations\x18\x0f \x03(\v2?.google.events.cloud.apigeeregistry.v1.ApiSpec.AnnotationsEntryR\vannotations\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a>\n" +
	"\x10AnnotationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xf7\x06\n" +
	"\rApiDeployment\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12!\n" +
	"\fdisplay_name\x18\x02 \x01(\tR\vdisplayName\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1f\n" +
	"\vrevision_id\x18\x04 \x01(\tR\n" +
	"revisionId\x12;\n" +
	"\vcreate_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12L\n" +
	"\x14revision_create_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\x12revisionCreateTime\x12L\n" +
	"\x14revision_update_time\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\x12revisionUpdateTime\x12*\n" +
	"\x11api_spec_revision\x18\b \x01(\tR\x0fapiSpecRevision\x12!\n" +
	"\fendpoint_uri\x18\t \x01(\tR\vendpointUri\x120\n" +
	"\x14external_channel_uri\x18\n" +
	" \x01(\tR\x12externalChannelUri\x12+\n" +
	"\x11intended_audience\x18\v \x01(\tR\x10intendedAudience\x12'\n" +
	"\x0faccess_guidance\x18\f \x01(\tR\x0eaccessGuidance\x12X\n" +
	"\x06labels\x18\x0e \x03(\v2@.google.events.cloud.apigeeregistry.v1.ApiDeployment.LabelsEntryR\x06labels\x12g\n" +
	"\vannotations\x18\x0f \x03(\v2E.google.events.cloud.apigeeregistry.v1.ApiDeployment.AnnotationsEntryR\vannotations\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a>\n" +
	"\x10AnnotationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"s\n" +
	"\x13ApiVersionEventData\x12P\n" +
	"\apayload\x18\x01 \x01(\v21.google.events.cloud.apigeeregistry.v1.ApiVersionH\x00R\apayload\x88\x01\x01B\n" +
	"\n" +
	"\b_payload\"o\n" +
	"\x11InstanceEventData\x12N\n" +
	"\apayload\x18\x01 \x01(\v2/.google.events.cloud.apigeeregistry.v1.InstanceH\x00R\apayload\x88\x01\x01B\n" +
	"\n" +
	"\b_payload\"m\n" +
	"\x10ApiSpecEventData\x12M\n" +
	"\apayload\x18\x01 \x01(\v2..google.events.cloud.apigeeregistry.v1.ApiSpecH\x00R\apayload\x88\x01\x01B\n" +
	"\n" +
	"\b_payload\"y\n" +
	"\x16ApiDeploymentEventData\x12S\n" +
	"\apayload\x18\x01 \x01(\v24.google.events.cloud.apigeeregistry.v1.ApiDeploymentH\x00R\apayload\x88\x01\x01B\n" +
	"\n" +
	"\b_payload\"e\n" +
	"\fApiEventData\x12I\n" +
	"\apayload\x18\x01 \x01(\v2*.google.events.cloud.apigeeregistry.v1.ApiH\x00R\apayload\x88\x01\x01B\n" +
	"\n" +
	"\b_payloadB\x85\x01\xaa\x02.Google.Events.Protobuf.Cloud.ApigeeRegistry.V1\xca\x02%Google\\Events\\Cloud\\ApigeeRegistry\\V1\xea\x02)Google::Events::Cloud::ApigeeRegistry::V1b\x06proto3"

var (
	file_cloud_apigeeregistry_v1_data_proto_rawDescOnce sync.Once
	file_cloud_apigeeregistry_v1_data_proto_rawDescData []byte
)

func file_cloud_apigeeregistry_v1_data_proto_rawDescGZIP() []byte {
	file_cloud_apigeeregistry_v1_data_proto_rawDescOnce.Do(func() {
		file_cloud_apigeeregistry_v1_data_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cloud_apigeeregistry_v1_data_proto_rawDesc), len(file_cloud_apigeeregistry_v1_data_proto_rawDesc)))
	})
	return file_cloud_apigeeregistry_v1_data_proto_rawDescData
}

var file_cloud_apigeeregistry_v1_data_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cloud_apigeeregistry_v1_data_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_cloud_apigeeregistry_v1_data_proto_goTypes = []any{
	(Instance_State)(0),            // 0: google.events.cloud.apigeeregistry.v1.Instance.State
	(*Instance)(nil),               // 1: google.events.cloud.apigeeregistry.v1.Instance
	(*Api)(nil),                    // 2: google.events.cloud.apigeeregistry.v1.Api
	(*ApiVersion)(nil),             // 3: google.events.cloud.apigeeregistry.v1.ApiVersion
	(*ApiSpec)(nil),                // 4: google.events.cloud.apigeeregistry.v1.ApiSpec
	(*ApiDeployment)(nil),          // 5: google.events.cloud.apigeeregistry.v1.ApiDeployment
	(*ApiVersionEventData)(nil),    // 6: google.events.cloud.apigeeregistry.v1.ApiVersionEventData
	(*InstanceEventData)(nil),      // 7: google.events.cloud.apigeeregistry.v1.InstanceEventData
	(*ApiSpecEventData)(nil),       // 8: google.events.cloud.apigeeregistry.v1.ApiSpecEventData
	(*ApiDeploymentEventData)(nil), // 9: google.events.cloud.apigeeregistry.v1.ApiDeploymentEventData
	(*ApiEventData)(nil),           // 10: google.events.cloud.apigeeregistry.v1.ApiEventData
	(*Instance_Config)(nil),        // 11: google.events.cloud.apigeeregistry.v1.Instance.Config
	nil,                            // 12: google.events.cloud.apigeeregistry.v1.Api.LabelsEntry
	nil,                            // 13: google.events.cloud.apigeeregistry.v1.Api.AnnotationsEntry
	nil,                            // 14: google.events.cloud.apigeeregistry.v1.ApiVersion.LabelsEntry
	nil,                            // 15: google.events.cloud.apigeeregistry.v1.ApiVersion.AnnotationsEntry
	nil,                            // 16: google.events.cloud.apigeeregistry.v1.ApiSpec.LabelsEntry
	nil,                            // 17: google.events.cloud.apigeeregistry.v1.ApiSpec.AnnotationsEntry
	nil,                            // 18: google.events.cloud.apigeeregistry.v1.ApiDeployment.LabelsEntry
	nil,                            // 19: google.events.cloud.apigeeregistry.v1.ApiDeployment.AnnotationsEntry
	(*timestamppb.Timestamp)(nil),  // 20: google.protobuf.Timestamp
}
var file_cloud_apigeeregistry_v1_data_proto_depIdxs = []int32{
	20, // 0: google.events.cloud.apigeeregistry.v1.Instance.create_time:type_name -> google.protobuf.Timestamp
	20, // 1: google.events.cloud.apigeeregistry.v1.Instance.update_time:type_name -> google.protobuf.Timestamp
	0,  // 2: google.events.cloud.apigeeregistry.v1.Instance.state:type_name -> google.events.cloud.apigeeregistry.v1.Instance.State
	11, // 3: google.events.cloud.apigeeregistry.v1.Instance.config:type_name -> google.events.cloud.apigeeregistry.v1.Instance.Config
	20, // 4: google.events.cloud.apigeeregistry.v1.Api.create_time:type_name -> google.protobuf.Timestamp
	20, // 5: google.events.cloud.apigeeregistry.v1.Api.update_time:type_name -> google.protobuf.Timestamp
	12, // 6: google.events.cloud.apigeeregistry.v1.Api.labels:type_name -> google.events.cloud.apigeeregistry.v1.Api.LabelsEntry
	13, // 7: google.events.cloud.apigeeregistry.v1.Api.annotations:type_name -> google.events.cloud.apigeeregistry.v1.Api.AnnotationsEntry
	20, // 8: google.events.cloud.apigeeregistry.v1.ApiVersion.create_time:type_name -> google.protobuf.Timestamp
	20, // 9: google.events.cloud.apigeeregistry.v1.ApiVersion.update_time:type_name -> google.protobuf.Timestamp
	14, // 10: google.events.cloud.apigeeregistry.v1.ApiVersion.labels:type_name -> google.events.cloud.apigeeregistry.v1.ApiVersion.LabelsEntry
	15, // 11: google.events.cloud.apigeeregistry.v1.ApiVersion.annotations:type_name -> google.events.cloud.apigeeregistry.v1.ApiVersion.AnnotationsEntry
	20, // 12: google.events.cloud.apigeeregistry.v1.ApiSpec.create_time:type_name -> google.protobuf.Timestamp
	20, // 13: google.events.cloud.apigeeregistry.v1.ApiSpec.revision_create_time:type_name -> google.protobuf.Timestamp
	20, // 14: google.events.cloud.apigeeregistry.v1.ApiSpec.revision_update_time:type_name -> google.protobuf.Timestamp
	16, // 15: google.events.cloud.apigeeregistry.v1.ApiSpec.labels:type_name -> google.events.cloud.apigeeregistry.v1.ApiSpec.LabelsEntry
	17, // 16: google.events.cloud.apigeeregistry.v1.ApiSpec.annotations:type_name -> google.events.cloud.apigeeregistry.v1.ApiSpec.AnnotationsEntry
	20, // 17: google.events.cloud.apigeeregistry.v1.ApiDeployment.create_time:type_name -> google.protobuf.Timestamp
	20, // 18: google.events.cloud.apigeeregistry.v1.ApiDeployment.revision_create_time:type_name -> google.protobuf.Timestamp
	20, // 19: google.events.cloud.apigeeregistry.v1.ApiDeployment.revision_update_time:type_name -> google.protobuf.Timestamp
	18, // 20: google.events.cloud.apigeeregistry.v1.ApiDeployment.labels:type_name -> google.events.cloud.apigeeregistry.v1.ApiDeployment.LabelsEntry
	19, // 21: google.events.cloud.apigeeregistry.v1.ApiDeployment.annotations:type_name -> google.events.cloud.apigeeregistry.v1.ApiDeployment.AnnotationsEntry
	3,  // 22: google.events.cloud.apigeeregistry.v1.ApiVersionEventData.payload:type_name -> google.events.cloud.apigeeregistry.v1.ApiVersion
	1,  // 23: google.events.cloud.apigeeregistry.v1.InstanceEventData.payload:type_name -> google.events.cloud.apigeeregistry.v1.Instance
	4,  // 24: google.events.cloud.apigeeregistry.v1.ApiSpecEventData.payload:type_name -> google.events.cloud.apigeeregistry.v1.ApiSpec
	5,  // 25: google.events.cloud.apigeeregistry.v1.ApiDeploymentEventData.payload:type_name -> google.events.cloud.apigeeregistry.v1.ApiDeployment
	2,  // 26: google.events.cloud.apigeeregistry.v1.ApiEventData.payload:type_name -> google.events.cloud.apigeeregistry.v1.Api
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_cloud_apigeeregistry_v1_data_proto_init() }
func file_cloud_apigeeregistry_v1_data_proto_init() {
	if File_cloud_apigeeregistry_v1_data_proto != nil {
		return
	}
	file_cloud_apigeeregistry_v1_data_proto_msgTypes[5].OneofWrappers = []any{}
	file_cloud_apigeeregistry_v1_data_proto_msgTypes[6].OneofWrappers = []any{}
	file_cloud_apigeeregistry_v1_data_proto_msgTypes[7].OneofWrappers = []any{}
	file_cloud_apigeeregistry_v1_data_proto_msgTypes[8].OneofWrappers = []any{}
	file_cloud_apigeeregistry_v1_data_proto_msgTypes[9].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cloud_apigeeregistry_v1_data_proto_rawDesc), len(file_cloud_apigeeregistry_v1_data_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_apigeeregistry_v1_data_proto_goTypes,
		DependencyIndexes: file_cloud_apigeeregistry_v1_data_proto_depIdxs,
		EnumInfos:         file_cloud_apigeeregistry_v1_data_proto_enumTypes,
		MessageInfos:      file_cloud_apigeeregistry_v1_data_proto_msgTypes,
	}.Build()
	File_cloud_apigeeregistry_v1_data_proto = out.File
	file_cloud_apigeeregistry_v1_data_proto_goTypes = nil
	file_cloud_apigeeregistry_v1_data_proto_depIdxs = nil
}
