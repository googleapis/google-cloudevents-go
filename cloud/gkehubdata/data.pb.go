// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.6
// source: cloud/gkehub/v1/data.proto

package gkehubdata

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// State describes the lifecycle status of a Feature.
type FeatureResourceState_State int32

const (
	// State is unknown or not set.
	FeatureResourceState_STATE_UNSPECIFIED FeatureResourceState_State = 0
	// The Feature is being enabled, and the Feature resource is being created.
	// Once complete, the corresponding Feature will be enabled in this Hub.
	FeatureResourceState_ENABLING FeatureResourceState_State = 1
	// The Feature is enabled in this Hub, and the Feature resource is fully
	// available.
	FeatureResourceState_ACTIVE FeatureResourceState_State = 2
	// The Feature is being disabled in this Hub, and the Feature resource
	// is being deleted.
	FeatureResourceState_DISABLING FeatureResourceState_State = 3
	// The Feature resource is being updated.
	FeatureResourceState_UPDATING FeatureResourceState_State = 4
	// The Feature resource is being updated by the Hub Service.
	FeatureResourceState_SERVICE_UPDATING FeatureResourceState_State = 5
)

// Enum value maps for FeatureResourceState_State.
var (
	FeatureResourceState_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "ENABLING",
		2: "ACTIVE",
		3: "DISABLING",
		4: "UPDATING",
		5: "SERVICE_UPDATING",
	}
	FeatureResourceState_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"ENABLING":          1,
		"ACTIVE":            2,
		"DISABLING":         3,
		"UPDATING":          4,
		"SERVICE_UPDATING":  5,
	}
)

func (x FeatureResourceState_State) Enum() *FeatureResourceState_State {
	p := new(FeatureResourceState_State)
	*p = x
	return p
}

func (x FeatureResourceState_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureResourceState_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_gkehub_v1_data_proto_enumTypes[0].Descriptor()
}

func (FeatureResourceState_State) Type() protoreflect.EnumType {
	return &file_cloud_gkehub_v1_data_proto_enumTypes[0]
}

func (x FeatureResourceState_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureResourceState_State.Descriptor instead.
func (FeatureResourceState_State) EnumDescriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{1, 0}
}

// Code represents a machine-readable, high-level status of the Feature.
type FeatureState_Code int32

const (
	// Unknown or not set.
	FeatureState_CODE_UNSPECIFIED FeatureState_Code = 0
	// The Feature is operating normally.
	FeatureState_OK FeatureState_Code = 1
	// The Feature has encountered an issue, and is operating in a degraded
	// state. The Feature may need intervention to return to normal operation.
	// See the description and any associated Feature-specific details for more
	// information.
	FeatureState_WARNING FeatureState_Code = 2
	// The Feature is not operating or is in a severely degraded state.
	// The Feature may need intervention to return to normal operation.
	// See the description and any associated Feature-specific details for more
	// information.
	FeatureState_ERROR FeatureState_Code = 3
)

// Enum value maps for FeatureState_Code.
var (
	FeatureState_Code_name = map[int32]string{
		0: "CODE_UNSPECIFIED",
		1: "OK",
		2: "WARNING",
		3: "ERROR",
	}
	FeatureState_Code_value = map[string]int32{
		"CODE_UNSPECIFIED": 0,
		"OK":               1,
		"WARNING":          2,
		"ERROR":            3,
	}
)

func (x FeatureState_Code) Enum() *FeatureState_Code {
	p := new(FeatureState_Code)
	*p = x
	return p
}

func (x FeatureState_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureState_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_gkehub_v1_data_proto_enumTypes[1].Descriptor()
}

func (FeatureState_Code) Type() protoreflect.EnumType {
	return &file_cloud_gkehub_v1_data_proto_enumTypes[1]
}

func (x FeatureState_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureState_Code.Descriptor instead.
func (FeatureState_Code) EnumDescriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{2, 0}
}

// Code describes the state of a Scope resource.
type ScopeLifecycleState_Code int32

const (
	// The code is not set.
	ScopeLifecycleState_CODE_UNSPECIFIED ScopeLifecycleState_Code = 0
	// The scope is being created.
	ScopeLifecycleState_CREATING ScopeLifecycleState_Code = 1
	// The scope active.
	ScopeLifecycleState_READY ScopeLifecycleState_Code = 2
	// The scope is being deleted.
	ScopeLifecycleState_DELETING ScopeLifecycleState_Code = 3
	// The scope is being updated.
	ScopeLifecycleState_UPDATING ScopeLifecycleState_Code = 4
)

// Enum value maps for ScopeLifecycleState_Code.
var (
	ScopeLifecycleState_Code_name = map[int32]string{
		0: "CODE_UNSPECIFIED",
		1: "CREATING",
		2: "READY",
		3: "DELETING",
		4: "UPDATING",
	}
	ScopeLifecycleState_Code_value = map[string]int32{
		"CODE_UNSPECIFIED": 0,
		"CREATING":         1,
		"READY":            2,
		"DELETING":         3,
		"UPDATING":         4,
	}
)

func (x ScopeLifecycleState_Code) Enum() *ScopeLifecycleState_Code {
	p := new(ScopeLifecycleState_Code)
	*p = x
	return p
}

func (x ScopeLifecycleState_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScopeLifecycleState_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_gkehub_v1_data_proto_enumTypes[2].Descriptor()
}

func (ScopeLifecycleState_Code) Type() protoreflect.EnumType {
	return &file_cloud_gkehub_v1_data_proto_enumTypes[2]
}

func (x ScopeLifecycleState_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScopeLifecycleState_Code.Descriptor instead.
func (ScopeLifecycleState_Code) EnumDescriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{7, 0}
}

// Code describes the state of a MembershipBinding resource.
type MembershipBindingLifecycleState_Code int32

const (
	// The code is not set.
	MembershipBindingLifecycleState_CODE_UNSPECIFIED MembershipBindingLifecycleState_Code = 0
	// The membershipbinding is being created.
	MembershipBindingLifecycleState_CREATING MembershipBindingLifecycleState_Code = 1
	// The membershipbinding active.
	MembershipBindingLifecycleState_READY MembershipBindingLifecycleState_Code = 2
	// The membershipbinding is being deleted.
	MembershipBindingLifecycleState_DELETING MembershipBindingLifecycleState_Code = 3
	// The membershipbinding is being updated.
	MembershipBindingLifecycleState_UPDATING MembershipBindingLifecycleState_Code = 4
)

// Enum value maps for MembershipBindingLifecycleState_Code.
var (
	MembershipBindingLifecycleState_Code_name = map[int32]string{
		0: "CODE_UNSPECIFIED",
		1: "CREATING",
		2: "READY",
		3: "DELETING",
		4: "UPDATING",
	}
	MembershipBindingLifecycleState_Code_value = map[string]int32{
		"CODE_UNSPECIFIED": 0,
		"CREATING":         1,
		"READY":            2,
		"DELETING":         3,
		"UPDATING":         4,
	}
)

func (x MembershipBindingLifecycleState_Code) Enum() *MembershipBindingLifecycleState_Code {
	p := new(MembershipBindingLifecycleState_Code)
	*p = x
	return p
}

func (x MembershipBindingLifecycleState_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MembershipBindingLifecycleState_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_gkehub_v1_data_proto_enumTypes[3].Descriptor()
}

func (MembershipBindingLifecycleState_Code) Type() protoreflect.EnumType {
	return &file_cloud_gkehub_v1_data_proto_enumTypes[3]
}

func (x MembershipBindingLifecycleState_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MembershipBindingLifecycleState_Code.Descriptor instead.
func (MembershipBindingLifecycleState_Code) EnumDescriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{9, 0}
}

// ClusterType describes on prem cluster's type.
type OnPremCluster_ClusterType int32

const (
	// The ClusterType is not set.
	OnPremCluster_CLUSTERTYPE_UNSPECIFIED OnPremCluster_ClusterType = 0
	// The ClusterType is bootstrap cluster.
	OnPremCluster_BOOTSTRAP OnPremCluster_ClusterType = 1
	// The ClusterType is baremetal hybrid cluster.
	OnPremCluster_HYBRID OnPremCluster_ClusterType = 2
	// The ClusterType is baremetal standalone cluster.
	OnPremCluster_STANDALONE OnPremCluster_ClusterType = 3
	// The ClusterType is user cluster.
	OnPremCluster_USER OnPremCluster_ClusterType = 4
)

// Enum value maps for OnPremCluster_ClusterType.
var (
	OnPremCluster_ClusterType_name = map[int32]string{
		0: "CLUSTERTYPE_UNSPECIFIED",
		1: "BOOTSTRAP",
		2: "HYBRID",
		3: "STANDALONE",
		4: "USER",
	}
	OnPremCluster_ClusterType_value = map[string]int32{
		"CLUSTERTYPE_UNSPECIFIED": 0,
		"BOOTSTRAP":               1,
		"HYBRID":                  2,
		"STANDALONE":              3,
		"USER":                    4,
	}
)

func (x OnPremCluster_ClusterType) Enum() *OnPremCluster_ClusterType {
	p := new(OnPremCluster_ClusterType)
	*p = x
	return p
}

func (x OnPremCluster_ClusterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OnPremCluster_ClusterType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_gkehub_v1_data_proto_enumTypes[4].Descriptor()
}

func (OnPremCluster_ClusterType) Type() protoreflect.EnumType {
	return &file_cloud_gkehub_v1_data_proto_enumTypes[4]
}

func (x OnPremCluster_ClusterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OnPremCluster_ClusterType.Descriptor instead.
func (OnPremCluster_ClusterType) EnumDescriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{16, 0}
}

// Code describes the state of a Membership resource.
type MembershipState_Code int32

const (
	// The code is not set.
	MembershipState_CODE_UNSPECIFIED MembershipState_Code = 0
	// The cluster is being registered.
	MembershipState_CREATING MembershipState_Code = 1
	// The cluster is registered.
	MembershipState_READY MembershipState_Code = 2
	// The cluster is being unregistered.
	MembershipState_DELETING MembershipState_Code = 3
	// The Membership is being updated.
	MembershipState_UPDATING MembershipState_Code = 4
	// The Membership is being updated by the Hub Service.
	MembershipState_SERVICE_UPDATING MembershipState_Code = 5
)

// Enum value maps for MembershipState_Code.
var (
	MembershipState_Code_name = map[int32]string{
		0: "CODE_UNSPECIFIED",
		1: "CREATING",
		2: "READY",
		3: "DELETING",
		4: "UPDATING",
		5: "SERVICE_UPDATING",
	}
	MembershipState_Code_value = map[string]int32{
		"CODE_UNSPECIFIED": 0,
		"CREATING":         1,
		"READY":            2,
		"DELETING":         3,
		"UPDATING":         4,
		"SERVICE_UPDATING": 5,
	}
)

func (x MembershipState_Code) Enum() *MembershipState_Code {
	p := new(MembershipState_Code)
	*p = x
	return p
}

func (x MembershipState_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MembershipState_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_gkehub_v1_data_proto_enumTypes[5].Descriptor()
}

func (MembershipState_Code) Type() protoreflect.EnumType {
	return &file_cloud_gkehub_v1_data_proto_enumTypes[5]
}

func (x MembershipState_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MembershipState_Code.Descriptor instead.
func (MembershipState_Code) EnumDescriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{21, 0}
}

// Feature represents the settings and status of any Hub Feature.
type Feature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The full, unique name of this Feature resource in the format
	// `projects/*/locations/*/features/*`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// GCP labels for this Feature.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only. State of the Feature resource itself.
	ResourceState *FeatureResourceState `protobuf:"bytes,3,opt,name=resource_state,json=resourceState,proto3" json:"resource_state,omitempty"`
	// Output only. The Hub-wide Feature state.
	State *CommonFeatureState `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	// Output only. Membership-specific Feature status. If this Feature does
	// report any per-Membership status, this field may be unused.
	//
	// The keys indicate which Membership the state is for, in the form:
	//
	// `projects/{p}/locations/{l}/memberships/{m}`
	//
	// Where {p} is the project number, {l} is a valid location and {m} is a valid
	// Membership in this project at that location. {p} MUST match the Feature's
	// project number.
	MembershipStates map[string]*MembershipFeatureState `protobuf:"bytes,7,rep,name=membership_states,json=membershipStates,proto3" json:"membership_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only. When the Feature resource was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. When the Feature resource was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. When the Feature resource was deleted.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Output only. Scope-specific Feature status. If this Feature does
	// report any per-Scope status, this field may be unused.
	//
	// The keys indicate which Scope the state is for, in the form:
	//
	// `projects/{p}/locations/global/scopes/{s}`
	//
	// Where {p} is the project, {s} is a valid Scope in this project.
	// {p} WILL match the Feature's project.
	ScopeStates map[string]*ScopeFeatureState `protobuf:"bytes,13,rep,name=scope_states,json=scopeStates,proto3" json:"scope_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Feature) Reset() {
	*x = Feature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_gkehub_v1_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Feature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feature) ProtoMessage() {}

func (x *Feature) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkehub_v1_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feature.ProtoReflect.Descriptor instead.
func (*Feature) Descriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{0}
}

func (x *Feature) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Feature) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Feature) GetResourceState() *FeatureResourceState {
	if x != nil {
		return x.ResourceState
	}
	return nil
}

func (x *Feature) GetState() *CommonFeatureState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Feature) GetMembershipStates() map[string]*MembershipFeatureState {
	if x != nil {
		return x.MembershipStates
	}
	return nil
}

func (x *Feature) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Feature) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Feature) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *Feature) GetScopeStates() map[string]*ScopeFeatureState {
	if x != nil {
		return x.ScopeStates
	}
	return nil
}

// FeatureResourceState describes the state of a Feature *resource* in the
// GkeHub API. See `FeatureState` for the "running state" of the Feature in the
// Hub and across Memberships.
type FeatureResourceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current state of the Feature resource in the Hub API.
	State FeatureResourceState_State `protobuf:"varint,1,opt,name=state,proto3,enum=google.events.cloud.gkehub.v1.FeatureResourceState_State" json:"state,omitempty"`
}

func (x *FeatureResourceState) Reset() {
	*x = FeatureResourceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_gkehub_v1_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureResourceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureResourceState) ProtoMessage() {}

func (x *FeatureResourceState) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkehub_v1_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureResourceState.ProtoReflect.Descriptor instead.
func (*FeatureResourceState) Descriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{1}
}

func (x *FeatureResourceState) GetState() FeatureResourceState_State {
	if x != nil {
		return x.State
	}
	return FeatureResourceState_STATE_UNSPECIFIED
}

// FeatureState describes the high-level state of a Feature. It may be used to
// describe a Feature's state at the environ-level, or per-membershop, depending
// on the context.
type FeatureState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The high-level, machine-readable status of this Feature.
	Code FeatureState_Code `protobuf:"varint,1,opt,name=code,proto3,enum=google.events.cloud.gkehub.v1.FeatureState_Code" json:"code,omitempty"`
	// A human-readable description of the current status.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The time this status and any related Feature-specific details were updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *FeatureState) Reset() {
	*x = FeatureState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_gkehub_v1_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureState) ProtoMessage() {}

func (x *FeatureState) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkehub_v1_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureState.ProtoReflect.Descriptor instead.
func (*FeatureState) Descriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{2}
}

func (x *FeatureState) GetCode() FeatureState_Code {
	if x != nil {
		return x.Code
	}
	return FeatureState_CODE_UNSPECIFIED
}

func (x *FeatureState) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FeatureState) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// CommonFeatureState contains Hub-wide Feature status information.
type CommonFeatureState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The "running state" of the Feature in this Hub.
	State *FeatureState `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *CommonFeatureState) Reset() {
	*x = CommonFeatureState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_gkehub_v1_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonFeatureState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonFeatureState) ProtoMessage() {}

func (x *CommonFeatureState) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkehub_v1_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonFeatureState.ProtoReflect.Descriptor instead.
func (*CommonFeatureState) Descriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{3}
}

func (x *CommonFeatureState) GetState() *FeatureState {
	if x != nil {
		return x.State
	}
	return nil
}

// ScopeFeatureState contains Scope-wide Feature status information.
type ScopeFeatureState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The "running state" of the Feature in this Scope.
	State *FeatureState `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ScopeFeatureState) Reset() {
	*x = ScopeFeatureState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_gkehub_v1_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopeFeatureState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopeFeatureState) ProtoMessage() {}

func (x *ScopeFeatureState) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkehub_v1_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopeFeatureState.ProtoReflect.Descriptor instead.
func (*ScopeFeatureState) Descriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{4}
}

func (x *ScopeFeatureState) GetState() *FeatureState {
	if x != nil {
		return x.State
	}
	return nil
}

// MembershipFeatureState contains Feature status information for a single
// Membership.
type MembershipFeatureState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The high-level state of this Feature for a single membership.
	State *FeatureState `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *MembershipFeatureState) Reset() {
	*x = MembershipFeatureState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_gkehub_v1_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MembershipFeatureState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembershipFeatureState) ProtoMessage() {}

func (x *MembershipFeatureState) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkehub_v1_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembershipFeatureState.ProtoReflect.Descriptor instead.
func (*MembershipFeatureState) Descriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{5}
}

func (x *MembershipFeatureState) GetState() *FeatureState {
	if x != nil {
		return x.State
	}
	return nil
}

// Scope represents a Scope in a Fleet.
type Scope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name for the scope
	// `projects/{project}/locations/{location}/scopes/{scope}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Google-generated UUID for this resource. This is unique across
	// all scope resources. If a scope resource is deleted and another resource
	// with the same name is created, it gets a different uid.
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// Output only. When the scope was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. When the scope was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. When the scope was deleted.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Output only. State of the scope resource.
	State *ScopeLifecycleState `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Scope) Reset() {
	*x = Scope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_gkehub_v1_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope) ProtoMessage() {}

func (x *Scope) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkehub_v1_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope.ProtoReflect.Descriptor instead.
func (*Scope) Descriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{6}
}

func (x *Scope) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Scope) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Scope) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Scope) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Scope) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *Scope) GetState() *ScopeLifecycleState {
	if x != nil {
		return x.State
	}
	return nil
}

// ScopeLifecycleState describes the state of a Scope resource.
type ScopeLifecycleState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The current state of the scope resource.
	Code ScopeLifecycleState_Code `protobuf:"varint,1,opt,name=code,proto3,enum=google.events.cloud.gkehub.v1.ScopeLifecycleState_Code" json:"code,omitempty"`
}

func (x *ScopeLifecycleState) Reset() {
	*x = ScopeLifecycleState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_gkehub_v1_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopeLifecycleState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopeLifecycleState) ProtoMessage() {}

func (x *ScopeLifecycleState) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkehub_v1_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopeLifecycleState.ProtoReflect.Descriptor instead.
func (*ScopeLifecycleState) Descriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{7}
}

func (x *ScopeLifecycleState) GetCode() ScopeLifecycleState_Code {
	if x != nil {
		return x.Code
	}
	return ScopeLifecycleState_CODE_UNSPECIFIED
}

// MembershipBinding is a subresource of a Membership, representing
// what Fleet Scopes (or other, future Fleet resources) a Membership is bound
// to.
type MembershipBinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// What type of membershipbinding this is.
	//
	// Types that are assignable to Target:
	//
	//	*MembershipBinding_Scope
	//	*MembershipBinding_Fleet
	Target isMembershipBinding_Target `protobuf_oneof:"target"`
	// The resource name for the membershipbinding itself
	// `projects/{project}/locations/{location}/memberships/{membership}/bindings/{membershipbinding}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Google-generated UUID for this resource. This is unique across
	// all membershipbinding resources. If a membershipbinding resource is deleted
	// and another resource with the same name is created, it gets a different
	// uid.
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// Output only. When the membership binding was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. When the membership binding was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. When the membership binding was deleted.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Output only. State of the membership binding resource.
	State *MembershipBindingLifecycleState `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *MembershipBinding) Reset() {
	*x = MembershipBinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_gkehub_v1_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MembershipBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembershipBinding) ProtoMessage() {}

func (x *MembershipBinding) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkehub_v1_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembershipBinding.ProtoReflect.Descriptor instead.
func (*MembershipBinding) Descriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{8}
}

func (m *MembershipBinding) GetTarget() isMembershipBinding_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *MembershipBinding) GetScope() string {
	if x, ok := x.GetTarget().(*MembershipBinding_Scope); ok {
		return x.Scope
	}
	return ""
}

func (x *MembershipBinding) GetFleet() bool {
	if x, ok := x.GetTarget().(*MembershipBinding_Fleet); ok {
		return x.Fleet
	}
	return false
}

func (x *MembershipBinding) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MembershipBinding) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *MembershipBinding) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *MembershipBinding) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *MembershipBinding) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *MembershipBinding) GetState() *MembershipBindingLifecycleState {
	if x != nil {
		return x.State
	}
	return nil
}

type isMembershipBinding_Target interface {
	isMembershipBinding_Target()
}

type MembershipBinding_Scope struct {
	// A Workspace resource name in the format
	// `projects/*/locations/*/scopes/*`.
	Scope string `protobuf:"bytes,3,opt,name=scope,proto3,oneof"`
}

type MembershipBinding_Fleet struct {
	// Whether the membershipbinding is Fleet-wide; true means that this
	// Membership should be bound to all Namespaces in this entire Fleet.
	Fleet bool `protobuf:"varint,4,opt,name=fleet,proto3,oneof"`
}

func (*MembershipBinding_Scope) isMembershipBinding_Target() {}

func (*MembershipBinding_Fleet) isMembershipBinding_Target() {}

// MembershipBindingLifecycleState describes the state of a Binding resource.
type MembershipBindingLifecycleState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The current state of the MembershipBinding resource.
	Code MembershipBindingLifecycleState_Code `protobuf:"varint,1,opt,name=code,proto3,enum=google.events.cloud.gkehub.v1.MembershipBindingLifecycleState_Code" json:"code,omitempty"`
}

func (x *MembershipBindingLifecycleState) Reset() {
	*x = MembershipBindingLifecycleState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_gkehub_v1_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MembershipBindingLifecycleState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembershipBindingLifecycleState) ProtoMessage() {}

func (x *MembershipBindingLifecycleState) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkehub_v1_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembershipBindingLifecycleState.ProtoReflect.Descriptor instead.
func (*MembershipBindingLifecycleState) Descriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{9}
}

func (x *MembershipBindingLifecycleState) GetCode() MembershipBindingLifecycleState_Code {
	if x != nil {
		return x.Code
	}
	return MembershipBindingLifecycleState_CODE_UNSPECIFIED
}

// Membership contains information about a member cluster.
type Membership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of resource represented by this Membership
	//
	// Types that are assignable to Type:
	//
	//	*Membership_Endpoint
	Type isMembership_Type `protobuf_oneof:"type"`
	// Output only. The full, unique name of this Membership resource in the
	// format `projects/*/locations/*/memberships/{membership_id}`, set during
	// creation.
	//
	// `membership_id` must be a valid RFC 1123 compliant DNS label:
	//
	//  1. At most 63 characters in length
	//  2. It must consist of lower case alphanumeric characters or `-`
	//  3. It must start and end with an alphanumeric character
	//
	// Which can be expressed as the regex: `[a-z0-9]([-a-z0-9]*[a-z0-9])?`,
	// with a maximum length of 63 characters.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. GCP labels for this membership.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only. Description of this membership, limited to 63 characters.
	// Must match the regex: `[a-zA-Z0-9][a-zA-Z0-9_\-\.\ ]*`
	//
	// This field is present for legacy purposes.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. State of the Membership resource.
	State *MembershipState `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	// Output only. When the Membership was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. When the Membership was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. When the Membership was deleted.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Optional. An externally-generated and managed ID for this Membership. This
	// ID may be modified after creation, but this is not recommended.
	//
	// The ID must match the regex: `[a-zA-Z0-9][a-zA-Z0-9_\-\.]*`
	//
	// If this Membership represents a Kubernetes cluster, this value should be
	// set to the UID of the `kube-system` namespace object.
	ExternalId string `protobuf:"bytes,9,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	// Output only. For clusters using Connect, the timestamp of the most recent
	// connection established with Google Cloud. This time is updated every
	// several minutes, not continuously. For clusters that do not use GKE
	// Connect, or that have never connected successfully, this field will be
	// unset.
	LastConnectionTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=last_connection_time,json=lastConnectionTime,proto3" json:"last_connection_time,omitempty"`
	// Output only. Google-generated UUID for this resource. This is unique across
	// all Membership resources. If a Membership resource is deleted and another
	// resource with the same name is created, it gets a different unique_id.
	UniqueId string `protobuf:"bytes,11,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	// Optional. How to identify workloads from this Membership.
	// See the documentation on Workload Identity for more details:
	// https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
	Authority *Authority `protobuf:"bytes,12,opt,name=authority,proto3" json:"authority,omitempty"`
}

func (x *Membership) Reset() {
	*x = Membership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_gkehub_v1_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Membership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Membership) ProtoMessage() {}

func (x *Membership) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkehub_v1_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Membership.ProtoReflect.Descriptor instead.
func (*Membership) Descriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{10}
}

func (m *Membership) GetType() isMembership_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Membership) GetEndpoint() *MembershipEndpoint {
	if x, ok := x.GetType().(*Membership_Endpoint); ok {
		return x.Endpoint
	}
	return nil
}

func (x *Membership) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Membership) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Membership) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Membership) GetState() *MembershipState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Membership) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Membership) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Membership) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *Membership) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *Membership) GetLastConnectionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastConnectionTime
	}
	return nil
}

func (x *Membership) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *Membership) GetAuthority() *Authority {
	if x != nil {
		return x.Authority
	}
	return nil
}

type isMembership_Type interface {
	isMembership_Type()
}

type Membership_Endpoint struct {
	// Optional. Endpoint information to reach this member.
	Endpoint *MembershipEndpoint `protobuf:"bytes,4,opt,name=endpoint,proto3,oneof"`
}

func (*Membership_Endpoint) isMembership_Type() {}

// MembershipEndpoint contains information needed to contact a Kubernetes API,
// endpoint and any additional Kubernetes metadata.
type MembershipEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster information of the registered cluster.
	//
	// Types that are assignable to Type:
	//
	//	*MembershipEndpoint_GkeCluster
	//	*MembershipEndpoint_OnPremCluster
	//	*MembershipEndpoint_MultiCloudCluster
	//	*MembershipEndpoint_EdgeCluster
	//	*MembershipEndpoint_ApplianceCluster
	Type isMembershipEndpoint_Type `protobuf_oneof:"type"`
	// Output only. Useful Kubernetes-specific metadata.
	KubernetesMetadata *KubernetesMetadata `protobuf:"bytes,2,opt,name=kubernetes_metadata,json=kubernetesMetadata,proto3" json:"kubernetes_metadata,omitempty"`
	// Optional. The in-cluster Kubernetes Resources that should be applied for a
	// correctly registered cluster, in the steady state. These resources:
	//
	//   - Ensure that the cluster is exclusively registered to one and only one
	//     Hub Membership.
	//   - Propagate Workload Pool Information available in the Membership
	//     Authority field.
	//   - Ensure proper initial configuration of default Hub Features.
	KubernetesResource *KubernetesResource `protobuf:"bytes,3,opt,name=kubernetes_resource,json=kubernetesResource,proto3" json:"kubernetes_resource,omitempty"`
	// Output only. Whether the lifecycle of this membership is managed by a
	// google cluster platform service.
	GoogleManaged bool `protobuf:"varint,8,opt,name=google_managed,json=googleManaged,proto3" json:"google_managed,omitempty"`
}

func (x *MembershipEndpoint) Reset() {
	*x = MembershipEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_gkehub_v1_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MembershipEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembershipEndpoint) ProtoMessage() {}

func (x *MembershipEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkehub_v1_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembershipEndpoint.ProtoReflect.Descriptor instead.
func (*MembershipEndpoint) Descriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{11}
}

func (m *MembershipEndpoint) GetType() isMembershipEndpoint_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *MembershipEndpoint) GetGkeCluster() *GkeCluster {
	if x, ok := x.GetType().(*MembershipEndpoint_GkeCluster); ok {
		return x.GkeCluster
	}
	return nil
}

func (x *MembershipEndpoint) GetOnPremCluster() *OnPremCluster {
	if x, ok := x.GetType().(*MembershipEndpoint_OnPremCluster); ok {
		return x.OnPremCluster
	}
	return nil
}

func (x *MembershipEndpoint) GetMultiCloudCluster() *MultiCloudCluster {
	if x, ok := x.GetType().(*MembershipEndpoint_MultiCloudCluster); ok {
		return x.MultiCloudCluster
	}
	return nil
}

func (x *MembershipEndpoint) GetEdgeCluster() *EdgeCluster {
	if x, ok := x.GetType().(*MembershipEndpoint_EdgeCluster); ok {
		return x.EdgeCluster
	}
	return nil
}

func (x *MembershipEndpoint) GetApplianceCluster() *ApplianceCluster {
	if x, ok := x.GetType().(*MembershipEndpoint_ApplianceCluster); ok {
		return x.ApplianceCluster
	}
	return nil
}

func (x *MembershipEndpoint) GetKubernetesMetadata() *KubernetesMetadata {
	if x != nil {
		return x.KubernetesMetadata
	}
	return nil
}

func (x *MembershipEndpoint) GetKubernetesResource() *KubernetesResource {
	if x != nil {
		return x.KubernetesResource
	}
	return nil
}

func (x *MembershipEndpoint) GetGoogleManaged() bool {
	if x != nil {
		return x.GoogleManaged
	}
	return false
}

type isMembershipEndpoint_Type interface {
	isMembershipEndpoint_Type()
}

type MembershipEndpoint_GkeCluster struct {
	// Optional. Specific information for a GKE-on-GCP cluster.
	GkeCluster *GkeCluster `protobuf:"bytes,1,opt,name=gke_cluster,json=gkeCluster,proto3,oneof"`
}

type MembershipEndpoint_OnPremCluster struct {
	// Optional. Specific information for a GKE On-Prem cluster. An onprem
	// user-cluster who has no resourceLink is not allowed to use this field, it
	// should have a nil "type" instead.
	OnPremCluster *OnPremCluster `protobuf:"bytes,4,opt,name=on_prem_cluster,json=onPremCluster,proto3,oneof"`
}

type MembershipEndpoint_MultiCloudCluster struct {
	// Optional. Specific information for a GKE Multi-Cloud cluster.
	MultiCloudCluster *MultiCloudCluster `protobuf:"bytes,5,opt,name=multi_cloud_cluster,json=multiCloudCluster,proto3,oneof"`
}

type MembershipEndpoint_EdgeCluster struct {
	// Optional. Specific information for a Google Edge cluster.
	EdgeCluster *EdgeCluster `protobuf:"bytes,6,opt,name=edge_cluster,json=edgeCluster,proto3,oneof"`
}

type MembershipEndpoint_ApplianceCluster struct {
	// Optional. Specific information for a GDC Edge Appliance cluster.
	ApplianceCluster *ApplianceCluster `protobuf:"bytes,7,opt,name=appliance_cluster,json=applianceCluster,proto3,oneof"`
}

func (*MembershipEndpoint_GkeCluster) isMembershipEndpoint_Type() {}

func (*MembershipEndpoint_OnPremCluster) isMembershipEndpoint_Type() {}

func (*MembershipEndpoint_MultiCloudCluster) isMembershipEndpoint_Type() {}

func (*MembershipEndpoint_EdgeCluster) isMembershipEndpoint_Type() {}

func (*MembershipEndpoint_ApplianceCluster) isMembershipEndpoint_Type() {}

// KubernetesResource contains the YAML manifests and configuration for
// Membership Kubernetes resources in the cluster. After CreateMembership or
// UpdateMembership, these resources should be re-applied in the cluster.
type KubernetesResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Additional Kubernetes resources that need to be applied to the
	// cluster after Membership creation, and after every update.
	//
	// This field is only populated in the Membership returned from a successful
	// long-running operation from CreateMembership or UpdateMembership. It is not
	// populated during normal GetMembership or ListMemberships requests. To get
	// the resource manifest after the initial registration, the caller should
	// make a UpdateMembership call with an empty field mask.
	MembershipResources []*ResourceManifest `protobuf:"bytes,2,rep,name=membership_resources,json=membershipResources,proto3" json:"membership_resources,omitempty"`
	// Output only. The Kubernetes resources for installing the GKE Connect agent
	//
	// This field is only populated in the Membership returned from a successful
	// long-running operation from CreateMembership or UpdateMembership. It is not
	// populated during normal GetMembership or ListMemberships requests. To get
	// the resource manifest after the initial registration, the caller should
	// make a UpdateMembership call with an empty field mask.
	ConnectResources []*ResourceManifest `protobuf:"bytes,3,rep,name=connect_resources,json=connectResources,proto3" json:"connect_resources,omitempty"`
	// Optional. Options for Kubernetes resource generation.
	ResourceOptions *ResourceOptions `protobuf:"bytes,4,opt,name=resource_options,json=resourceOptions,proto3" json:"resource_options,omitempty"`
}

func (x *KubernetesResource) Reset() {
	*x = KubernetesResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_gkehub_v1_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesResource) ProtoMessage() {}

func (x *KubernetesResource) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkehub_v1_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesResource.ProtoReflect.Descriptor instead.
func (*KubernetesResource) Descriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{12}
}

func (x *KubernetesResource) GetMembershipResources() []*ResourceManifest {
	if x != nil {
		return x.MembershipResources
	}
	return nil
}

func (x *KubernetesResource) GetConnectResources() []*ResourceManifest {
	if x != nil {
		return x.ConnectResources
	}
	return nil
}

func (x *KubernetesResource) GetResourceOptions() *ResourceOptions {
	if x != nil {
		return x.ResourceOptions
	}
	return nil
}

// ResourceOptions represent options for Kubernetes resource generation.
type ResourceOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The Connect agent version to use for connect_resources. Defaults
	// to the latest GKE Connect version. The version must be a currently
	// supported version, obsolete versions will be rejected.
	ConnectVersion string `protobuf:"bytes,1,opt,name=connect_version,json=connectVersion,proto3" json:"connect_version,omitempty"`
	// Optional. Use `apiextensions/v1beta1` instead of `apiextensions/v1` for
	// CustomResourceDefinition resources.
	// This option should be set for clusters with Kubernetes apiserver versions
	// <1.16.
	V1Beta1Crd bool `protobuf:"varint,2,opt,name=v1beta1_crd,json=v1beta1Crd,proto3" json:"v1beta1_crd,omitempty"`
	// Optional. Major version of the Kubernetes cluster. This is only used to
	// determine which version to use for the CustomResourceDefinition resources,
	// `apiextensions/v1beta1` or`apiextensions/v1`.
	K8SVersion string `protobuf:"bytes,3,opt,name=k8s_version,json=k8sVersion,proto3" json:"k8s_version,omitempty"`
}

func (x *ResourceOptions) Reset() {
	*x = ResourceOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_gkehub_v1_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceOptions) ProtoMessage() {}

func (x *ResourceOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkehub_v1_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceOptions.ProtoReflect.Descriptor instead.
func (*ResourceOptions) Descriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{13}
}

func (x *ResourceOptions) GetConnectVersion() string {
	if x != nil {
		return x.ConnectVersion
	}
	return ""
}

func (x *ResourceOptions) GetV1Beta1Crd() bool {
	if x != nil {
		return x.V1Beta1Crd
	}
	return false
}

func (x *ResourceOptions) GetK8SVersion() string {
	if x != nil {
		return x.K8SVersion
	}
	return ""
}

// ResourceManifest represents a single Kubernetes resource to be applied to
// the cluster.
type ResourceManifest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// YAML manifest of the resource.
	Manifest string `protobuf:"bytes,1,opt,name=manifest,proto3" json:"manifest,omitempty"`
	// Whether the resource provided in the manifest is `cluster_scoped`.
	// If unset, the manifest is assumed to be namespace scoped.
	//
	// This field is used for REST mapping when applying the resource in a
	// cluster.
	ClusterScoped bool `protobuf:"varint,2,opt,name=cluster_scoped,json=clusterScoped,proto3" json:"cluster_scoped,omitempty"`
}

func (x *ResourceManifest) Reset() {
	*x = ResourceManifest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_gkehub_v1_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceManifest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceManifest) ProtoMessage() {}

func (x *ResourceManifest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkehub_v1_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceManifest.ProtoReflect.Descriptor instead.
func (*ResourceManifest) Descriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{14}
}

func (x *ResourceManifest) GetManifest() string {
	if x != nil {
		return x.Manifest
	}
	return ""
}

func (x *ResourceManifest) GetClusterScoped() bool {
	if x != nil {
		return x.ClusterScoped
	}
	return false
}

// GkeCluster contains information specific to GKE clusters.
type GkeCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Immutable. Self-link of the GCP resource for the GKE cluster. For example:
	//
	// //container.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster
	//
	// Zonal clusters are also supported.
	ResourceLink string `protobuf:"bytes,1,opt,name=resource_link,json=resourceLink,proto3" json:"resource_link,omitempty"`
	// Output only. If cluster_missing is set then it denotes that the GKE cluster
	// no longer exists in the GKE Control Plane.
	ClusterMissing bool `protobuf:"varint,2,opt,name=cluster_missing,json=clusterMissing,proto3" json:"cluster_missing,omitempty"`
}

func (x *GkeCluster) Reset() {
	*x = GkeCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_gkehub_v1_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GkeCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GkeCluster) ProtoMessage() {}

func (x *GkeCluster) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkehub_v1_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GkeCluster.ProtoReflect.Descriptor instead.
func (*GkeCluster) Descriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{15}
}

func (x *GkeCluster) GetResourceLink() string {
	if x != nil {
		return x.ResourceLink
	}
	return ""
}

func (x *GkeCluster) GetClusterMissing() bool {
	if x != nil {
		return x.ClusterMissing
	}
	return false
}

// OnPremCluster contains information specific to GKE On-Prem clusters.
type OnPremCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Immutable. Self-link of the GCP resource for the GKE On-Prem cluster. For
	// example:
	//
	//	//gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/vmwareClusters/my-cluster
	//	//gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/bareMetalClusters/my-cluster
	ResourceLink string `protobuf:"bytes,1,opt,name=resource_link,json=resourceLink,proto3" json:"resource_link,omitempty"`
	// Output only. If cluster_missing is set then it denotes that
	// API(gkeonprem.googleapis.com) resource for this GKE On-Prem cluster no
	// longer exists.
	ClusterMissing bool `protobuf:"varint,2,opt,name=cluster_missing,json=clusterMissing,proto3" json:"cluster_missing,omitempty"`
	// Immutable. Whether the cluster is an admin cluster.
	AdminCluster bool `protobuf:"varint,3,opt,name=admin_cluster,json=adminCluster,proto3" json:"admin_cluster,omitempty"`
	// Immutable. The on prem cluster's type.
	ClusterType OnPremCluster_ClusterType `protobuf:"varint,4,opt,name=cluster_type,json=clusterType,proto3,enum=google.events.cloud.gkehub.v1.OnPremCluster_ClusterType" json:"cluster_type,omitempty"`
}

func (x *OnPremCluster) Reset() {
	*x = OnPremCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_gkehub_v1_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnPremCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnPremCluster) ProtoMessage() {}

func (x *OnPremCluster) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkehub_v1_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnPremCluster.ProtoReflect.Descriptor instead.
func (*OnPremCluster) Descriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{16}
}

func (x *OnPremCluster) GetResourceLink() string {
	if x != nil {
		return x.ResourceLink
	}
	return ""
}

func (x *OnPremCluster) GetClusterMissing() bool {
	if x != nil {
		return x.ClusterMissing
	}
	return false
}

func (x *OnPremCluster) GetAdminCluster() bool {
	if x != nil {
		return x.AdminCluster
	}
	return false
}

func (x *OnPremCluster) GetClusterType() OnPremCluster_ClusterType {
	if x != nil {
		return x.ClusterType
	}
	return OnPremCluster_CLUSTERTYPE_UNSPECIFIED
}

// MultiCloudCluster contains information specific to GKE Multi-Cloud clusters.
type MultiCloudCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Immutable. Self-link of the GCP resource for the GKE Multi-Cloud cluster.
	// For example:
	//
	//	//gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/awsClusters/my-cluster
	//	//gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/azureClusters/my-cluster
	//	//gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/attachedClusters/my-cluster
	ResourceLink string `protobuf:"bytes,1,opt,name=resource_link,json=resourceLink,proto3" json:"resource_link,omitempty"`
	// Output only. If cluster_missing is set then it denotes that
	// API(gkemulticloud.googleapis.com) resource for this GKE Multi-Cloud cluster
	// no longer exists.
	ClusterMissing bool `protobuf:"varint,2,opt,name=cluster_missing,json=clusterMissing,proto3" json:"cluster_missing,omitempty"`
}

func (x *MultiCloudCluster) Reset() {
	*x = MultiCloudCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_gkehub_v1_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiCloudCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiCloudCluster) ProtoMessage() {}

func (x *MultiCloudCluster) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkehub_v1_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiCloudCluster.ProtoReflect.Descriptor instead.
func (*MultiCloudCluster) Descriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{17}
}

func (x *MultiCloudCluster) GetResourceLink() string {
	if x != nil {
		return x.ResourceLink
	}
	return ""
}

func (x *MultiCloudCluster) GetClusterMissing() bool {
	if x != nil {
		return x.ClusterMissing
	}
	return false
}

// EdgeCluster contains information specific to Google Edge Clusters.
type EdgeCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Immutable. Self-link of the GCP resource for the Edge Cluster. For
	// example:
	//
	// //edgecontainer.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster
	ResourceLink string `protobuf:"bytes,1,opt,name=resource_link,json=resourceLink,proto3" json:"resource_link,omitempty"`
}

func (x *EdgeCluster) Reset() {
	*x = EdgeCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_gkehub_v1_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeCluster) ProtoMessage() {}

func (x *EdgeCluster) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkehub_v1_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeCluster.ProtoReflect.Descriptor instead.
func (*EdgeCluster) Descriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{18}
}

func (x *EdgeCluster) GetResourceLink() string {
	if x != nil {
		return x.ResourceLink
	}
	return ""
}

// ApplianceCluster contains information specific to GDC Edge Appliance
// Clusters.
type ApplianceCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Immutable. Self-link of the GCP resource for the Appliance Cluster. For
	// example:
	//
	// //transferappliance.googleapis.com/projects/my-project/locations/us-west1-a/appliances/my-appliance
	ResourceLink string `protobuf:"bytes,1,opt,name=resource_link,json=resourceLink,proto3" json:"resource_link,omitempty"`
}

func (x *ApplianceCluster) Reset() {
	*x = ApplianceCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_gkehub_v1_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplianceCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplianceCluster) ProtoMessage() {}

func (x *ApplianceCluster) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkehub_v1_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplianceCluster.ProtoReflect.Descriptor instead.
func (*ApplianceCluster) Descriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{19}
}

func (x *ApplianceCluster) GetResourceLink() string {
	if x != nil {
		return x.ResourceLink
	}
	return ""
}

// KubernetesMetadata provides informational metadata for Memberships
// representing Kubernetes clusters.
type KubernetesMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Kubernetes API server version string as reported by
	// `/version`.
	KubernetesApiServerVersion string `protobuf:"bytes,1,opt,name=kubernetes_api_server_version,json=kubernetesApiServerVersion,proto3" json:"kubernetes_api_server_version,omitempty"`
	// Output only. Node providerID as reported by the first node in the list of
	// nodes on the Kubernetes endpoint. On Kubernetes platforms that support
	// zero-node clusters (like GKE-on-GCP), the node_count will be zero and the
	// node_provider_id will be empty.
	NodeProviderId string `protobuf:"bytes,2,opt,name=node_provider_id,json=nodeProviderId,proto3" json:"node_provider_id,omitempty"`
	// Output only. Node count as reported by Kubernetes nodes resources.
	NodeCount int32 `protobuf:"varint,3,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	// Output only. vCPU count as reported by Kubernetes nodes resources.
	VcpuCount int32 `protobuf:"varint,4,opt,name=vcpu_count,json=vcpuCount,proto3" json:"vcpu_count,omitempty"`
	// Output only. The total memory capacity as reported by the sum of all
	// Kubernetes nodes resources, defined in MB.
	MemoryMb int32 `protobuf:"varint,5,opt,name=memory_mb,json=memoryMb,proto3" json:"memory_mb,omitempty"`
	// Output only. The time at which these details were last updated. This
	// update_time is different from the Membership-level update_time since
	// EndpointDetails are updated internally for API consumers.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,100,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *KubernetesMetadata) Reset() {
	*x = KubernetesMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_gkehub_v1_data_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesMetadata) ProtoMessage() {}

func (x *KubernetesMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkehub_v1_data_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesMetadata.ProtoReflect.Descriptor instead.
func (*KubernetesMetadata) Descriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{20}
}

func (x *KubernetesMetadata) GetKubernetesApiServerVersion() string {
	if x != nil {
		return x.KubernetesApiServerVersion
	}
	return ""
}

func (x *KubernetesMetadata) GetNodeProviderId() string {
	if x != nil {
		return x.NodeProviderId
	}
	return ""
}

func (x *KubernetesMetadata) GetNodeCount() int32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *KubernetesMetadata) GetVcpuCount() int32 {
	if x != nil {
		return x.VcpuCount
	}
	return 0
}

func (x *KubernetesMetadata) GetMemoryMb() int32 {
	if x != nil {
		return x.MemoryMb
	}
	return 0
}

func (x *KubernetesMetadata) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// MembershipState describes the state of a Membership resource.
type MembershipState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The current state of the Membership resource.
	Code MembershipState_Code `protobuf:"varint,1,opt,name=code,proto3,enum=google.events.cloud.gkehub.v1.MembershipState_Code" json:"code,omitempty"`
}

func (x *MembershipState) Reset() {
	*x = MembershipState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_gkehub_v1_data_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MembershipState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembershipState) ProtoMessage() {}

func (x *MembershipState) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkehub_v1_data_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembershipState.ProtoReflect.Descriptor instead.
func (*MembershipState) Descriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{21}
}

func (x *MembershipState) GetCode() MembershipState_Code {
	if x != nil {
		return x.Code
	}
	return MembershipState_CODE_UNSPECIFIED
}

// Authority encodes how Google will recognize identities from this Membership.
// See the workload identity documentation for more details:
// https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
type Authority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. A JSON Web Token (JWT) issuer URI. `issuer` must start with
	// `https://` and be a valid URL with length <2000 characters.
	//
	// If set, then Google will allow valid OIDC tokens from this issuer to
	// authenticate within the workload_identity_pool. OIDC discovery will be
	// performed on this URI to validate tokens from the issuer.
	//
	// Clearing `issuer` disables Workload Identity. `issuer` cannot be directly
	// modified; it must be cleared (and Workload Identity disabled) before using
	// a new issuer (and re-enabling Workload Identity).
	Issuer string `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// Output only. The name of the workload identity pool in which `issuer` will
	// be recognized.
	//
	// There is a single Workload Identity Pool per Hub that is shared
	// between all Memberships that belong to that Hub. For a Hub hosted in
	// {PROJECT_ID}, the workload pool format is `{PROJECT_ID}.hub.id.goog`,
	// although this is subject to change in newer versions of this API.
	WorkloadIdentityPool string `protobuf:"bytes,2,opt,name=workload_identity_pool,json=workloadIdentityPool,proto3" json:"workload_identity_pool,omitempty"`
	// Output only. An identity provider that reflects the `issuer` in the
	// workload identity pool.
	IdentityProvider string `protobuf:"bytes,3,opt,name=identity_provider,json=identityProvider,proto3" json:"identity_provider,omitempty"`
	// Optional. OIDC verification keys for this Membership in JWKS format (RFC
	// 7517).
	//
	// When this field is set, OIDC discovery will NOT be performed on `issuer`,
	// and instead OIDC tokens will be validated using this field.
	OidcJwks []byte `protobuf:"bytes,4,opt,name=oidc_jwks,json=oidcJwks,proto3" json:"oidc_jwks,omitempty"`
}

func (x *Authority) Reset() {
	*x = Authority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_gkehub_v1_data_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authority) ProtoMessage() {}

func (x *Authority) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkehub_v1_data_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authority.ProtoReflect.Descriptor instead.
func (*Authority) Descriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{22}
}

func (x *Authority) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *Authority) GetWorkloadIdentityPool() string {
	if x != nil {
		return x.WorkloadIdentityPool
	}
	return ""
}

func (x *Authority) GetIdentityProvider() string {
	if x != nil {
		return x.IdentityProvider
	}
	return ""
}

func (x *Authority) GetOidcJwks() []byte {
	if x != nil {
		return x.OidcJwks
	}
	return nil
}

// The data within all Scope events.
type ScopeEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The Scope event payload. Unset for deletion events.
	Payload *Scope `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
}

func (x *ScopeEventData) Reset() {
	*x = ScopeEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_gkehub_v1_data_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopeEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopeEventData) ProtoMessage() {}

func (x *ScopeEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkehub_v1_data_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopeEventData.ProtoReflect.Descriptor instead.
func (*ScopeEventData) Descriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{23}
}

func (x *ScopeEventData) GetPayload() *Scope {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all Membership events.
type MembershipEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The Membership event payload. Unset for deletion events.
	Payload *Membership `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
}

func (x *MembershipEventData) Reset() {
	*x = MembershipEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_gkehub_v1_data_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MembershipEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembershipEventData) ProtoMessage() {}

func (x *MembershipEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkehub_v1_data_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembershipEventData.ProtoReflect.Descriptor instead.
func (*MembershipEventData) Descriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{24}
}

func (x *MembershipEventData) GetPayload() *Membership {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all Feature events.
type FeatureEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The Feature event payload. Unset for deletion events.
	Payload *Feature `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
}

func (x *FeatureEventData) Reset() {
	*x = FeatureEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_gkehub_v1_data_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureEventData) ProtoMessage() {}

func (x *FeatureEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkehub_v1_data_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureEventData.ProtoReflect.Descriptor instead.
func (*FeatureEventData) Descriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{25}
}

func (x *FeatureEventData) GetPayload() *Feature {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all MembershipBinding events.
type MembershipBindingEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The MembershipBinding event payload. Unset for deletion events.
	Payload *MembershipBinding `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
}

func (x *MembershipBindingEventData) Reset() {
	*x = MembershipBindingEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_gkehub_v1_data_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MembershipBindingEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembershipBindingEventData) ProtoMessage() {}

func (x *MembershipBindingEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkehub_v1_data_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembershipBindingEventData.ProtoReflect.Descriptor instead.
func (*MembershipBindingEventData) Descriptor() ([]byte, []int) {
	return file_cloud_gkehub_v1_data_proto_rawDescGZIP(), []int{26}
}

func (x *MembershipBindingEventData) GetPayload() *MembershipBinding {
	if x != nil {
		return x.Payload
	}
	return nil
}

var File_cloud_gkehub_v1_data_proto protoreflect.FileDescriptor

var file_cloud_gkehub_v1_data_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5, 0x07, 0x0a,
	0x07, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x69, 0x0a,
	0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67,
	0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x5a, 0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68,
	0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7a, 0x0a, 0x15, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x70, 0x0a, 0x10, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b,
	0x65, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xd4, 0x01, 0x0a, 0x14, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x6b,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x22, 0xf1, 0x01, 0x0a, 0x0c,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x3c, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22,
	0x57, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x56, 0x0a, 0x11, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x5b, 0x0a, 0x16, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xae, 0x02,
	0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x3b, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xb5,
	0x01, 0x0a, 0x13, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x22, 0x80, 0x03, 0x0a, 0x11, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67,
	0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x1f, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x66,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x22, 0xf6, 0x05, 0x0a, 0x0a, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x4f, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x14,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xc6, 0x05, 0x0a, 0x12, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x0b, 0x67, 0x6b, 0x65,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x6b, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0f, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x65, 0x6d, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0d, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x62, 0x0a, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x13, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x62, 0x0a, 0x13, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68,
	0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb1, 0x02, 0x0a, 0x12,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x62, 0x0a, 0x14, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x52, 0x13, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x7c, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5f, 0x63, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x43, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x6b, 0x38, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6b, 0x38, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a,
	0x10, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x64, 0x22, 0x5a, 0x0a, 0x0a, 0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x22, 0xc0, 0x02, 0x0a, 0x0d, 0x4f, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x50, 0x72,
	0x65, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x5f, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54, 0x52, 0x41, 0x50, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x41, 0x4c, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45,
	0x52, 0x10, 0x04, 0x22, 0x61, 0x0a, 0x11, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0x32, 0x0a, 0x0b, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x37, 0x0a, 0x10, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x22, 0x99, 0x02, 0x0a, 0x12, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x1d, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x10, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x63, 0x70, 0x75, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x63, 0x70, 0x75,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x6d, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x4d, 0x62, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xc3, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x67, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x03, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x50, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x05, 0x22, 0xa3, 0x01, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6f,
	0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x6a, 0x77, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x6f, 0x69, 0x64, 0x63, 0x4a, 0x77, 0x6b, 0x73, 0x22, 0x61, 0x0a, 0x0e, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x6b,
	0x0a, 0x13, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65,
	0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x65, 0x0a, 0x10, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x45, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x79, 0x0a, 0x1a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x4f, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6d, 0xaa,
	0x02, 0x26, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47,
	0x6b, 0x65, 0x48, 0x75, 0x62, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1d, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x47,
	0x6b, 0x65, 0x48, 0x75, 0x62, 0x5c, 0x56, 0x31, 0xea, 0x02, 0x21, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x3a, 0x3a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x3a, 0x3a, 0x47, 0x6b, 0x65, 0x48, 0x75, 0x62, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_gkehub_v1_data_proto_rawDescOnce sync.Once
	file_cloud_gkehub_v1_data_proto_rawDescData = file_cloud_gkehub_v1_data_proto_rawDesc
)

func file_cloud_gkehub_v1_data_proto_rawDescGZIP() []byte {
	file_cloud_gkehub_v1_data_proto_rawDescOnce.Do(func() {
		file_cloud_gkehub_v1_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_gkehub_v1_data_proto_rawDescData)
	})
	return file_cloud_gkehub_v1_data_proto_rawDescData
}

var file_cloud_gkehub_v1_data_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_cloud_gkehub_v1_data_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_cloud_gkehub_v1_data_proto_goTypes = []any{
	(FeatureResourceState_State)(0),           // 0: google.events.cloud.gkehub.v1.FeatureResourceState.State
	(FeatureState_Code)(0),                    // 1: google.events.cloud.gkehub.v1.FeatureState.Code
	(ScopeLifecycleState_Code)(0),             // 2: google.events.cloud.gkehub.v1.ScopeLifecycleState.Code
	(MembershipBindingLifecycleState_Code)(0), // 3: google.events.cloud.gkehub.v1.MembershipBindingLifecycleState.Code
	(OnPremCluster_ClusterType)(0),            // 4: google.events.cloud.gkehub.v1.OnPremCluster.ClusterType
	(MembershipState_Code)(0),                 // 5: google.events.cloud.gkehub.v1.MembershipState.Code
	(*Feature)(nil),                           // 6: google.events.cloud.gkehub.v1.Feature
	(*FeatureResourceState)(nil),              // 7: google.events.cloud.gkehub.v1.FeatureResourceState
	(*FeatureState)(nil),                      // 8: google.events.cloud.gkehub.v1.FeatureState
	(*CommonFeatureState)(nil),                // 9: google.events.cloud.gkehub.v1.CommonFeatureState
	(*ScopeFeatureState)(nil),                 // 10: google.events.cloud.gkehub.v1.ScopeFeatureState
	(*MembershipFeatureState)(nil),            // 11: google.events.cloud.gkehub.v1.MembershipFeatureState
	(*Scope)(nil),                             // 12: google.events.cloud.gkehub.v1.Scope
	(*ScopeLifecycleState)(nil),               // 13: google.events.cloud.gkehub.v1.ScopeLifecycleState
	(*MembershipBinding)(nil),                 // 14: google.events.cloud.gkehub.v1.MembershipBinding
	(*MembershipBindingLifecycleState)(nil),   // 15: google.events.cloud.gkehub.v1.MembershipBindingLifecycleState
	(*Membership)(nil),                        // 16: google.events.cloud.gkehub.v1.Membership
	(*MembershipEndpoint)(nil),                // 17: google.events.cloud.gkehub.v1.MembershipEndpoint
	(*KubernetesResource)(nil),                // 18: google.events.cloud.gkehub.v1.KubernetesResource
	(*ResourceOptions)(nil),                   // 19: google.events.cloud.gkehub.v1.ResourceOptions
	(*ResourceManifest)(nil),                  // 20: google.events.cloud.gkehub.v1.ResourceManifest
	(*GkeCluster)(nil),                        // 21: google.events.cloud.gkehub.v1.GkeCluster
	(*OnPremCluster)(nil),                     // 22: google.events.cloud.gkehub.v1.OnPremCluster
	(*MultiCloudCluster)(nil),                 // 23: google.events.cloud.gkehub.v1.MultiCloudCluster
	(*EdgeCluster)(nil),                       // 24: google.events.cloud.gkehub.v1.EdgeCluster
	(*ApplianceCluster)(nil),                  // 25: google.events.cloud.gkehub.v1.ApplianceCluster
	(*KubernetesMetadata)(nil),                // 26: google.events.cloud.gkehub.v1.KubernetesMetadata
	(*MembershipState)(nil),                   // 27: google.events.cloud.gkehub.v1.MembershipState
	(*Authority)(nil),                         // 28: google.events.cloud.gkehub.v1.Authority
	(*ScopeEventData)(nil),                    // 29: google.events.cloud.gkehub.v1.ScopeEventData
	(*MembershipEventData)(nil),               // 30: google.events.cloud.gkehub.v1.MembershipEventData
	(*FeatureEventData)(nil),                  // 31: google.events.cloud.gkehub.v1.FeatureEventData
	(*MembershipBindingEventData)(nil),        // 32: google.events.cloud.gkehub.v1.MembershipBindingEventData
	nil,                                       // 33: google.events.cloud.gkehub.v1.Feature.LabelsEntry
	nil,                                       // 34: google.events.cloud.gkehub.v1.Feature.MembershipStatesEntry
	nil,                                       // 35: google.events.cloud.gkehub.v1.Feature.ScopeStatesEntry
	nil,                                       // 36: google.events.cloud.gkehub.v1.Membership.LabelsEntry
	(*timestamppb.Timestamp)(nil),             // 37: google.protobuf.Timestamp
}
var file_cloud_gkehub_v1_data_proto_depIdxs = []int32{
	33, // 0: google.events.cloud.gkehub.v1.Feature.labels:type_name -> google.events.cloud.gkehub.v1.Feature.LabelsEntry
	7,  // 1: google.events.cloud.gkehub.v1.Feature.resource_state:type_name -> google.events.cloud.gkehub.v1.FeatureResourceState
	9,  // 2: google.events.cloud.gkehub.v1.Feature.state:type_name -> google.events.cloud.gkehub.v1.CommonFeatureState
	34, // 3: google.events.cloud.gkehub.v1.Feature.membership_states:type_name -> google.events.cloud.gkehub.v1.Feature.MembershipStatesEntry
	37, // 4: google.events.cloud.gkehub.v1.Feature.create_time:type_name -> google.protobuf.Timestamp
	37, // 5: google.events.cloud.gkehub.v1.Feature.update_time:type_name -> google.protobuf.Timestamp
	37, // 6: google.events.cloud.gkehub.v1.Feature.delete_time:type_name -> google.protobuf.Timestamp
	35, // 7: google.events.cloud.gkehub.v1.Feature.scope_states:type_name -> google.events.cloud.gkehub.v1.Feature.ScopeStatesEntry
	0,  // 8: google.events.cloud.gkehub.v1.FeatureResourceState.state:type_name -> google.events.cloud.gkehub.v1.FeatureResourceState.State
	1,  // 9: google.events.cloud.gkehub.v1.FeatureState.code:type_name -> google.events.cloud.gkehub.v1.FeatureState.Code
	37, // 10: google.events.cloud.gkehub.v1.FeatureState.update_time:type_name -> google.protobuf.Timestamp
	8,  // 11: google.events.cloud.gkehub.v1.CommonFeatureState.state:type_name -> google.events.cloud.gkehub.v1.FeatureState
	8,  // 12: google.events.cloud.gkehub.v1.ScopeFeatureState.state:type_name -> google.events.cloud.gkehub.v1.FeatureState
	8,  // 13: google.events.cloud.gkehub.v1.MembershipFeatureState.state:type_name -> google.events.cloud.gkehub.v1.FeatureState
	37, // 14: google.events.cloud.gkehub.v1.Scope.create_time:type_name -> google.protobuf.Timestamp
	37, // 15: google.events.cloud.gkehub.v1.Scope.update_time:type_name -> google.protobuf.Timestamp
	37, // 16: google.events.cloud.gkehub.v1.Scope.delete_time:type_name -> google.protobuf.Timestamp
	13, // 17: google.events.cloud.gkehub.v1.Scope.state:type_name -> google.events.cloud.gkehub.v1.ScopeLifecycleState
	2,  // 18: google.events.cloud.gkehub.v1.ScopeLifecycleState.code:type_name -> google.events.cloud.gkehub.v1.ScopeLifecycleState.Code
	37, // 19: google.events.cloud.gkehub.v1.MembershipBinding.create_time:type_name -> google.protobuf.Timestamp
	37, // 20: google.events.cloud.gkehub.v1.MembershipBinding.update_time:type_name -> google.protobuf.Timestamp
	37, // 21: google.events.cloud.gkehub.v1.MembershipBinding.delete_time:type_name -> google.protobuf.Timestamp
	15, // 22: google.events.cloud.gkehub.v1.MembershipBinding.state:type_name -> google.events.cloud.gkehub.v1.MembershipBindingLifecycleState
	3,  // 23: google.events.cloud.gkehub.v1.MembershipBindingLifecycleState.code:type_name -> google.events.cloud.gkehub.v1.MembershipBindingLifecycleState.Code
	17, // 24: google.events.cloud.gkehub.v1.Membership.endpoint:type_name -> google.events.cloud.gkehub.v1.MembershipEndpoint
	36, // 25: google.events.cloud.gkehub.v1.Membership.labels:type_name -> google.events.cloud.gkehub.v1.Membership.LabelsEntry
	27, // 26: google.events.cloud.gkehub.v1.Membership.state:type_name -> google.events.cloud.gkehub.v1.MembershipState
	37, // 27: google.events.cloud.gkehub.v1.Membership.create_time:type_name -> google.protobuf.Timestamp
	37, // 28: google.events.cloud.gkehub.v1.Membership.update_time:type_name -> google.protobuf.Timestamp
	37, // 29: google.events.cloud.gkehub.v1.Membership.delete_time:type_name -> google.protobuf.Timestamp
	37, // 30: google.events.cloud.gkehub.v1.Membership.last_connection_time:type_name -> google.protobuf.Timestamp
	28, // 31: google.events.cloud.gkehub.v1.Membership.authority:type_name -> google.events.cloud.gkehub.v1.Authority
	21, // 32: google.events.cloud.gkehub.v1.MembershipEndpoint.gke_cluster:type_name -> google.events.cloud.gkehub.v1.GkeCluster
	22, // 33: google.events.cloud.gkehub.v1.MembershipEndpoint.on_prem_cluster:type_name -> google.events.cloud.gkehub.v1.OnPremCluster
	23, // 34: google.events.cloud.gkehub.v1.MembershipEndpoint.multi_cloud_cluster:type_name -> google.events.cloud.gkehub.v1.MultiCloudCluster
	24, // 35: google.events.cloud.gkehub.v1.MembershipEndpoint.edge_cluster:type_name -> google.events.cloud.gkehub.v1.EdgeCluster
	25, // 36: google.events.cloud.gkehub.v1.MembershipEndpoint.appliance_cluster:type_name -> google.events.cloud.gkehub.v1.ApplianceCluster
	26, // 37: google.events.cloud.gkehub.v1.MembershipEndpoint.kubernetes_metadata:type_name -> google.events.cloud.gkehub.v1.KubernetesMetadata
	18, // 38: google.events.cloud.gkehub.v1.MembershipEndpoint.kubernetes_resource:type_name -> google.events.cloud.gkehub.v1.KubernetesResource
	20, // 39: google.events.cloud.gkehub.v1.KubernetesResource.membership_resources:type_name -> google.events.cloud.gkehub.v1.ResourceManifest
	20, // 40: google.events.cloud.gkehub.v1.KubernetesResource.connect_resources:type_name -> google.events.cloud.gkehub.v1.ResourceManifest
	19, // 41: google.events.cloud.gkehub.v1.KubernetesResource.resource_options:type_name -> google.events.cloud.gkehub.v1.ResourceOptions
	4,  // 42: google.events.cloud.gkehub.v1.OnPremCluster.cluster_type:type_name -> google.events.cloud.gkehub.v1.OnPremCluster.ClusterType
	37, // 43: google.events.cloud.gkehub.v1.KubernetesMetadata.update_time:type_name -> google.protobuf.Timestamp
	5,  // 44: google.events.cloud.gkehub.v1.MembershipState.code:type_name -> google.events.cloud.gkehub.v1.MembershipState.Code
	12, // 45: google.events.cloud.gkehub.v1.ScopeEventData.payload:type_name -> google.events.cloud.gkehub.v1.Scope
	16, // 46: google.events.cloud.gkehub.v1.MembershipEventData.payload:type_name -> google.events.cloud.gkehub.v1.Membership
	6,  // 47: google.events.cloud.gkehub.v1.FeatureEventData.payload:type_name -> google.events.cloud.gkehub.v1.Feature
	14, // 48: google.events.cloud.gkehub.v1.MembershipBindingEventData.payload:type_name -> google.events.cloud.gkehub.v1.MembershipBinding
	11, // 49: google.events.cloud.gkehub.v1.Feature.MembershipStatesEntry.value:type_name -> google.events.cloud.gkehub.v1.MembershipFeatureState
	10, // 50: google.events.cloud.gkehub.v1.Feature.ScopeStatesEntry.value:type_name -> google.events.cloud.gkehub.v1.ScopeFeatureState
	51, // [51:51] is the sub-list for method output_type
	51, // [51:51] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_cloud_gkehub_v1_data_proto_init() }
func file_cloud_gkehub_v1_data_proto_init() {
	if File_cloud_gkehub_v1_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_gkehub_v1_data_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Feature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_gkehub_v1_data_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*FeatureResourceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_gkehub_v1_data_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*FeatureState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_gkehub_v1_data_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CommonFeatureState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_gkehub_v1_data_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ScopeFeatureState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_gkehub_v1_data_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*MembershipFeatureState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_gkehub_v1_data_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Scope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_gkehub_v1_data_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ScopeLifecycleState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_gkehub_v1_data_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*MembershipBinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_gkehub_v1_data_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*MembershipBindingLifecycleState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_gkehub_v1_data_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Membership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_gkehub_v1_data_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*MembershipEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_gkehub_v1_data_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*KubernetesResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_gkehub_v1_data_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ResourceOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_gkehub_v1_data_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ResourceManifest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_gkehub_v1_data_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*GkeCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_gkehub_v1_data_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*OnPremCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_gkehub_v1_data_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*MultiCloudCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_gkehub_v1_data_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*EdgeCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_gkehub_v1_data_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*ApplianceCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_gkehub_v1_data_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*KubernetesMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_gkehub_v1_data_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*MembershipState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_gkehub_v1_data_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*Authority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_gkehub_v1_data_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ScopeEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_gkehub_v1_data_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*MembershipEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_gkehub_v1_data_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*FeatureEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_gkehub_v1_data_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*MembershipBindingEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cloud_gkehub_v1_data_proto_msgTypes[8].OneofWrappers = []any{
		(*MembershipBinding_Scope)(nil),
		(*MembershipBinding_Fleet)(nil),
	}
	file_cloud_gkehub_v1_data_proto_msgTypes[10].OneofWrappers = []any{
		(*Membership_Endpoint)(nil),
	}
	file_cloud_gkehub_v1_data_proto_msgTypes[11].OneofWrappers = []any{
		(*MembershipEndpoint_GkeCluster)(nil),
		(*MembershipEndpoint_OnPremCluster)(nil),
		(*MembershipEndpoint_MultiCloudCluster)(nil),
		(*MembershipEndpoint_EdgeCluster)(nil),
		(*MembershipEndpoint_ApplianceCluster)(nil),
	}
	file_cloud_gkehub_v1_data_proto_msgTypes[23].OneofWrappers = []any{}
	file_cloud_gkehub_v1_data_proto_msgTypes[24].OneofWrappers = []any{}
	file_cloud_gkehub_v1_data_proto_msgTypes[25].OneofWrappers = []any{}
	file_cloud_gkehub_v1_data_proto_msgTypes[26].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_gkehub_v1_data_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_gkehub_v1_data_proto_goTypes,
		DependencyIndexes: file_cloud_gkehub_v1_data_proto_depIdxs,
		EnumInfos:         file_cloud_gkehub_v1_data_proto_enumTypes,
		MessageInfos:      file_cloud_gkehub_v1_data_proto_msgTypes,
	}.Build()
	File_cloud_gkehub_v1_data_proto = out.File
	file_cloud_gkehub_v1_data_proto_rawDesc = nil
	file_cloud_gkehub_v1_data_proto_goTypes = nil
	file_cloud_gkehub_v1_data_proto_depIdxs = nil
}
