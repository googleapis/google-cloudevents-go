// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.6
// source: cloud/deploy/v1/data.proto

package deploydata

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The support state of a specific Skaffold version.
type SkaffoldSupportState int32

const (
	// Default value. This value is unused.
	SkaffoldSupportState_SKAFFOLD_SUPPORT_STATE_UNSPECIFIED SkaffoldSupportState = 0
	// This Skaffold version is currently supported.
	SkaffoldSupportState_SKAFFOLD_SUPPORT_STATE_SUPPORTED SkaffoldSupportState = 1
	// This Skaffold version is in maintenance mode.
	SkaffoldSupportState_SKAFFOLD_SUPPORT_STATE_MAINTENANCE_MODE SkaffoldSupportState = 2
	// This Skaffold version is no longer supported.
	SkaffoldSupportState_SKAFFOLD_SUPPORT_STATE_UNSUPPORTED SkaffoldSupportState = 3
)

// Enum value maps for SkaffoldSupportState.
var (
	SkaffoldSupportState_name = map[int32]string{
		0: "SKAFFOLD_SUPPORT_STATE_UNSPECIFIED",
		1: "SKAFFOLD_SUPPORT_STATE_SUPPORTED",
		2: "SKAFFOLD_SUPPORT_STATE_MAINTENANCE_MODE",
		3: "SKAFFOLD_SUPPORT_STATE_UNSUPPORTED",
	}
	SkaffoldSupportState_value = map[string]int32{
		"SKAFFOLD_SUPPORT_STATE_UNSPECIFIED":      0,
		"SKAFFOLD_SUPPORT_STATE_SUPPORTED":        1,
		"SKAFFOLD_SUPPORT_STATE_MAINTENANCE_MODE": 2,
		"SKAFFOLD_SUPPORT_STATE_UNSUPPORTED":      3,
	}
)

func (x SkaffoldSupportState) Enum() *SkaffoldSupportState {
	p := new(SkaffoldSupportState)
	*p = x
	return p
}

func (x SkaffoldSupportState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SkaffoldSupportState) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_deploy_v1_data_proto_enumTypes[0].Descriptor()
}

func (SkaffoldSupportState) Type() protoreflect.EnumType {
	return &file_cloud_deploy_v1_data_proto_enumTypes[0]
}

func (x SkaffoldSupportState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SkaffoldSupportState.Descriptor instead.
func (SkaffoldSupportState) EnumDescriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{0}
}

// The pattern of how wait time is increased.
type BackoffMode int32

const (
	// No WaitMode is specified.
	BackoffMode_BACKOFF_MODE_UNSPECIFIED BackoffMode = 0
	// Increases the wait time linearly.
	BackoffMode_BACKOFF_MODE_LINEAR BackoffMode = 1
	// Increases the wait time exponentially.
	BackoffMode_BACKOFF_MODE_EXPONENTIAL BackoffMode = 2
)

// Enum value maps for BackoffMode.
var (
	BackoffMode_name = map[int32]string{
		0: "BACKOFF_MODE_UNSPECIFIED",
		1: "BACKOFF_MODE_LINEAR",
		2: "BACKOFF_MODE_EXPONENTIAL",
	}
	BackoffMode_value = map[string]int32{
		"BACKOFF_MODE_UNSPECIFIED": 0,
		"BACKOFF_MODE_LINEAR":      1,
		"BACKOFF_MODE_EXPONENTIAL": 2,
	}
)

func (x BackoffMode) Enum() *BackoffMode {
	p := new(BackoffMode)
	*p = x
	return p
}

func (x BackoffMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackoffMode) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_deploy_v1_data_proto_enumTypes[1].Descriptor()
}

func (BackoffMode) Type() protoreflect.EnumType {
	return &file_cloud_deploy_v1_data_proto_enumTypes[1]
}

func (x BackoffMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackoffMode.Descriptor instead.
func (BackoffMode) EnumDescriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{1}
}

// Possible usages of this configuration.
type ExecutionConfig_ExecutionEnvironmentUsage int32

const (
	// Default value. This value is unused.
	ExecutionConfig_EXECUTION_ENVIRONMENT_USAGE_UNSPECIFIED ExecutionConfig_ExecutionEnvironmentUsage = 0
	// Use for rendering.
	ExecutionConfig_RENDER ExecutionConfig_ExecutionEnvironmentUsage = 1
	// Use for deploying and deployment hooks.
	ExecutionConfig_DEPLOY ExecutionConfig_ExecutionEnvironmentUsage = 2
	// Use for deployment verification.
	ExecutionConfig_VERIFY ExecutionConfig_ExecutionEnvironmentUsage = 3
	// Use for predeploy job execution.
	ExecutionConfig_PREDEPLOY ExecutionConfig_ExecutionEnvironmentUsage = 4
	// Use for postdeploy job execution.
	ExecutionConfig_POSTDEPLOY ExecutionConfig_ExecutionEnvironmentUsage = 5
)

// Enum value maps for ExecutionConfig_ExecutionEnvironmentUsage.
var (
	ExecutionConfig_ExecutionEnvironmentUsage_name = map[int32]string{
		0: "EXECUTION_ENVIRONMENT_USAGE_UNSPECIFIED",
		1: "RENDER",
		2: "DEPLOY",
		3: "VERIFY",
		4: "PREDEPLOY",
		5: "POSTDEPLOY",
	}
	ExecutionConfig_ExecutionEnvironmentUsage_value = map[string]int32{
		"EXECUTION_ENVIRONMENT_USAGE_UNSPECIFIED": 0,
		"RENDER":     1,
		"DEPLOY":     2,
		"VERIFY":     3,
		"PREDEPLOY":  4,
		"POSTDEPLOY": 5,
	}
)

func (x ExecutionConfig_ExecutionEnvironmentUsage) Enum() *ExecutionConfig_ExecutionEnvironmentUsage {
	p := new(ExecutionConfig_ExecutionEnvironmentUsage)
	*p = x
	return p
}

func (x ExecutionConfig_ExecutionEnvironmentUsage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionConfig_ExecutionEnvironmentUsage) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_deploy_v1_data_proto_enumTypes[2].Descriptor()
}

func (ExecutionConfig_ExecutionEnvironmentUsage) Type() protoreflect.EnumType {
	return &file_cloud_deploy_v1_data_proto_enumTypes[2]
}

func (x ExecutionConfig_ExecutionEnvironmentUsage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionConfig_ExecutionEnvironmentUsage.Descriptor instead.
func (ExecutionConfig_ExecutionEnvironmentUsage) EnumDescriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{19, 0}
}

// Valid states of the render operation.
type Release_RenderState int32

const (
	// The render state is unspecified.
	Release_RENDER_STATE_UNSPECIFIED Release_RenderState = 0
	// All rendering operations have completed successfully.
	Release_SUCCEEDED Release_RenderState = 1
	// All rendering operations have completed, and one or more have failed.
	Release_FAILED Release_RenderState = 2
	// Rendering has started and is not complete.
	Release_IN_PROGRESS Release_RenderState = 3
)

// Enum value maps for Release_RenderState.
var (
	Release_RenderState_name = map[int32]string{
		0: "RENDER_STATE_UNSPECIFIED",
		1: "SUCCEEDED",
		2: "FAILED",
		3: "IN_PROGRESS",
	}
	Release_RenderState_value = map[string]int32{
		"RENDER_STATE_UNSPECIFIED": 0,
		"SUCCEEDED":                1,
		"FAILED":                   2,
		"IN_PROGRESS":              3,
	}
)

func (x Release_RenderState) Enum() *Release_RenderState {
	p := new(Release_RenderState)
	*p = x
	return p
}

func (x Release_RenderState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Release_RenderState) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_deploy_v1_data_proto_enumTypes[3].Descriptor()
}

func (Release_RenderState) Type() protoreflect.EnumType {
	return &file_cloud_deploy_v1_data_proto_enumTypes[3]
}

func (x Release_RenderState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Release_RenderState.Descriptor instead.
func (Release_RenderState) EnumDescriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{31, 0}
}

// Valid states of the render operation.
type Release_TargetRender_TargetRenderState int32

const (
	// The render operation state is unspecified.
	Release_TargetRender_TARGET_RENDER_STATE_UNSPECIFIED Release_TargetRender_TargetRenderState = 0
	// The render operation has completed successfully.
	Release_TargetRender_SUCCEEDED Release_TargetRender_TargetRenderState = 1
	// The render operation has failed.
	Release_TargetRender_FAILED Release_TargetRender_TargetRenderState = 2
	// The render operation is in progress.
	Release_TargetRender_IN_PROGRESS Release_TargetRender_TargetRenderState = 3
)

// Enum value maps for Release_TargetRender_TargetRenderState.
var (
	Release_TargetRender_TargetRenderState_name = map[int32]string{
		0: "TARGET_RENDER_STATE_UNSPECIFIED",
		1: "SUCCEEDED",
		2: "FAILED",
		3: "IN_PROGRESS",
	}
	Release_TargetRender_TargetRenderState_value = map[string]int32{
		"TARGET_RENDER_STATE_UNSPECIFIED": 0,
		"SUCCEEDED":                       1,
		"FAILED":                          2,
		"IN_PROGRESS":                     3,
	}
)

func (x Release_TargetRender_TargetRenderState) Enum() *Release_TargetRender_TargetRenderState {
	p := new(Release_TargetRender_TargetRenderState)
	*p = x
	return p
}

func (x Release_TargetRender_TargetRenderState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Release_TargetRender_TargetRenderState) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_deploy_v1_data_proto_enumTypes[4].Descriptor()
}

func (Release_TargetRender_TargetRenderState) Type() protoreflect.EnumType {
	return &file_cloud_deploy_v1_data_proto_enumTypes[4]
}

func (x Release_TargetRender_TargetRenderState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Release_TargetRender_TargetRenderState.Descriptor instead.
func (Release_TargetRender_TargetRenderState) EnumDescriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{31, 0, 0}
}

// Well-known rendering failures.
type Release_TargetRender_FailureCause int32

const (
	// No reason for failure is specified.
	Release_TargetRender_FAILURE_CAUSE_UNSPECIFIED Release_TargetRender_FailureCause = 0
	// Cloud Build is not available, either because it is not enabled or
	// because Cloud Deploy has insufficient permissions. See [required
	// permission](https://cloud.google.com/deploy/docs/cloud-deploy-service-account#required_permissions).
	Release_TargetRender_CLOUD_BUILD_UNAVAILABLE Release_TargetRender_FailureCause = 1
	// The render operation did not complete successfully; check Cloud Build
	// logs.
	Release_TargetRender_EXECUTION_FAILED Release_TargetRender_FailureCause = 2
	// Cloud Build failed to fulfill Cloud Deploy's request. See
	// failure_message for additional details.
	Release_TargetRender_CLOUD_BUILD_REQUEST_FAILED Release_TargetRender_FailureCause = 3
	// The render operation did not complete successfully because the
	// verification stanza required for verify was not found on the Skaffold
	// configuration.
	Release_TargetRender_VERIFICATION_CONFIG_NOT_FOUND Release_TargetRender_FailureCause = 4
	// The render operation did not complete successfully because the custom
	// action required for predeploy or postdeploy was not found in the
	// Skaffold configuration. See failure_message for additional details.
	Release_TargetRender_CUSTOM_ACTION_NOT_FOUND Release_TargetRender_FailureCause = 5
	// Release failed during rendering because the release configuration is
	// not supported with the specified deployment strategy.
	Release_TargetRender_DEPLOYMENT_STRATEGY_NOT_SUPPORTED Release_TargetRender_FailureCause = 6
	// The render operation had a feature configured that is not supported.
	Release_TargetRender_RENDER_FEATURE_NOT_SUPPORTED Release_TargetRender_FailureCause = 7
)

// Enum value maps for Release_TargetRender_FailureCause.
var (
	Release_TargetRender_FailureCause_name = map[int32]string{
		0: "FAILURE_CAUSE_UNSPECIFIED",
		1: "CLOUD_BUILD_UNAVAILABLE",
		2: "EXECUTION_FAILED",
		3: "CLOUD_BUILD_REQUEST_FAILED",
		4: "VERIFICATION_CONFIG_NOT_FOUND",
		5: "CUSTOM_ACTION_NOT_FOUND",
		6: "DEPLOYMENT_STRATEGY_NOT_SUPPORTED",
		7: "RENDER_FEATURE_NOT_SUPPORTED",
	}
	Release_TargetRender_FailureCause_value = map[string]int32{
		"FAILURE_CAUSE_UNSPECIFIED":         0,
		"CLOUD_BUILD_UNAVAILABLE":           1,
		"EXECUTION_FAILED":                  2,
		"CLOUD_BUILD_REQUEST_FAILED":        3,
		"VERIFICATION_CONFIG_NOT_FOUND":     4,
		"CUSTOM_ACTION_NOT_FOUND":           5,
		"DEPLOYMENT_STRATEGY_NOT_SUPPORTED": 6,
		"RENDER_FEATURE_NOT_SUPPORTED":      7,
	}
)

func (x Release_TargetRender_FailureCause) Enum() *Release_TargetRender_FailureCause {
	p := new(Release_TargetRender_FailureCause)
	*p = x
	return p
}

func (x Release_TargetRender_FailureCause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Release_TargetRender_FailureCause) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_deploy_v1_data_proto_enumTypes[5].Descriptor()
}

func (Release_TargetRender_FailureCause) Type() protoreflect.EnumType {
	return &file_cloud_deploy_v1_data_proto_enumTypes[5]
}

func (x Release_TargetRender_FailureCause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Release_TargetRender_FailureCause.Descriptor instead.
func (Release_TargetRender_FailureCause) EnumDescriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{31, 0, 1}
}

// Valid approval states of a `Rollout`.
type Rollout_ApprovalState int32

const (
	// The `Rollout` has an unspecified approval state.
	Rollout_APPROVAL_STATE_UNSPECIFIED Rollout_ApprovalState = 0
	// The `Rollout` requires approval.
	Rollout_NEEDS_APPROVAL Rollout_ApprovalState = 1
	// The `Rollout` does not require approval.
	Rollout_DOES_NOT_NEED_APPROVAL Rollout_ApprovalState = 2
	// The `Rollout` has been approved.
	Rollout_APPROVED Rollout_ApprovalState = 3
	// The `Rollout` has been rejected.
	Rollout_REJECTED Rollout_ApprovalState = 4
)

// Enum value maps for Rollout_ApprovalState.
var (
	Rollout_ApprovalState_name = map[int32]string{
		0: "APPROVAL_STATE_UNSPECIFIED",
		1: "NEEDS_APPROVAL",
		2: "DOES_NOT_NEED_APPROVAL",
		3: "APPROVED",
		4: "REJECTED",
	}
	Rollout_ApprovalState_value = map[string]int32{
		"APPROVAL_STATE_UNSPECIFIED": 0,
		"NEEDS_APPROVAL":             1,
		"DOES_NOT_NEED_APPROVAL":     2,
		"APPROVED":                   3,
		"REJECTED":                   4,
	}
)

func (x Rollout_ApprovalState) Enum() *Rollout_ApprovalState {
	p := new(Rollout_ApprovalState)
	*p = x
	return p
}

func (x Rollout_ApprovalState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rollout_ApprovalState) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_deploy_v1_data_proto_enumTypes[6].Descriptor()
}

func (Rollout_ApprovalState) Type() protoreflect.EnumType {
	return &file_cloud_deploy_v1_data_proto_enumTypes[6]
}

func (x Rollout_ApprovalState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rollout_ApprovalState.Descriptor instead.
func (Rollout_ApprovalState) EnumDescriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{36, 0}
}

// Valid states of a `Rollout`.
type Rollout_State int32

const (
	// The `Rollout` has an unspecified state.
	Rollout_STATE_UNSPECIFIED Rollout_State = 0
	// The `Rollout` has completed successfully.
	Rollout_SUCCEEDED Rollout_State = 1
	// The `Rollout` has failed.
	Rollout_FAILED Rollout_State = 2
	// The `Rollout` is being deployed.
	Rollout_IN_PROGRESS Rollout_State = 3
	// The `Rollout` needs approval.
	Rollout_PENDING_APPROVAL Rollout_State = 4
	// An approver rejected the `Rollout`.
	Rollout_APPROVAL_REJECTED Rollout_State = 5
	// The `Rollout` is waiting for an earlier Rollout(s) to complete on this
	// `Target`.
	Rollout_PENDING Rollout_State = 6
	// The `Rollout` is waiting for the `Release` to be fully rendered.
	Rollout_PENDING_RELEASE Rollout_State = 7
	// The `Rollout` is in the process of being cancelled.
	Rollout_CANCELLING Rollout_State = 8
	// The `Rollout` has been cancelled.
	Rollout_CANCELLED Rollout_State = 9
	// The `Rollout` is halted.
	Rollout_HALTED Rollout_State = 10
)

// Enum value maps for Rollout_State.
var (
	Rollout_State_name = map[int32]string{
		0:  "STATE_UNSPECIFIED",
		1:  "SUCCEEDED",
		2:  "FAILED",
		3:  "IN_PROGRESS",
		4:  "PENDING_APPROVAL",
		5:  "APPROVAL_REJECTED",
		6:  "PENDING",
		7:  "PENDING_RELEASE",
		8:  "CANCELLING",
		9:  "CANCELLED",
		10: "HALTED",
	}
	Rollout_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"SUCCEEDED":         1,
		"FAILED":            2,
		"IN_PROGRESS":       3,
		"PENDING_APPROVAL":  4,
		"APPROVAL_REJECTED": 5,
		"PENDING":           6,
		"PENDING_RELEASE":   7,
		"CANCELLING":        8,
		"CANCELLED":         9,
		"HALTED":            10,
	}
)

func (x Rollout_State) Enum() *Rollout_State {
	p := new(Rollout_State)
	*p = x
	return p
}

func (x Rollout_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rollout_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_deploy_v1_data_proto_enumTypes[7].Descriptor()
}

func (Rollout_State) Type() protoreflect.EnumType {
	return &file_cloud_deploy_v1_data_proto_enumTypes[7]
}

func (x Rollout_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rollout_State.Descriptor instead.
func (Rollout_State) EnumDescriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{36, 1}
}

// Well-known rollout failures.
type Rollout_FailureCause int32

const (
	// No reason for failure is specified.
	Rollout_FAILURE_CAUSE_UNSPECIFIED Rollout_FailureCause = 0
	// Cloud Build is not available, either because it is not enabled or because
	// Cloud Deploy has insufficient permissions. See [required
	// permission](https://cloud.google.com/deploy/docs/cloud-deploy-service-account#required_permissions).
	Rollout_CLOUD_BUILD_UNAVAILABLE Rollout_FailureCause = 1
	// The deploy operation did not complete successfully; check Cloud Build
	// logs.
	Rollout_EXECUTION_FAILED Rollout_FailureCause = 2
	// Deployment did not complete within the alloted time.
	Rollout_DEADLINE_EXCEEDED Rollout_FailureCause = 3
	// Release is in a failed state.
	Rollout_RELEASE_FAILED Rollout_FailureCause = 4
	// Release is abandoned.
	Rollout_RELEASE_ABANDONED Rollout_FailureCause = 5
	// No Skaffold verify configuration was found.
	Rollout_VERIFICATION_CONFIG_NOT_FOUND Rollout_FailureCause = 6
	// Cloud Build failed to fulfill Cloud Deploy's request. See failure_message
	// for additional details.
	Rollout_CLOUD_BUILD_REQUEST_FAILED Rollout_FailureCause = 7
	// A Rollout operation had a feature configured that is not supported.
	Rollout_OPERATION_FEATURE_NOT_SUPPORTED Rollout_FailureCause = 8
)

// Enum value maps for Rollout_FailureCause.
var (
	Rollout_FailureCause_name = map[int32]string{
		0: "FAILURE_CAUSE_UNSPECIFIED",
		1: "CLOUD_BUILD_UNAVAILABLE",
		2: "EXECUTION_FAILED",
		3: "DEADLINE_EXCEEDED",
		4: "RELEASE_FAILED",
		5: "RELEASE_ABANDONED",
		6: "VERIFICATION_CONFIG_NOT_FOUND",
		7: "CLOUD_BUILD_REQUEST_FAILED",
		8: "OPERATION_FEATURE_NOT_SUPPORTED",
	}
	Rollout_FailureCause_value = map[string]int32{
		"FAILURE_CAUSE_UNSPECIFIED":       0,
		"CLOUD_BUILD_UNAVAILABLE":         1,
		"EXECUTION_FAILED":                2,
		"DEADLINE_EXCEEDED":               3,
		"RELEASE_FAILED":                  4,
		"RELEASE_ABANDONED":               5,
		"VERIFICATION_CONFIG_NOT_FOUND":   6,
		"CLOUD_BUILD_REQUEST_FAILED":      7,
		"OPERATION_FEATURE_NOT_SUPPORTED": 8,
	}
)

func (x Rollout_FailureCause) Enum() *Rollout_FailureCause {
	p := new(Rollout_FailureCause)
	*p = x
	return p
}

func (x Rollout_FailureCause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rollout_FailureCause) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_deploy_v1_data_proto_enumTypes[8].Descriptor()
}

func (Rollout_FailureCause) Type() protoreflect.EnumType {
	return &file_cloud_deploy_v1_data_proto_enumTypes[8]
}

func (x Rollout_FailureCause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rollout_FailureCause.Descriptor instead.
func (Rollout_FailureCause) EnumDescriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{36, 2}
}

// Valid states of a Phase.
type Phase_State int32

const (
	// The Phase has an unspecified state.
	Phase_STATE_UNSPECIFIED Phase_State = 0
	// The Phase is waiting for an earlier Phase(s) to complete.
	Phase_PENDING Phase_State = 1
	// The Phase is in progress.
	Phase_IN_PROGRESS Phase_State = 2
	// The Phase has succeeded.
	Phase_SUCCEEDED Phase_State = 3
	// The Phase has failed.
	Phase_FAILED Phase_State = 4
	// The Phase was aborted.
	Phase_ABORTED Phase_State = 5
	// The Phase was skipped.
	Phase_SKIPPED Phase_State = 6
)

// Enum value maps for Phase_State.
var (
	Phase_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "PENDING",
		2: "IN_PROGRESS",
		3: "SUCCEEDED",
		4: "FAILED",
		5: "ABORTED",
		6: "SKIPPED",
	}
	Phase_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"PENDING":           1,
		"IN_PROGRESS":       2,
		"SUCCEEDED":         3,
		"FAILED":            4,
		"ABORTED":           5,
		"SKIPPED":           6,
	}
)

func (x Phase_State) Enum() *Phase_State {
	p := new(Phase_State)
	*p = x
	return p
}

func (x Phase_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Phase_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_deploy_v1_data_proto_enumTypes[9].Descriptor()
}

func (Phase_State) Type() protoreflect.EnumType {
	return &file_cloud_deploy_v1_data_proto_enumTypes[9]
}

func (x Phase_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Phase_State.Descriptor instead.
func (Phase_State) EnumDescriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{41, 0}
}

// Valid states of a Job.
type Job_State int32

const (
	// The Job has an unspecified state.
	Job_STATE_UNSPECIFIED Job_State = 0
	// The Job is waiting for an earlier Phase(s) or Job(s) to complete.
	Job_PENDING Job_State = 1
	// The Job is disabled.
	Job_DISABLED Job_State = 2
	// The Job is in progress.
	Job_IN_PROGRESS Job_State = 3
	// The Job succeeded.
	Job_SUCCEEDED Job_State = 4
	// The Job failed.
	Job_FAILED Job_State = 5
	// The Job was aborted.
	Job_ABORTED Job_State = 6
	// The Job was skipped.
	Job_SKIPPED Job_State = 7
	// The Job was ignored.
	Job_IGNORED Job_State = 8
)

// Enum value maps for Job_State.
var (
	Job_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "PENDING",
		2: "DISABLED",
		3: "IN_PROGRESS",
		4: "SUCCEEDED",
		5: "FAILED",
		6: "ABORTED",
		7: "SKIPPED",
		8: "IGNORED",
	}
	Job_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"PENDING":           1,
		"DISABLED":          2,
		"IN_PROGRESS":       3,
		"SUCCEEDED":         4,
		"FAILED":            5,
		"ABORTED":           6,
		"SKIPPED":           7,
		"IGNORED":           8,
	}
)

func (x Job_State) Enum() *Job_State {
	p := new(Job_State)
	*p = x
	return p
}

func (x Job_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Job_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_deploy_v1_data_proto_enumTypes[10].Descriptor()
}

func (Job_State) Type() protoreflect.EnumType {
	return &file_cloud_deploy_v1_data_proto_enumTypes[10]
}

func (x Job_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Job_State.Descriptor instead.
func (Job_State) EnumDescriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{44, 0}
}

// A `DeliveryPipeline` resource in the Cloud Deploy API.
//
// A `DeliveryPipeline` defines a pipeline through which a Skaffold
// configuration can progress.
type DeliveryPipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Name of the `DeliveryPipeline`. Format is
	// `projects/{project}/locations/{location}/deliveryPipelines/[a-z][a-z0-9\-]{0,62}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Unique identifier of the `DeliveryPipeline`.
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// Description of the `DeliveryPipeline`. Max length is 255 characters.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// User annotations. These attributes can only be set and used by the
	// user, and not by Cloud Deploy.
	Annotations map[string]string `protobuf:"bytes,4,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Labels are attributes that can be set and used by both the
	// user and by Cloud Deploy. Labels must meet the following constraints:
	//
	// * Keys and values can contain only lowercase letters, numeric characters,
	// underscores, and dashes.
	// * All characters must use UTF-8 encoding, and international characters are
	// allowed.
	// * Keys must start with a lowercase letter or international character.
	// * Each resource is limited to a maximum of 64 labels.
	//
	// Both keys and values are additionally constrained to be <= 128 bytes.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only. Time at which the pipeline was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Most recent time at which the pipeline was updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// The ordering configuration of the `DeliveryPipeline`.
	//
	// Types that are assignable to Pipeline:
	//
	//	*DeliveryPipeline_SerialPipeline
	Pipeline isDeliveryPipeline_Pipeline `protobuf_oneof:"pipeline"`
	// Output only. Information around the state of the Delivery Pipeline.
	Condition *PipelineCondition `protobuf:"bytes,11,opt,name=condition,proto3" json:"condition,omitempty"`
	// This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	Etag string `protobuf:"bytes,10,opt,name=etag,proto3" json:"etag,omitempty"`
	// When suspended, no new releases or rollouts can be created,
	// but in-progress ones will complete.
	Suspended bool `protobuf:"varint,12,opt,name=suspended,proto3" json:"suspended,omitempty"`
}

func (x *DeliveryPipeline) Reset() {
	*x = DeliveryPipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryPipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryPipeline) ProtoMessage() {}

func (x *DeliveryPipeline) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryPipeline.ProtoReflect.Descriptor instead.
func (*DeliveryPipeline) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{0}
}

func (x *DeliveryPipeline) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeliveryPipeline) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DeliveryPipeline) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DeliveryPipeline) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *DeliveryPipeline) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DeliveryPipeline) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *DeliveryPipeline) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (m *DeliveryPipeline) GetPipeline() isDeliveryPipeline_Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (x *DeliveryPipeline) GetSerialPipeline() *SerialPipeline {
	if x, ok := x.GetPipeline().(*DeliveryPipeline_SerialPipeline); ok {
		return x.SerialPipeline
	}
	return nil
}

func (x *DeliveryPipeline) GetCondition() *PipelineCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *DeliveryPipeline) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *DeliveryPipeline) GetSuspended() bool {
	if x != nil {
		return x.Suspended
	}
	return false
}

type isDeliveryPipeline_Pipeline interface {
	isDeliveryPipeline_Pipeline()
}

type DeliveryPipeline_SerialPipeline struct {
	// SerialPipeline defines a sequential set of stages for a
	// `DeliveryPipeline`.
	SerialPipeline *SerialPipeline `protobuf:"bytes,8,opt,name=serial_pipeline,json=serialPipeline,proto3,oneof"`
}

func (*DeliveryPipeline_SerialPipeline) isDeliveryPipeline_Pipeline() {}

// SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
type SerialPipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each stage specifies configuration for a `Target`. The ordering
	// of this list defines the promotion flow.
	Stages []*Stage `protobuf:"bytes,1,rep,name=stages,proto3" json:"stages,omitempty"`
}

func (x *SerialPipeline) Reset() {
	*x = SerialPipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SerialPipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerialPipeline) ProtoMessage() {}

func (x *SerialPipeline) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerialPipeline.ProtoReflect.Descriptor instead.
func (*SerialPipeline) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{1}
}

func (x *SerialPipeline) GetStages() []*Stage {
	if x != nil {
		return x.Stages
	}
	return nil
}

// Stage specifies a location to which to deploy.
type Stage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The target_id to which this stage points. This field refers exclusively to
	// the last segment of a target name. For example, this field would just be
	// `my-target` (rather than
	// `projects/project/locations/location/targets/my-target`). The location of
	// the `Target` is inferred to be the same as the location of the
	// `DeliveryPipeline` that contains this `Stage`.
	TargetId string `protobuf:"bytes,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	// Skaffold profiles to use when rendering the manifest for this stage's
	// `Target`.
	Profiles []string `protobuf:"bytes,2,rep,name=profiles,proto3" json:"profiles,omitempty"`
	// Optional. The strategy to use for a `Rollout` to this stage.
	Strategy *Strategy `protobuf:"bytes,5,opt,name=strategy,proto3" json:"strategy,omitempty"`
	// Optional. The deploy parameters to use for the target in this stage.
	DeployParameters []*DeployParameters `protobuf:"bytes,6,rep,name=deploy_parameters,json=deployParameters,proto3" json:"deploy_parameters,omitempty"`
}

func (x *Stage) Reset() {
	*x = Stage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stage) ProtoMessage() {}

func (x *Stage) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stage.ProtoReflect.Descriptor instead.
func (*Stage) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{2}
}

func (x *Stage) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *Stage) GetProfiles() []string {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *Stage) GetStrategy() *Strategy {
	if x != nil {
		return x.Strategy
	}
	return nil
}

func (x *Stage) GetDeployParameters() []*DeployParameters {
	if x != nil {
		return x.DeployParameters
	}
	return nil
}

// DeployParameters contains deploy parameters information.
type DeployParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Values are deploy parameters in key-value pairs.
	Values map[string]string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional. Deploy parameters are applied to targets with match labels.
	// If unspecified, deploy parameters are applied to all targets (including
	// child targets of a multi-target).
	MatchTargetLabels map[string]string `protobuf:"bytes,2,rep,name=match_target_labels,json=matchTargetLabels,proto3" json:"match_target_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeployParameters) Reset() {
	*x = DeployParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployParameters) ProtoMessage() {}

func (x *DeployParameters) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployParameters.ProtoReflect.Descriptor instead.
func (*DeployParameters) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{3}
}

func (x *DeployParameters) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *DeployParameters) GetMatchTargetLabels() map[string]string {
	if x != nil {
		return x.MatchTargetLabels
	}
	return nil
}

// Strategy contains deployment strategy information.
type Strategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deployment strategy details.
	//
	// Types that are assignable to DeploymentStrategy:
	//
	//	*Strategy_Standard
	//	*Strategy_Canary
	DeploymentStrategy isStrategy_DeploymentStrategy `protobuf_oneof:"deployment_strategy"`
}

func (x *Strategy) Reset() {
	*x = Strategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Strategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Strategy) ProtoMessage() {}

func (x *Strategy) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Strategy.ProtoReflect.Descriptor instead.
func (*Strategy) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{4}
}

func (m *Strategy) GetDeploymentStrategy() isStrategy_DeploymentStrategy {
	if m != nil {
		return m.DeploymentStrategy
	}
	return nil
}

func (x *Strategy) GetStandard() *Standard {
	if x, ok := x.GetDeploymentStrategy().(*Strategy_Standard); ok {
		return x.Standard
	}
	return nil
}

func (x *Strategy) GetCanary() *Canary {
	if x, ok := x.GetDeploymentStrategy().(*Strategy_Canary); ok {
		return x.Canary
	}
	return nil
}

type isStrategy_DeploymentStrategy interface {
	isStrategy_DeploymentStrategy()
}

type Strategy_Standard struct {
	// Standard deployment strategy executes a single deploy and allows
	// verifying the deployment.
	Standard *Standard `protobuf:"bytes,1,opt,name=standard,proto3,oneof"`
}

type Strategy_Canary struct {
	// Canary deployment strategy provides progressive percentage based
	// deployments to a Target.
	Canary *Canary `protobuf:"bytes,2,opt,name=canary,proto3,oneof"`
}

func (*Strategy_Standard) isStrategy_DeploymentStrategy() {}

func (*Strategy_Canary) isStrategy_DeploymentStrategy() {}

// Predeploy contains the predeploy job configuration information.
type Predeploy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. A sequence of Skaffold custom actions to invoke during execution
	// of the predeploy job.
	Actions []string `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *Predeploy) Reset() {
	*x = Predeploy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Predeploy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Predeploy) ProtoMessage() {}

func (x *Predeploy) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Predeploy.ProtoReflect.Descriptor instead.
func (*Predeploy) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{5}
}

func (x *Predeploy) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

// Postdeploy contains the postdeploy job configuration information.
type Postdeploy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. A sequence of Skaffold custom actions to invoke during execution
	// of the postdeploy job.
	Actions []string `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *Postdeploy) Reset() {
	*x = Postdeploy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Postdeploy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Postdeploy) ProtoMessage() {}

func (x *Postdeploy) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Postdeploy.ProtoReflect.Descriptor instead.
func (*Postdeploy) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{6}
}

func (x *Postdeploy) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

// Standard represents the standard deployment strategy.
type Standard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to verify a deployment.
	Verify bool `protobuf:"varint,1,opt,name=verify,proto3" json:"verify,omitempty"`
	// Optional. Configuration for the predeploy job. If this is not configured,
	// predeploy job will not be present.
	Predeploy *Predeploy `protobuf:"bytes,2,opt,name=predeploy,proto3" json:"predeploy,omitempty"`
	// Optional. Configuration for the postdeploy job. If this is not configured,
	// postdeploy job will not be present.
	Postdeploy *Postdeploy `protobuf:"bytes,3,opt,name=postdeploy,proto3" json:"postdeploy,omitempty"`
}

func (x *Standard) Reset() {
	*x = Standard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Standard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Standard) ProtoMessage() {}

func (x *Standard) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Standard.ProtoReflect.Descriptor instead.
func (*Standard) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{7}
}

func (x *Standard) GetVerify() bool {
	if x != nil {
		return x.Verify
	}
	return false
}

func (x *Standard) GetPredeploy() *Predeploy {
	if x != nil {
		return x.Predeploy
	}
	return nil
}

func (x *Standard) GetPostdeploy() *Postdeploy {
	if x != nil {
		return x.Postdeploy
	}
	return nil
}

// Canary represents the canary deployment strategy.
type Canary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Runtime specific configurations for the deployment strategy. The
	// runtime configuration is used to determine how Cloud Deploy will split
	// traffic to enable a progressive deployment.
	RuntimeConfig *RuntimeConfig `protobuf:"bytes,1,opt,name=runtime_config,json=runtimeConfig,proto3" json:"runtime_config,omitempty"`
	// The mode to use for the canary deployment strategy.
	//
	// Types that are assignable to Mode:
	//
	//	*Canary_CanaryDeployment
	//	*Canary_CustomCanaryDeployment
	Mode isCanary_Mode `protobuf_oneof:"mode"`
}

func (x *Canary) Reset() {
	*x = Canary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Canary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Canary) ProtoMessage() {}

func (x *Canary) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Canary.ProtoReflect.Descriptor instead.
func (*Canary) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{8}
}

func (x *Canary) GetRuntimeConfig() *RuntimeConfig {
	if x != nil {
		return x.RuntimeConfig
	}
	return nil
}

func (m *Canary) GetMode() isCanary_Mode {
	if m != nil {
		return m.Mode
	}
	return nil
}

func (x *Canary) GetCanaryDeployment() *CanaryDeployment {
	if x, ok := x.GetMode().(*Canary_CanaryDeployment); ok {
		return x.CanaryDeployment
	}
	return nil
}

func (x *Canary) GetCustomCanaryDeployment() *CustomCanaryDeployment {
	if x, ok := x.GetMode().(*Canary_CustomCanaryDeployment); ok {
		return x.CustomCanaryDeployment
	}
	return nil
}

type isCanary_Mode interface {
	isCanary_Mode()
}

type Canary_CanaryDeployment struct {
	// Configures the progressive based deployment for a Target.
	CanaryDeployment *CanaryDeployment `protobuf:"bytes,2,opt,name=canary_deployment,json=canaryDeployment,proto3,oneof"`
}

type Canary_CustomCanaryDeployment struct {
	// Configures the progressive based deployment for a Target, but allows
	// customizing at the phase level where a phase represents each of the
	// percentage deployments.
	CustomCanaryDeployment *CustomCanaryDeployment `protobuf:"bytes,3,opt,name=custom_canary_deployment,json=customCanaryDeployment,proto3,oneof"`
}

func (*Canary_CanaryDeployment) isCanary_Mode() {}

func (*Canary_CustomCanaryDeployment) isCanary_Mode() {}

// CanaryDeployment represents the canary deployment configuration
type CanaryDeployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The percentage based deployments that will occur as a part of a
	// `Rollout`. List is expected in ascending order and each integer n is
	// 0 <= n < 100.
	Percentages []int32 `protobuf:"varint,1,rep,packed,name=percentages,proto3" json:"percentages,omitempty"`
	// Whether to run verify tests after each percentage deployment.
	Verify bool `protobuf:"varint,2,opt,name=verify,proto3" json:"verify,omitempty"`
	// Optional. Configuration for the predeploy job of the first phase. If this
	// is not configured, there will be no predeploy job for this phase.
	Predeploy *Predeploy `protobuf:"bytes,3,opt,name=predeploy,proto3" json:"predeploy,omitempty"`
	// Optional. Configuration for the postdeploy job of the last phase. If this
	// is not configured, there will be no postdeploy job for this phase.
	Postdeploy *Postdeploy `protobuf:"bytes,4,opt,name=postdeploy,proto3" json:"postdeploy,omitempty"`
}

func (x *CanaryDeployment) Reset() {
	*x = CanaryDeployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanaryDeployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanaryDeployment) ProtoMessage() {}

func (x *CanaryDeployment) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanaryDeployment.ProtoReflect.Descriptor instead.
func (*CanaryDeployment) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{9}
}

func (x *CanaryDeployment) GetPercentages() []int32 {
	if x != nil {
		return x.Percentages
	}
	return nil
}

func (x *CanaryDeployment) GetVerify() bool {
	if x != nil {
		return x.Verify
	}
	return false
}

func (x *CanaryDeployment) GetPredeploy() *Predeploy {
	if x != nil {
		return x.Predeploy
	}
	return nil
}

func (x *CanaryDeployment) GetPostdeploy() *Postdeploy {
	if x != nil {
		return x.Postdeploy
	}
	return nil
}

// CustomCanaryDeployment represents the custom canary deployment
// configuration.
type CustomCanaryDeployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Configuration for each phase in the canary deployment in the
	// order executed.
	PhaseConfigs []*CustomCanaryDeployment_PhaseConfig `protobuf:"bytes,1,rep,name=phase_configs,json=phaseConfigs,proto3" json:"phase_configs,omitempty"`
}

func (x *CustomCanaryDeployment) Reset() {
	*x = CustomCanaryDeployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomCanaryDeployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomCanaryDeployment) ProtoMessage() {}

func (x *CustomCanaryDeployment) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomCanaryDeployment.ProtoReflect.Descriptor instead.
func (*CustomCanaryDeployment) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{10}
}

func (x *CustomCanaryDeployment) GetPhaseConfigs() []*CustomCanaryDeployment_PhaseConfig {
	if x != nil {
		return x.PhaseConfigs
	}
	return nil
}

// KubernetesConfig contains the Kubernetes runtime configuration.
type KubernetesConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The service definition configuration.
	//
	// Types that are assignable to ServiceDefinition:
	//
	//	*KubernetesConfig_GatewayServiceMesh_
	//	*KubernetesConfig_ServiceNetworking_
	ServiceDefinition isKubernetesConfig_ServiceDefinition `protobuf_oneof:"service_definition"`
}

func (x *KubernetesConfig) Reset() {
	*x = KubernetesConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesConfig) ProtoMessage() {}

func (x *KubernetesConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesConfig.ProtoReflect.Descriptor instead.
func (*KubernetesConfig) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{11}
}

func (m *KubernetesConfig) GetServiceDefinition() isKubernetesConfig_ServiceDefinition {
	if m != nil {
		return m.ServiceDefinition
	}
	return nil
}

func (x *KubernetesConfig) GetGatewayServiceMesh() *KubernetesConfig_GatewayServiceMesh {
	if x, ok := x.GetServiceDefinition().(*KubernetesConfig_GatewayServiceMesh_); ok {
		return x.GatewayServiceMesh
	}
	return nil
}

func (x *KubernetesConfig) GetServiceNetworking() *KubernetesConfig_ServiceNetworking {
	if x, ok := x.GetServiceDefinition().(*KubernetesConfig_ServiceNetworking_); ok {
		return x.ServiceNetworking
	}
	return nil
}

type isKubernetesConfig_ServiceDefinition interface {
	isKubernetesConfig_ServiceDefinition()
}

type KubernetesConfig_GatewayServiceMesh_ struct {
	// Kubernetes Gateway API service mesh configuration.
	GatewayServiceMesh *KubernetesConfig_GatewayServiceMesh `protobuf:"bytes,1,opt,name=gateway_service_mesh,json=gatewayServiceMesh,proto3,oneof"`
}

type KubernetesConfig_ServiceNetworking_ struct {
	// Kubernetes Service networking configuration.
	ServiceNetworking *KubernetesConfig_ServiceNetworking `protobuf:"bytes,2,opt,name=service_networking,json=serviceNetworking,proto3,oneof"`
}

func (*KubernetesConfig_GatewayServiceMesh_) isKubernetesConfig_ServiceDefinition() {}

func (*KubernetesConfig_ServiceNetworking_) isKubernetesConfig_ServiceDefinition() {}

// CloudRunConfig contains the Cloud Run runtime configuration.
type CloudRunConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether Cloud Deploy should update the traffic stanza in a Cloud Run
	// Service on the user's behalf to facilitate traffic splitting. This is
	// required to be true for CanaryDeployments, but optional for
	// CustomCanaryDeployments.
	AutomaticTrafficControl bool `protobuf:"varint,1,opt,name=automatic_traffic_control,json=automaticTrafficControl,proto3" json:"automatic_traffic_control,omitempty"`
	// Optional. A list of tags that are added to the canary revision while the
	// canary phase is in progress.
	CanaryRevisionTags []string `protobuf:"bytes,2,rep,name=canary_revision_tags,json=canaryRevisionTags,proto3" json:"canary_revision_tags,omitempty"`
	// Optional. A list of tags that are added to the prior revision while the
	// canary phase is in progress.
	PriorRevisionTags []string `protobuf:"bytes,3,rep,name=prior_revision_tags,json=priorRevisionTags,proto3" json:"prior_revision_tags,omitempty"`
	// Optional. A list of tags that are added to the final stable revision when
	// the stable phase is applied.
	StableRevisionTags []string `protobuf:"bytes,4,rep,name=stable_revision_tags,json=stableRevisionTags,proto3" json:"stable_revision_tags,omitempty"`
}

func (x *CloudRunConfig) Reset() {
	*x = CloudRunConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudRunConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudRunConfig) ProtoMessage() {}

func (x *CloudRunConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudRunConfig.ProtoReflect.Descriptor instead.
func (*CloudRunConfig) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{12}
}

func (x *CloudRunConfig) GetAutomaticTrafficControl() bool {
	if x != nil {
		return x.AutomaticTrafficControl
	}
	return false
}

func (x *CloudRunConfig) GetCanaryRevisionTags() []string {
	if x != nil {
		return x.CanaryRevisionTags
	}
	return nil
}

func (x *CloudRunConfig) GetPriorRevisionTags() []string {
	if x != nil {
		return x.PriorRevisionTags
	}
	return nil
}

func (x *CloudRunConfig) GetStableRevisionTags() []string {
	if x != nil {
		return x.StableRevisionTags
	}
	return nil
}

// RuntimeConfig contains the runtime specific configurations for a deployment
// strategy.
type RuntimeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The runtime configuration details.
	//
	// Types that are assignable to RuntimeConfig:
	//
	//	*RuntimeConfig_Kubernetes
	//	*RuntimeConfig_CloudRun
	RuntimeConfig isRuntimeConfig_RuntimeConfig `protobuf_oneof:"runtime_config"`
}

func (x *RuntimeConfig) Reset() {
	*x = RuntimeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeConfig) ProtoMessage() {}

func (x *RuntimeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeConfig.ProtoReflect.Descriptor instead.
func (*RuntimeConfig) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{13}
}

func (m *RuntimeConfig) GetRuntimeConfig() isRuntimeConfig_RuntimeConfig {
	if m != nil {
		return m.RuntimeConfig
	}
	return nil
}

func (x *RuntimeConfig) GetKubernetes() *KubernetesConfig {
	if x, ok := x.GetRuntimeConfig().(*RuntimeConfig_Kubernetes); ok {
		return x.Kubernetes
	}
	return nil
}

func (x *RuntimeConfig) GetCloudRun() *CloudRunConfig {
	if x, ok := x.GetRuntimeConfig().(*RuntimeConfig_CloudRun); ok {
		return x.CloudRun
	}
	return nil
}

type isRuntimeConfig_RuntimeConfig interface {
	isRuntimeConfig_RuntimeConfig()
}

type RuntimeConfig_Kubernetes struct {
	// Kubernetes runtime configuration.
	Kubernetes *KubernetesConfig `protobuf:"bytes,1,opt,name=kubernetes,proto3,oneof"`
}

type RuntimeConfig_CloudRun struct {
	// Cloud Run runtime configuration.
	CloudRun *CloudRunConfig `protobuf:"bytes,2,opt,name=cloud_run,json=cloudRun,proto3,oneof"`
}

func (*RuntimeConfig_Kubernetes) isRuntimeConfig_RuntimeConfig() {}

func (*RuntimeConfig_CloudRun) isRuntimeConfig_RuntimeConfig() {}

// PipelineReadyCondition contains information around the status of the
// Pipeline.
type PipelineReadyCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if the Pipeline is in a valid state. Otherwise at least one condition
	// in `PipelineCondition` is in an invalid state. Iterate over those
	// conditions and see which condition(s) has status = false to find out what
	// is wrong with the Pipeline.
	Status bool `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	// Last time the condition was updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *PipelineReadyCondition) Reset() {
	*x = PipelineReadyCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineReadyCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineReadyCondition) ProtoMessage() {}

func (x *PipelineReadyCondition) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineReadyCondition.ProtoReflect.Descriptor instead.
func (*PipelineReadyCondition) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{14}
}

func (x *PipelineReadyCondition) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *PipelineReadyCondition) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// `TargetsPresentCondition` contains information on any Targets referenced in
// the Delivery Pipeline that do not actually exist.
type TargetsPresentCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if there aren't any missing Targets.
	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// The list of Target names that do not exist. For example,
	// `projects/{project_id}/locations/{location_name}/targets/{target_name}`.
	MissingTargets []string `protobuf:"bytes,2,rep,name=missing_targets,json=missingTargets,proto3" json:"missing_targets,omitempty"`
	// Last time the condition was updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *TargetsPresentCondition) Reset() {
	*x = TargetsPresentCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetsPresentCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetsPresentCondition) ProtoMessage() {}

func (x *TargetsPresentCondition) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetsPresentCondition.ProtoReflect.Descriptor instead.
func (*TargetsPresentCondition) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{15}
}

func (x *TargetsPresentCondition) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *TargetsPresentCondition) GetMissingTargets() []string {
	if x != nil {
		return x.MissingTargets
	}
	return nil
}

func (x *TargetsPresentCondition) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// TargetsTypeCondition contains information on whether the Targets defined in
// the Delivery Pipeline are of the same type.
type TargetsTypeCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if the targets are all a comparable type. For example this is true if
	// all targets are GKE clusters. This is false if some targets are Cloud Run
	// targets and others are GKE clusters.
	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Human readable error message.
	ErrorDetails string `protobuf:"bytes,2,opt,name=error_details,json=errorDetails,proto3" json:"error_details,omitempty"`
}

func (x *TargetsTypeCondition) Reset() {
	*x = TargetsTypeCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetsTypeCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetsTypeCondition) ProtoMessage() {}

func (x *TargetsTypeCondition) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetsTypeCondition.ProtoReflect.Descriptor instead.
func (*TargetsTypeCondition) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{16}
}

func (x *TargetsTypeCondition) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *TargetsTypeCondition) GetErrorDetails() string {
	if x != nil {
		return x.ErrorDetails
	}
	return ""
}

// PipelineCondition contains all conditions relevant to a Delivery Pipeline.
type PipelineCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Details around the Pipeline's overall status.
	PipelineReadyCondition *PipelineReadyCondition `protobuf:"bytes,1,opt,name=pipeline_ready_condition,json=pipelineReadyCondition,proto3" json:"pipeline_ready_condition,omitempty"`
	// Details around targets enumerated in the pipeline.
	TargetsPresentCondition *TargetsPresentCondition `protobuf:"bytes,3,opt,name=targets_present_condition,json=targetsPresentCondition,proto3" json:"targets_present_condition,omitempty"`
	// Details on the whether the targets enumerated in the pipeline are of the
	// same type.
	TargetsTypeCondition *TargetsTypeCondition `protobuf:"bytes,4,opt,name=targets_type_condition,json=targetsTypeCondition,proto3" json:"targets_type_condition,omitempty"`
}

func (x *PipelineCondition) Reset() {
	*x = PipelineCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCondition) ProtoMessage() {}

func (x *PipelineCondition) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCondition.ProtoReflect.Descriptor instead.
func (*PipelineCondition) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{17}
}

func (x *PipelineCondition) GetPipelineReadyCondition() *PipelineReadyCondition {
	if x != nil {
		return x.PipelineReadyCondition
	}
	return nil
}

func (x *PipelineCondition) GetTargetsPresentCondition() *TargetsPresentCondition {
	if x != nil {
		return x.TargetsPresentCondition
	}
	return nil
}

func (x *PipelineCondition) GetTargetsTypeCondition() *TargetsTypeCondition {
	if x != nil {
		return x.TargetsTypeCondition
	}
	return nil
}

// A `Target` resource in the Cloud Deploy API.
//
// A `Target` defines a location to which a Skaffold configuration
// can be deployed.
type Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Name of the `Target`. Format is
	// `projects/{project}/locations/{location}/targets/[a-z][a-z0-9\-]{0,62}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Resource id of the `Target`.
	TargetId string `protobuf:"bytes,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	// Output only. Unique identifier of the `Target`.
	Uid string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	// Optional. Description of the `Target`. Max length is 255 characters.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Optional. User annotations. These attributes can only be set and used by
	// the user, and not by Cloud Deploy. See
	// https://google.aip.dev/128#annotations for more details such as format and
	// size limitations.
	Annotations map[string]string `protobuf:"bytes,5,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional. Labels are attributes that can be set and used by both the
	// user and by Cloud Deploy. Labels must meet the following constraints:
	//
	// * Keys and values can contain only lowercase letters, numeric characters,
	// underscores, and dashes.
	// * All characters must use UTF-8 encoding, and international characters are
	// allowed.
	// * Keys must start with a lowercase letter or international character.
	// * Each resource is limited to a maximum of 64 labels.
	//
	// Both keys and values are additionally constrained to be <= 128 bytes.
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional. Whether or not the `Target` requires approval.
	RequireApproval bool `protobuf:"varint,13,opt,name=require_approval,json=requireApproval,proto3" json:"require_approval,omitempty"`
	// Output only. Time at which the `Target` was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Most recent time at which the `Target` was updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Destination to which the Skaffold configuration is applied during a
	// rollout.
	//
	// Types that are assignable to DeploymentTarget:
	//
	//	*Target_Gke
	//	*Target_AnthosCluster
	//	*Target_Run
	//	*Target_MultiTarget
	//	*Target_CustomTarget
	DeploymentTarget isTarget_DeploymentTarget `protobuf_oneof:"deployment_target"`
	// Optional. This checksum is computed by the server based on the value of
	// other fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	Etag string `protobuf:"bytes,12,opt,name=etag,proto3" json:"etag,omitempty"`
	// Configurations for all execution that relates to this `Target`.
	// Each `ExecutionEnvironmentUsage` value may only be used in a single
	// configuration; using the same value multiple times is an error.
	// When one or more configurations are specified, they must include the
	// `RENDER` and `DEPLOY` `ExecutionEnvironmentUsage` values.
	// When no configurations are specified, execution will use the default
	// specified in `DefaultPool`.
	ExecutionConfigs []*ExecutionConfig `protobuf:"bytes,16,rep,name=execution_configs,json=executionConfigs,proto3" json:"execution_configs,omitempty"`
	// Optional. The deploy parameters to use for this target.
	DeployParameters map[string]string `protobuf:"bytes,20,rep,name=deploy_parameters,json=deployParameters,proto3" json:"deploy_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Target) Reset() {
	*x = Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Target) ProtoMessage() {}

func (x *Target) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Target.ProtoReflect.Descriptor instead.
func (*Target) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{18}
}

func (x *Target) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Target) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *Target) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Target) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Target) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Target) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Target) GetRequireApproval() bool {
	if x != nil {
		return x.RequireApproval
	}
	return false
}

func (x *Target) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Target) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (m *Target) GetDeploymentTarget() isTarget_DeploymentTarget {
	if m != nil {
		return m.DeploymentTarget
	}
	return nil
}

func (x *Target) GetGke() *GkeCluster {
	if x, ok := x.GetDeploymentTarget().(*Target_Gke); ok {
		return x.Gke
	}
	return nil
}

func (x *Target) GetAnthosCluster() *AnthosCluster {
	if x, ok := x.GetDeploymentTarget().(*Target_AnthosCluster); ok {
		return x.AnthosCluster
	}
	return nil
}

func (x *Target) GetRun() *CloudRunLocation {
	if x, ok := x.GetDeploymentTarget().(*Target_Run); ok {
		return x.Run
	}
	return nil
}

func (x *Target) GetMultiTarget() *MultiTarget {
	if x, ok := x.GetDeploymentTarget().(*Target_MultiTarget); ok {
		return x.MultiTarget
	}
	return nil
}

func (x *Target) GetCustomTarget() *CustomTarget {
	if x, ok := x.GetDeploymentTarget().(*Target_CustomTarget); ok {
		return x.CustomTarget
	}
	return nil
}

func (x *Target) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *Target) GetExecutionConfigs() []*ExecutionConfig {
	if x != nil {
		return x.ExecutionConfigs
	}
	return nil
}

func (x *Target) GetDeployParameters() map[string]string {
	if x != nil {
		return x.DeployParameters
	}
	return nil
}

type isTarget_DeploymentTarget interface {
	isTarget_DeploymentTarget()
}

type Target_Gke struct {
	// Optional. Information specifying a GKE Cluster.
	Gke *GkeCluster `protobuf:"bytes,15,opt,name=gke,proto3,oneof"`
}

type Target_AnthosCluster struct {
	// Optional. Information specifying an Anthos Cluster.
	AnthosCluster *AnthosCluster `protobuf:"bytes,17,opt,name=anthos_cluster,json=anthosCluster,proto3,oneof"`
}

type Target_Run struct {
	// Optional. Information specifying a Cloud Run deployment target.
	Run *CloudRunLocation `protobuf:"bytes,18,opt,name=run,proto3,oneof"`
}

type Target_MultiTarget struct {
	// Optional. Information specifying a multiTarget.
	MultiTarget *MultiTarget `protobuf:"bytes,19,opt,name=multi_target,json=multiTarget,proto3,oneof"`
}

type Target_CustomTarget struct {
	// Optional. Information specifying a Custom Target.
	CustomTarget *CustomTarget `protobuf:"bytes,21,opt,name=custom_target,json=customTarget,proto3,oneof"`
}

func (*Target_Gke) isTarget_DeploymentTarget() {}

func (*Target_AnthosCluster) isTarget_DeploymentTarget() {}

func (*Target_Run) isTarget_DeploymentTarget() {}

func (*Target_MultiTarget) isTarget_DeploymentTarget() {}

func (*Target_CustomTarget) isTarget_DeploymentTarget() {}

// Configuration of the environment to use when calling Skaffold.
type ExecutionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Usages when this configuration should be applied.
	Usages []ExecutionConfig_ExecutionEnvironmentUsage `protobuf:"varint,1,rep,packed,name=usages,proto3,enum=google.events.cloud.deploy.v1.ExecutionConfig_ExecutionEnvironmentUsage" json:"usages,omitempty"`
	// Details of the environment.
	//
	// Types that are assignable to ExecutionEnvironment:
	//
	//	*ExecutionConfig_DefaultPool
	//	*ExecutionConfig_PrivatePool
	ExecutionEnvironment isExecutionConfig_ExecutionEnvironment `protobuf_oneof:"execution_environment"`
	// Optional. The resource name of the `WorkerPool`, with the format
	// `projects/{project}/locations/{location}/workerPools/{worker_pool}`.
	// If this optional field is unspecified, the default Cloud Build pool will be
	// used.
	WorkerPool string `protobuf:"bytes,4,opt,name=worker_pool,json=workerPool,proto3" json:"worker_pool,omitempty"`
	// Optional. Google service account to use for execution. If unspecified,
	// the project execution service account
	// (<PROJECT_NUMBER>-compute@developer.gserviceaccount.com) is used.
	ServiceAccount string `protobuf:"bytes,5,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// Optional. Cloud Storage location in which to store execution outputs. This
	// can either be a bucket ("gs://my-bucket") or a path within a bucket
	// ("gs://my-bucket/my-dir").
	// If unspecified, a default bucket located in the same region will be used.
	ArtifactStorage string `protobuf:"bytes,6,opt,name=artifact_storage,json=artifactStorage,proto3" json:"artifact_storage,omitempty"`
	// Optional. Execution timeout for a Cloud Build Execution. This must be
	// between 10m and 24h in seconds format. If unspecified, a default timeout of
	// 1h is used.
	ExecutionTimeout *durationpb.Duration `protobuf:"bytes,7,opt,name=execution_timeout,json=executionTimeout,proto3" json:"execution_timeout,omitempty"`
}

func (x *ExecutionConfig) Reset() {
	*x = ExecutionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionConfig) ProtoMessage() {}

func (x *ExecutionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionConfig.ProtoReflect.Descriptor instead.
func (*ExecutionConfig) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{19}
}

func (x *ExecutionConfig) GetUsages() []ExecutionConfig_ExecutionEnvironmentUsage {
	if x != nil {
		return x.Usages
	}
	return nil
}

func (m *ExecutionConfig) GetExecutionEnvironment() isExecutionConfig_ExecutionEnvironment {
	if m != nil {
		return m.ExecutionEnvironment
	}
	return nil
}

func (x *ExecutionConfig) GetDefaultPool() *DefaultPool {
	if x, ok := x.GetExecutionEnvironment().(*ExecutionConfig_DefaultPool); ok {
		return x.DefaultPool
	}
	return nil
}

func (x *ExecutionConfig) GetPrivatePool() *PrivatePool {
	if x, ok := x.GetExecutionEnvironment().(*ExecutionConfig_PrivatePool); ok {
		return x.PrivatePool
	}
	return nil
}

func (x *ExecutionConfig) GetWorkerPool() string {
	if x != nil {
		return x.WorkerPool
	}
	return ""
}

func (x *ExecutionConfig) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *ExecutionConfig) GetArtifactStorage() string {
	if x != nil {
		return x.ArtifactStorage
	}
	return ""
}

func (x *ExecutionConfig) GetExecutionTimeout() *durationpb.Duration {
	if x != nil {
		return x.ExecutionTimeout
	}
	return nil
}

type isExecutionConfig_ExecutionEnvironment interface {
	isExecutionConfig_ExecutionEnvironment()
}

type ExecutionConfig_DefaultPool struct {
	// Optional. Use default Cloud Build pool.
	DefaultPool *DefaultPool `protobuf:"bytes,2,opt,name=default_pool,json=defaultPool,proto3,oneof"`
}

type ExecutionConfig_PrivatePool struct {
	// Optional. Use private Cloud Build pool.
	PrivatePool *PrivatePool `protobuf:"bytes,3,opt,name=private_pool,json=privatePool,proto3,oneof"`
}

func (*ExecutionConfig_DefaultPool) isExecutionConfig_ExecutionEnvironment() {}

func (*ExecutionConfig_PrivatePool) isExecutionConfig_ExecutionEnvironment() {}

// Execution using the default Cloud Build pool.
type DefaultPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Google service account to use for execution. If unspecified,
	// the project execution service account
	// (<PROJECT_NUMBER>-compute@developer.gserviceaccount.com) will be used.
	ServiceAccount string `protobuf:"bytes,1,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// Optional. Cloud Storage location where execution outputs should be stored.
	// This can either be a bucket ("gs://my-bucket") or a path within a bucket
	// ("gs://my-bucket/my-dir").
	// If unspecified, a default bucket located in the same region will be used.
	ArtifactStorage string `protobuf:"bytes,2,opt,name=artifact_storage,json=artifactStorage,proto3" json:"artifact_storage,omitempty"`
}

func (x *DefaultPool) Reset() {
	*x = DefaultPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultPool) ProtoMessage() {}

func (x *DefaultPool) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultPool.ProtoReflect.Descriptor instead.
func (*DefaultPool) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{20}
}

func (x *DefaultPool) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *DefaultPool) GetArtifactStorage() string {
	if x != nil {
		return x.ArtifactStorage
	}
	return ""
}

// Execution using a private Cloud Build pool.
type PrivatePool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Resource name of the Cloud Build worker pool to use. The format
	// is `projects/{project}/locations/{location}/workerPools/{pool}`.
	WorkerPool string `protobuf:"bytes,1,opt,name=worker_pool,json=workerPool,proto3" json:"worker_pool,omitempty"`
	// Optional. Google service account to use for execution. If unspecified,
	// the project execution service account
	// (<PROJECT_NUMBER>-compute@developer.gserviceaccount.com) will be used.
	ServiceAccount string `protobuf:"bytes,2,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// Optional. Cloud Storage location where execution outputs should be stored.
	// This can either be a bucket ("gs://my-bucket") or a path within a bucket
	// ("gs://my-bucket/my-dir").
	// If unspecified, a default bucket located in the same region will be used.
	ArtifactStorage string `protobuf:"bytes,3,opt,name=artifact_storage,json=artifactStorage,proto3" json:"artifact_storage,omitempty"`
}

func (x *PrivatePool) Reset() {
	*x = PrivatePool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivatePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivatePool) ProtoMessage() {}

func (x *PrivatePool) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivatePool.ProtoReflect.Descriptor instead.
func (*PrivatePool) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{21}
}

func (x *PrivatePool) GetWorkerPool() string {
	if x != nil {
		return x.WorkerPool
	}
	return ""
}

func (x *PrivatePool) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *PrivatePool) GetArtifactStorage() string {
	if x != nil {
		return x.ArtifactStorage
	}
	return ""
}

// Information specifying a GKE Cluster.
type GkeCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information specifying a GKE Cluster. Format is
	// `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`.
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Optional. If true, `cluster` is accessed using the private IP address of
	// the control plane endpoint. Otherwise, the default IP address of the
	// control plane endpoint is used. The default IP address is the private IP
	// address for clusters with private control-plane endpoints and the public IP
	// address otherwise.
	//
	// Only specify this option when `cluster` is a [private GKE
	// cluster](https://cloud.google.com/kubernetes-engine/docs/concepts/private-cluster-concept).
	InternalIp bool `protobuf:"varint,2,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
}

func (x *GkeCluster) Reset() {
	*x = GkeCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GkeCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GkeCluster) ProtoMessage() {}

func (x *GkeCluster) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GkeCluster.ProtoReflect.Descriptor instead.
func (*GkeCluster) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{22}
}

func (x *GkeCluster) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *GkeCluster) GetInternalIp() bool {
	if x != nil {
		return x.InternalIp
	}
	return false
}

// Information specifying an Anthos Cluster.
type AnthosCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Membership of the GKE Hub-registered cluster to which to apply the Skaffold
	// configuration. Format is
	// `projects/{project}/locations/{location}/memberships/{membership_name}`.
	Membership string `protobuf:"bytes,1,opt,name=membership,proto3" json:"membership,omitempty"`
}

func (x *AnthosCluster) Reset() {
	*x = AnthosCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnthosCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnthosCluster) ProtoMessage() {}

func (x *AnthosCluster) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnthosCluster.ProtoReflect.Descriptor instead.
func (*AnthosCluster) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{23}
}

func (x *AnthosCluster) GetMembership() string {
	if x != nil {
		return x.Membership
	}
	return ""
}

// Information specifying where to deploy a Cloud Run Service.
type CloudRunLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The location for the Cloud Run Service. Format must be
	// `projects/{project}/locations/{location}`.
	Location string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *CloudRunLocation) Reset() {
	*x = CloudRunLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudRunLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudRunLocation) ProtoMessage() {}

func (x *CloudRunLocation) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudRunLocation.ProtoReflect.Descriptor instead.
func (*CloudRunLocation) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{24}
}

func (x *CloudRunLocation) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

// Information specifying a multiTarget.
type MultiTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The target_ids of this multiTarget.
	TargetIds []string `protobuf:"bytes,1,rep,name=target_ids,json=targetIds,proto3" json:"target_ids,omitempty"`
}

func (x *MultiTarget) Reset() {
	*x = MultiTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTarget) ProtoMessage() {}

func (x *MultiTarget) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTarget.ProtoReflect.Descriptor instead.
func (*MultiTarget) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{25}
}

func (x *MultiTarget) GetTargetIds() []string {
	if x != nil {
		return x.TargetIds
	}
	return nil
}

// Information specifying a Custom Target.
type CustomTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the CustomTargetType. Format must be
	// `projects/{project}/locations/{location}/customTargetTypes/{custom_target_type}`.
	CustomTargetType string `protobuf:"bytes,1,opt,name=custom_target_type,json=customTargetType,proto3" json:"custom_target_type,omitempty"`
}

func (x *CustomTarget) Reset() {
	*x = CustomTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomTarget) ProtoMessage() {}

func (x *CustomTarget) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomTarget.ProtoReflect.Descriptor instead.
func (*CustomTarget) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{26}
}

func (x *CustomTarget) GetCustomTargetType() string {
	if x != nil {
		return x.CustomTargetType
	}
	return ""
}

// A `CustomTargetType` resource in the Cloud Deploy API.
//
// A `CustomTargetType` defines a type of custom target that can be referenced
// in a `Target` in order to facilitate deploying to other systems besides the
// supported runtimes.
type CustomTargetType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Name of the `CustomTargetType`. Format is
	// `projects/{project}/locations/{location}/customTargetTypes/[a-z][a-z0-9\-]{0,62}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Resource id of the `CustomTargetType`.
	CustomTargetTypeId string `protobuf:"bytes,2,opt,name=custom_target_type_id,json=customTargetTypeId,proto3" json:"custom_target_type_id,omitempty"`
	// Output only. Unique identifier of the `CustomTargetType`.
	Uid string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	// Optional. Description of the `CustomTargetType`. Max length is 255
	// characters.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Optional. User annotations. These attributes can only be set and used by
	// the user, and not by Cloud Deploy. See
	// https://google.aip.dev/128#annotations for more details such as format and
	// size limitations.
	Annotations map[string]string `protobuf:"bytes,5,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional. Labels are attributes that can be set and used by both the
	// user and by Cloud Deploy. Labels must meet the following constraints:
	//
	// * Keys and values can contain only lowercase letters, numeric characters,
	// underscores, and dashes.
	// * All characters must use UTF-8 encoding, and international characters are
	// allowed.
	// * Keys must start with a lowercase letter or international character.
	// * Each resource is limited to a maximum of 64 labels.
	//
	// Both keys and values are additionally constrained to be <= 128 bytes.
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only. Time at which the `CustomTargetType` was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Most recent time at which the `CustomTargetType` was updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional. This checksum is computed by the server based on the value of
	// other fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	Etag string `protobuf:"bytes,9,opt,name=etag,proto3" json:"etag,omitempty"`
	// Defines the `CustomTargetType` renderer and deployer.
	//
	// Types that are assignable to Definition:
	//
	//	*CustomTargetType_CustomActions
	Definition isCustomTargetType_Definition `protobuf_oneof:"definition"`
}

func (x *CustomTargetType) Reset() {
	*x = CustomTargetType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomTargetType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomTargetType) ProtoMessage() {}

func (x *CustomTargetType) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomTargetType.ProtoReflect.Descriptor instead.
func (*CustomTargetType) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{27}
}

func (x *CustomTargetType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CustomTargetType) GetCustomTargetTypeId() string {
	if x != nil {
		return x.CustomTargetTypeId
	}
	return ""
}

func (x *CustomTargetType) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *CustomTargetType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CustomTargetType) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *CustomTargetType) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CustomTargetType) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *CustomTargetType) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *CustomTargetType) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (m *CustomTargetType) GetDefinition() isCustomTargetType_Definition {
	if m != nil {
		return m.Definition
	}
	return nil
}

func (x *CustomTargetType) GetCustomActions() *CustomTargetSkaffoldActions {
	if x, ok := x.GetDefinition().(*CustomTargetType_CustomActions); ok {
		return x.CustomActions
	}
	return nil
}

type isCustomTargetType_Definition interface {
	isCustomTargetType_Definition()
}

type CustomTargetType_CustomActions struct {
	// Configures render and deploy for the `CustomTargetType` using Skaffold
	// custom actions.
	CustomActions *CustomTargetSkaffoldActions `protobuf:"bytes,10,opt,name=custom_actions,json=customActions,proto3,oneof"`
}

func (*CustomTargetType_CustomActions) isCustomTargetType_Definition() {}

// CustomTargetSkaffoldActions represents the `CustomTargetType` configuration
// using Skaffold custom actions.
type CustomTargetSkaffoldActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The Skaffold custom action responsible for render operations. If
	// not provided then Cloud Deploy will perform the render operations via
	// `skaffold render`.
	RenderAction string `protobuf:"bytes,1,opt,name=render_action,json=renderAction,proto3" json:"render_action,omitempty"`
	// Required. The Skaffold custom action responsible for deploy operations.
	DeployAction string `protobuf:"bytes,2,opt,name=deploy_action,json=deployAction,proto3" json:"deploy_action,omitempty"`
	// Optional. List of Skaffold modules Cloud Deploy will include in the
	// Skaffold Config as required before performing diagnose.
	IncludeSkaffoldModules []*SkaffoldModules `protobuf:"bytes,3,rep,name=include_skaffold_modules,json=includeSkaffoldModules,proto3" json:"include_skaffold_modules,omitempty"`
}

func (x *CustomTargetSkaffoldActions) Reset() {
	*x = CustomTargetSkaffoldActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomTargetSkaffoldActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomTargetSkaffoldActions) ProtoMessage() {}

func (x *CustomTargetSkaffoldActions) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomTargetSkaffoldActions.ProtoReflect.Descriptor instead.
func (*CustomTargetSkaffoldActions) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{28}
}

func (x *CustomTargetSkaffoldActions) GetRenderAction() string {
	if x != nil {
		return x.RenderAction
	}
	return ""
}

func (x *CustomTargetSkaffoldActions) GetDeployAction() string {
	if x != nil {
		return x.DeployAction
	}
	return ""
}

func (x *CustomTargetSkaffoldActions) GetIncludeSkaffoldModules() []*SkaffoldModules {
	if x != nil {
		return x.IncludeSkaffoldModules
	}
	return nil
}

// Skaffold Config modules and their remote source.
type SkaffoldModules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The Skaffold Config modules to use from the specified source.
	Configs []string `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
	// The source that contains the Skaffold Config modules.
	//
	// Types that are assignable to Source:
	//
	//	*SkaffoldModules_Git
	//	*SkaffoldModules_GoogleCloudStorage
	Source isSkaffoldModules_Source `protobuf_oneof:"source"`
}

func (x *SkaffoldModules) Reset() {
	*x = SkaffoldModules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkaffoldModules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkaffoldModules) ProtoMessage() {}

func (x *SkaffoldModules) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkaffoldModules.ProtoReflect.Descriptor instead.
func (*SkaffoldModules) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{29}
}

func (x *SkaffoldModules) GetConfigs() []string {
	if x != nil {
		return x.Configs
	}
	return nil
}

func (m *SkaffoldModules) GetSource() isSkaffoldModules_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *SkaffoldModules) GetGit() *SkaffoldModules_SkaffoldGitSource {
	if x, ok := x.GetSource().(*SkaffoldModules_Git); ok {
		return x.Git
	}
	return nil
}

func (x *SkaffoldModules) GetGoogleCloudStorage() *SkaffoldModules_SkaffoldGCSSource {
	if x, ok := x.GetSource().(*SkaffoldModules_GoogleCloudStorage); ok {
		return x.GoogleCloudStorage
	}
	return nil
}

type isSkaffoldModules_Source interface {
	isSkaffoldModules_Source()
}

type SkaffoldModules_Git struct {
	// Remote git repository containing the Skaffold Config modules.
	Git *SkaffoldModules_SkaffoldGitSource `protobuf:"bytes,2,opt,name=git,proto3,oneof"`
}

type SkaffoldModules_GoogleCloudStorage struct {
	// Cloud Storage bucket containing the Skaffold Config modules.
	GoogleCloudStorage *SkaffoldModules_SkaffoldGCSSource `protobuf:"bytes,3,opt,name=google_cloud_storage,json=googleCloudStorage,proto3,oneof"`
}

func (*SkaffoldModules_Git) isSkaffoldModules_Source() {}

func (*SkaffoldModules_GoogleCloudStorage) isSkaffoldModules_Source() {}

// Contains criteria for selecting Targets.
type TargetAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the `Target`. The value of this field could be one of the
	// following:
	// * The last segment of a target name. It only needs the ID to determine
	// which target is being referred to
	// * "*", all targets in a location.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Target labels.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TargetAttribute) Reset() {
	*x = TargetAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetAttribute) ProtoMessage() {}

func (x *TargetAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetAttribute.ProtoReflect.Descriptor instead.
func (*TargetAttribute) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{30}
}

func (x *TargetAttribute) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TargetAttribute) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// A `Release` resource in the Cloud Deploy API.
//
// A `Release` defines a specific Skaffold configuration instance
// that can be deployed.
type Release struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Name of the `Release`. Format is
	// `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/[a-z][a-z0-9\-]{0,62}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Unique identifier of the `Release`.
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// Description of the `Release`. Max length is 255 characters.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// User annotations. These attributes can only be set and used by the
	// user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations
	// for more details such as format and size limitations.
	Annotations map[string]string `protobuf:"bytes,4,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Labels are attributes that can be set and used by both the
	// user and by Cloud Deploy. Labels must meet the following constraints:
	//
	// * Keys and values can contain only lowercase letters, numeric characters,
	// underscores, and dashes.
	// * All characters must use UTF-8 encoding, and international characters are
	// allowed.
	// * Keys must start with a lowercase letter or international character.
	// * Each resource is limited to a maximum of 64 labels.
	//
	// Both keys and values are additionally constrained to be <= 128 bytes.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only. Indicates whether this is an abandoned release.
	Abandoned bool `protobuf:"varint,23,opt,name=abandoned,proto3" json:"abandoned,omitempty"`
	// Output only. Time at which the `Release` was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Time at which the render began.
	RenderStartTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=render_start_time,json=renderStartTime,proto3" json:"render_start_time,omitempty"`
	// Output only. Time at which the render completed.
	RenderEndTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=render_end_time,json=renderEndTime,proto3" json:"render_end_time,omitempty"`
	// Cloud Storage URI of tar.gz archive containing Skaffold configuration.
	SkaffoldConfigUri string `protobuf:"bytes,17,opt,name=skaffold_config_uri,json=skaffoldConfigUri,proto3" json:"skaffold_config_uri,omitempty"`
	// Filepath of the Skaffold config inside of the config URI.
	SkaffoldConfigPath string `protobuf:"bytes,9,opt,name=skaffold_config_path,json=skaffoldConfigPath,proto3" json:"skaffold_config_path,omitempty"`
	// List of artifacts to pass through to Skaffold command.
	BuildArtifacts []*BuildArtifact `protobuf:"bytes,10,rep,name=build_artifacts,json=buildArtifacts,proto3" json:"build_artifacts,omitempty"`
	// Output only. Snapshot of the parent pipeline taken at release creation
	// time.
	DeliveryPipelineSnapshot *DeliveryPipeline `protobuf:"bytes,11,opt,name=delivery_pipeline_snapshot,json=deliveryPipelineSnapshot,proto3" json:"delivery_pipeline_snapshot,omitempty"`
	// Output only. Snapshot of the targets taken at release creation time.
	TargetSnapshots []*Target `protobuf:"bytes,12,rep,name=target_snapshots,json=targetSnapshots,proto3" json:"target_snapshots,omitempty"`
	// Output only. Snapshot of the custom target types referenced by the targets
	// taken at release creation time.
	CustomTargetTypeSnapshots []*CustomTargetType `protobuf:"bytes,27,rep,name=custom_target_type_snapshots,json=customTargetTypeSnapshots,proto3" json:"custom_target_type_snapshots,omitempty"`
	// Output only. Current state of the render operation.
	RenderState Release_RenderState `protobuf:"varint,13,opt,name=render_state,json=renderState,proto3,enum=google.events.cloud.deploy.v1.Release_RenderState" json:"render_state,omitempty"`
	// This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	Etag string `protobuf:"bytes,16,opt,name=etag,proto3" json:"etag,omitempty"`
	// The Skaffold version to use when operating on this release, such as
	// "1.20.0". Not all versions are valid; Cloud Deploy supports a specific set
	// of versions.
	//
	// If unset, the most recent supported Skaffold version will be used.
	SkaffoldVersion string `protobuf:"bytes,19,opt,name=skaffold_version,json=skaffoldVersion,proto3" json:"skaffold_version,omitempty"`
	// Output only. Map from target ID to the target artifacts created
	// during the render operation.
	TargetArtifacts map[string]*TargetArtifact `protobuf:"bytes,20,rep,name=target_artifacts,json=targetArtifacts,proto3" json:"target_artifacts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only. Map from target ID to details of the render operation for that
	// target.
	TargetRenders map[string]*Release_TargetRender `protobuf:"bytes,22,rep,name=target_renders,json=targetRenders,proto3" json:"target_renders,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only. Information around the state of the Release.
	Condition *Release_ReleaseCondition `protobuf:"bytes,24,opt,name=condition,proto3" json:"condition,omitempty"`
	// Optional. The deploy parameters to use for all targets in this release.
	DeployParameters map[string]string `protobuf:"bytes,25,rep,name=deploy_parameters,json=deployParameters,proto3" json:"deploy_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Release) Reset() {
	*x = Release{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Release) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release) ProtoMessage() {}

func (x *Release) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release.ProtoReflect.Descriptor instead.
func (*Release) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{31}
}

func (x *Release) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Release) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Release) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Release) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Release) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Release) GetAbandoned() bool {
	if x != nil {
		return x.Abandoned
	}
	return false
}

func (x *Release) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Release) GetRenderStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RenderStartTime
	}
	return nil
}

func (x *Release) GetRenderEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RenderEndTime
	}
	return nil
}

func (x *Release) GetSkaffoldConfigUri() string {
	if x != nil {
		return x.SkaffoldConfigUri
	}
	return ""
}

func (x *Release) GetSkaffoldConfigPath() string {
	if x != nil {
		return x.SkaffoldConfigPath
	}
	return ""
}

func (x *Release) GetBuildArtifacts() []*BuildArtifact {
	if x != nil {
		return x.BuildArtifacts
	}
	return nil
}

func (x *Release) GetDeliveryPipelineSnapshot() *DeliveryPipeline {
	if x != nil {
		return x.DeliveryPipelineSnapshot
	}
	return nil
}

func (x *Release) GetTargetSnapshots() []*Target {
	if x != nil {
		return x.TargetSnapshots
	}
	return nil
}

func (x *Release) GetCustomTargetTypeSnapshots() []*CustomTargetType {
	if x != nil {
		return x.CustomTargetTypeSnapshots
	}
	return nil
}

func (x *Release) GetRenderState() Release_RenderState {
	if x != nil {
		return x.RenderState
	}
	return Release_RENDER_STATE_UNSPECIFIED
}

func (x *Release) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *Release) GetSkaffoldVersion() string {
	if x != nil {
		return x.SkaffoldVersion
	}
	return ""
}

func (x *Release) GetTargetArtifacts() map[string]*TargetArtifact {
	if x != nil {
		return x.TargetArtifacts
	}
	return nil
}

func (x *Release) GetTargetRenders() map[string]*Release_TargetRender {
	if x != nil {
		return x.TargetRenders
	}
	return nil
}

func (x *Release) GetCondition() *Release_ReleaseCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Release) GetDeployParameters() map[string]string {
	if x != nil {
		return x.DeployParameters
	}
	return nil
}

// Description of an a image to use during Skaffold rendering.
type BuildArtifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Image name in Skaffold configuration.
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	// Image tag to use. This will generally be the full path to an image, such
	// as "gcr.io/my-project/busybox:1.2.3" or
	// "gcr.io/my-project/busybox@sha256:abc123".
	Tag string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *BuildArtifact) Reset() {
	*x = BuildArtifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildArtifact) ProtoMessage() {}

func (x *BuildArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildArtifact.ProtoReflect.Descriptor instead.
func (*BuildArtifact) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{32}
}

func (x *BuildArtifact) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *BuildArtifact) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

// The artifacts produced by a target render operation.
type TargetArtifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Uri:
	//
	//	*TargetArtifact_ArtifactUri
	Uri isTargetArtifact_Uri `protobuf_oneof:"uri"`
	// Output only. File path of the resolved Skaffold configuration relative to
	// the URI.
	SkaffoldConfigPath string `protobuf:"bytes,2,opt,name=skaffold_config_path,json=skaffoldConfigPath,proto3" json:"skaffold_config_path,omitempty"`
	// Output only. File path of the rendered manifest relative to the URI.
	ManifestPath string `protobuf:"bytes,3,opt,name=manifest_path,json=manifestPath,proto3" json:"manifest_path,omitempty"`
	// Output only. Map from the phase ID to the phase artifacts for the `Target`.
	PhaseArtifacts map[string]*TargetArtifact_PhaseArtifact `protobuf:"bytes,5,rep,name=phase_artifacts,json=phaseArtifacts,proto3" json:"phase_artifacts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TargetArtifact) Reset() {
	*x = TargetArtifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetArtifact) ProtoMessage() {}

func (x *TargetArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetArtifact.ProtoReflect.Descriptor instead.
func (*TargetArtifact) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{33}
}

func (m *TargetArtifact) GetUri() isTargetArtifact_Uri {
	if m != nil {
		return m.Uri
	}
	return nil
}

func (x *TargetArtifact) GetArtifactUri() string {
	if x, ok := x.GetUri().(*TargetArtifact_ArtifactUri); ok {
		return x.ArtifactUri
	}
	return ""
}

func (x *TargetArtifact) GetSkaffoldConfigPath() string {
	if x != nil {
		return x.SkaffoldConfigPath
	}
	return ""
}

func (x *TargetArtifact) GetManifestPath() string {
	if x != nil {
		return x.ManifestPath
	}
	return ""
}

func (x *TargetArtifact) GetPhaseArtifacts() map[string]*TargetArtifact_PhaseArtifact {
	if x != nil {
		return x.PhaseArtifacts
	}
	return nil
}

type isTargetArtifact_Uri interface {
	isTargetArtifact_Uri()
}

type TargetArtifact_ArtifactUri struct {
	// Output only. URI of a directory containing the artifacts. This contains
	// deployment configuration used by Skaffold during a rollout, and all
	// paths are relative to this location.
	ArtifactUri string `protobuf:"bytes,4,opt,name=artifact_uri,json=artifactUri,proto3,oneof"`
}

func (*TargetArtifact_ArtifactUri) isTargetArtifact_Uri() {}

// CloudRunRenderMetadata contains Cloud Run information associated with a
// `Release` render.
type CloudRunRenderMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The name of the Cloud Run Service in the rendered manifest.
	// Format is `projects/{project}/locations/{location}/services/{service}`.
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *CloudRunRenderMetadata) Reset() {
	*x = CloudRunRenderMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudRunRenderMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudRunRenderMetadata) ProtoMessage() {}

func (x *CloudRunRenderMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudRunRenderMetadata.ProtoReflect.Descriptor instead.
func (*CloudRunRenderMetadata) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{34}
}

func (x *CloudRunRenderMetadata) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

// RenderMetadata includes information associated with a `Release` render.
type RenderMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Metadata associated with rendering for Cloud Run.
	CloudRun *CloudRunRenderMetadata `protobuf:"bytes,1,opt,name=cloud_run,json=cloudRun,proto3" json:"cloud_run,omitempty"`
	// Output only. Custom metadata provided by user-defined render operation.
	Custom *CustomMetadata `protobuf:"bytes,2,opt,name=custom,proto3" json:"custom,omitempty"`
}

func (x *RenderMetadata) Reset() {
	*x = RenderMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderMetadata) ProtoMessage() {}

func (x *RenderMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderMetadata.ProtoReflect.Descriptor instead.
func (*RenderMetadata) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{35}
}

func (x *RenderMetadata) GetCloudRun() *CloudRunRenderMetadata {
	if x != nil {
		return x.CloudRun
	}
	return nil
}

func (x *RenderMetadata) GetCustom() *CustomMetadata {
	if x != nil {
		return x.Custom
	}
	return nil
}

// A `Rollout` resource in the Cloud Deploy API.
//
// A `Rollout` contains information around a specific deployment to a `Target`.
type Rollout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Name of the `Rollout`. Format is
	// `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/[a-z][a-z0-9\-]{0,62}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Unique identifier of the `Rollout`.
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// Description of the `Rollout` for user purposes. Max length is 255
	// characters.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// User annotations. These attributes can only be set and used by the
	// user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations
	// for more details such as format and size limitations.
	Annotations map[string]string `protobuf:"bytes,4,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Labels are attributes that can be set and used by both the
	// user and by Cloud Deploy. Labels must meet the following constraints:
	//
	// * Keys and values can contain only lowercase letters, numeric characters,
	// underscores, and dashes.
	// * All characters must use UTF-8 encoding, and international characters are
	// allowed.
	// * Keys must start with a lowercase letter or international character.
	// * Each resource is limited to a maximum of 64 labels.
	//
	// Both keys and values are additionally constrained to be <= 128 bytes.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only. Time at which the `Rollout` was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Time at which the `Rollout` was approved.
	ApproveTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=approve_time,json=approveTime,proto3" json:"approve_time,omitempty"`
	// Output only. Time at which the `Rollout` was enqueued.
	EnqueueTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=enqueue_time,json=enqueueTime,proto3" json:"enqueue_time,omitempty"`
	// Output only. Time at which the `Rollout` started deploying.
	DeployStartTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=deploy_start_time,json=deployStartTime,proto3" json:"deploy_start_time,omitempty"`
	// Output only. Time at which the `Rollout` finished deploying.
	DeployEndTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=deploy_end_time,json=deployEndTime,proto3" json:"deploy_end_time,omitempty"`
	// Required. The ID of Target to which this `Rollout` is deploying.
	TargetId string `protobuf:"bytes,18,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	// Output only. Approval state of the `Rollout`.
	ApprovalState Rollout_ApprovalState `protobuf:"varint,12,opt,name=approval_state,json=approvalState,proto3,enum=google.events.cloud.deploy.v1.Rollout_ApprovalState" json:"approval_state,omitempty"`
	// Output only. Current state of the `Rollout`.
	State Rollout_State `protobuf:"varint,13,opt,name=state,proto3,enum=google.events.cloud.deploy.v1.Rollout_State" json:"state,omitempty"`
	// Output only. Additional information about the rollout failure, if
	// available.
	FailureReason string `protobuf:"bytes,14,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
	// Output only. The resource name of the Cloud Build `Build` object that is
	// used to deploy the Rollout. Format is
	// `projects/{project}/locations/{location}/builds/{build}`.
	DeployingBuild string `protobuf:"bytes,17,opt,name=deploying_build,json=deployingBuild,proto3" json:"deploying_build,omitempty"`
	// This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	Etag string `protobuf:"bytes,16,opt,name=etag,proto3" json:"etag,omitempty"`
	// Output only. The reason this rollout failed. This will always be
	// unspecified while the rollout is in progress.
	DeployFailureCause Rollout_FailureCause `protobuf:"varint,19,opt,name=deploy_failure_cause,json=deployFailureCause,proto3,enum=google.events.cloud.deploy.v1.Rollout_FailureCause" json:"deploy_failure_cause,omitempty"`
	// Output only. The phases that represent the workflows of this `Rollout`.
	Phases []*Phase `protobuf:"bytes,23,rep,name=phases,proto3" json:"phases,omitempty"`
	// Output only. Metadata contains information about the rollout.
	Metadata *Metadata `protobuf:"bytes,24,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Output only. Name of the `ControllerRollout`. Format is
	// `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/[a-z][a-z0-9\-]{0,62}`.
	ControllerRollout string `protobuf:"bytes,25,opt,name=controller_rollout,json=controllerRollout,proto3" json:"controller_rollout,omitempty"`
	// Output only. Name of the `Rollout` that is rolled back by this `Rollout`.
	// Empty if this `Rollout` wasn't created as a rollback.
	RollbackOfRollout string `protobuf:"bytes,26,opt,name=rollback_of_rollout,json=rollbackOfRollout,proto3" json:"rollback_of_rollout,omitempty"`
	// Output only. Names of `Rollouts` that rolled back this `Rollout`.
	RolledBackByRollouts []string `protobuf:"bytes,27,rep,name=rolled_back_by_rollouts,json=rolledBackByRollouts,proto3" json:"rolled_back_by_rollouts,omitempty"`
}

func (x *Rollout) Reset() {
	*x = Rollout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rollout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rollout) ProtoMessage() {}

func (x *Rollout) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rollout.ProtoReflect.Descriptor instead.
func (*Rollout) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{36}
}

func (x *Rollout) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Rollout) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Rollout) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Rollout) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Rollout) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Rollout) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Rollout) GetApproveTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproveTime
	}
	return nil
}

func (x *Rollout) GetEnqueueTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EnqueueTime
	}
	return nil
}

func (x *Rollout) GetDeployStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeployStartTime
	}
	return nil
}

func (x *Rollout) GetDeployEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeployEndTime
	}
	return nil
}

func (x *Rollout) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *Rollout) GetApprovalState() Rollout_ApprovalState {
	if x != nil {
		return x.ApprovalState
	}
	return Rollout_APPROVAL_STATE_UNSPECIFIED
}

func (x *Rollout) GetState() Rollout_State {
	if x != nil {
		return x.State
	}
	return Rollout_STATE_UNSPECIFIED
}

func (x *Rollout) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

func (x *Rollout) GetDeployingBuild() string {
	if x != nil {
		return x.DeployingBuild
	}
	return ""
}

func (x *Rollout) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *Rollout) GetDeployFailureCause() Rollout_FailureCause {
	if x != nil {
		return x.DeployFailureCause
	}
	return Rollout_FAILURE_CAUSE_UNSPECIFIED
}

func (x *Rollout) GetPhases() []*Phase {
	if x != nil {
		return x.Phases
	}
	return nil
}

func (x *Rollout) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Rollout) GetControllerRollout() string {
	if x != nil {
		return x.ControllerRollout
	}
	return ""
}

func (x *Rollout) GetRollbackOfRollout() string {
	if x != nil {
		return x.RollbackOfRollout
	}
	return ""
}

func (x *Rollout) GetRolledBackByRollouts() []string {
	if x != nil {
		return x.RolledBackByRollouts
	}
	return nil
}

// Metadata includes information associated with a `Rollout`.
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The name of the Cloud Run Service that is associated with a
	// `Rollout`.
	CloudRun *CloudRunMetadata `protobuf:"bytes,1,opt,name=cloud_run,json=cloudRun,proto3" json:"cloud_run,omitempty"`
	// Output only. AutomationRolloutMetadata contains the information about the
	// interactions between Automation service and this rollout.
	Automation *AutomationRolloutMetadata `protobuf:"bytes,2,opt,name=automation,proto3" json:"automation,omitempty"`
	// Output only. Custom metadata provided by user-defined `Rollout` operations.
	Custom *CustomMetadata `protobuf:"bytes,3,opt,name=custom,proto3" json:"custom,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{37}
}

func (x *Metadata) GetCloudRun() *CloudRunMetadata {
	if x != nil {
		return x.CloudRun
	}
	return nil
}

func (x *Metadata) GetAutomation() *AutomationRolloutMetadata {
	if x != nil {
		return x.Automation
	}
	return nil
}

func (x *Metadata) GetCustom() *CustomMetadata {
	if x != nil {
		return x.Custom
	}
	return nil
}

// CloudRunMetadata contains information from a Cloud Run deployment.
type CloudRunMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The name of the Cloud Run Service that is associated with a
	// `Rollout`. Format is
	// `projects/{project}/locations/{location}/services/{service}`.
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	// Output only. The Cloud Run Service urls that are associated with a
	// `Rollout`.
	ServiceUrls []string `protobuf:"bytes,2,rep,name=service_urls,json=serviceUrls,proto3" json:"service_urls,omitempty"`
	// Output only. The Cloud Run Revision id associated with a `Rollout`.
	Revision string `protobuf:"bytes,3,opt,name=revision,proto3" json:"revision,omitempty"`
	// Output only. The name of the Cloud Run job that is associated with a
	// `Rollout`. Format is
	// `projects/{project}/locations/{location}/jobs/{job_name}`.
	Job string `protobuf:"bytes,4,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *CloudRunMetadata) Reset() {
	*x = CloudRunMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudRunMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudRunMetadata) ProtoMessage() {}

func (x *CloudRunMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudRunMetadata.ProtoReflect.Descriptor instead.
func (*CloudRunMetadata) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{38}
}

func (x *CloudRunMetadata) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *CloudRunMetadata) GetServiceUrls() []string {
	if x != nil {
		return x.ServiceUrls
	}
	return nil
}

func (x *CloudRunMetadata) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *CloudRunMetadata) GetJob() string {
	if x != nil {
		return x.Job
	}
	return ""
}

// AutomationRolloutMetadata contains Automation-related actions that
// were performed on a rollout.
type AutomationRolloutMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The ID of the AutomationRun initiated by a promote release
	// rule.
	PromoteAutomationRun string `protobuf:"bytes,1,opt,name=promote_automation_run,json=promoteAutomationRun,proto3" json:"promote_automation_run,omitempty"`
	// Output only. The IDs of the AutomationRuns initiated by an advance rollout
	// rule.
	AdvanceAutomationRuns []string `protobuf:"bytes,2,rep,name=advance_automation_runs,json=advanceAutomationRuns,proto3" json:"advance_automation_runs,omitempty"`
	// Output only. The IDs of the AutomationRuns initiated by a repair rollout
	// rule.
	RepairAutomationRuns []string `protobuf:"bytes,3,rep,name=repair_automation_runs,json=repairAutomationRuns,proto3" json:"repair_automation_runs,omitempty"`
	// Output only. The current AutomationRun repairing the rollout.
	CurrentRepairAutomationRun string `protobuf:"bytes,4,opt,name=current_repair_automation_run,json=currentRepairAutomationRun,proto3" json:"current_repair_automation_run,omitempty"`
}

func (x *AutomationRolloutMetadata) Reset() {
	*x = AutomationRolloutMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutomationRolloutMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomationRolloutMetadata) ProtoMessage() {}

func (x *AutomationRolloutMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomationRolloutMetadata.ProtoReflect.Descriptor instead.
func (*AutomationRolloutMetadata) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{39}
}

func (x *AutomationRolloutMetadata) GetPromoteAutomationRun() string {
	if x != nil {
		return x.PromoteAutomationRun
	}
	return ""
}

func (x *AutomationRolloutMetadata) GetAdvanceAutomationRuns() []string {
	if x != nil {
		return x.AdvanceAutomationRuns
	}
	return nil
}

func (x *AutomationRolloutMetadata) GetRepairAutomationRuns() []string {
	if x != nil {
		return x.RepairAutomationRuns
	}
	return nil
}

func (x *AutomationRolloutMetadata) GetCurrentRepairAutomationRun() string {
	if x != nil {
		return x.CurrentRepairAutomationRun
	}
	return ""
}

// CustomMetadata contains information from a user-defined operation.
type CustomMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Key-value pairs provided by the user-defined operation.
	Values map[string]string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CustomMetadata) Reset() {
	*x = CustomMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomMetadata) ProtoMessage() {}

func (x *CustomMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomMetadata.ProtoReflect.Descriptor instead.
func (*CustomMetadata) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{40}
}

func (x *CustomMetadata) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

// Phase represents a collection of jobs that are logically grouped together
// for a `Rollout`.
type Phase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The ID of the Phase.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. Current state of the Phase.
	State Phase_State `protobuf:"varint,3,opt,name=state,proto3,enum=google.events.cloud.deploy.v1.Phase_State" json:"state,omitempty"`
	// Output only. Additional information on why the Phase was skipped, if
	// available.
	SkipMessage string `protobuf:"bytes,6,opt,name=skip_message,json=skipMessage,proto3" json:"skip_message,omitempty"`
	// The job composition of this Phase.
	//
	// Types that are assignable to Jobs:
	//
	//	*Phase_DeploymentJobs
	//	*Phase_ChildRolloutJobs
	Jobs isPhase_Jobs `protobuf_oneof:"jobs"`
}

func (x *Phase) Reset() {
	*x = Phase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Phase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Phase) ProtoMessage() {}

func (x *Phase) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Phase.ProtoReflect.Descriptor instead.
func (*Phase) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{41}
}

func (x *Phase) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Phase) GetState() Phase_State {
	if x != nil {
		return x.State
	}
	return Phase_STATE_UNSPECIFIED
}

func (x *Phase) GetSkipMessage() string {
	if x != nil {
		return x.SkipMessage
	}
	return ""
}

func (m *Phase) GetJobs() isPhase_Jobs {
	if m != nil {
		return m.Jobs
	}
	return nil
}

func (x *Phase) GetDeploymentJobs() *DeploymentJobs {
	if x, ok := x.GetJobs().(*Phase_DeploymentJobs); ok {
		return x.DeploymentJobs
	}
	return nil
}

func (x *Phase) GetChildRolloutJobs() *ChildRolloutJobs {
	if x, ok := x.GetJobs().(*Phase_ChildRolloutJobs); ok {
		return x.ChildRolloutJobs
	}
	return nil
}

type isPhase_Jobs interface {
	isPhase_Jobs()
}

type Phase_DeploymentJobs struct {
	// Output only. Deployment job composition.
	DeploymentJobs *DeploymentJobs `protobuf:"bytes,4,opt,name=deployment_jobs,json=deploymentJobs,proto3,oneof"`
}

type Phase_ChildRolloutJobs struct {
	// Output only. ChildRollout job composition.
	ChildRolloutJobs *ChildRolloutJobs `protobuf:"bytes,5,opt,name=child_rollout_jobs,json=childRolloutJobs,proto3,oneof"`
}

func (*Phase_DeploymentJobs) isPhase_Jobs() {}

func (*Phase_ChildRolloutJobs) isPhase_Jobs() {}

// Deployment job composition.
type DeploymentJobs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The deploy Job. This is the deploy job in the phase.
	DeployJob *Job `protobuf:"bytes,1,opt,name=deploy_job,json=deployJob,proto3" json:"deploy_job,omitempty"`
	// Output only. The verify Job. Runs after a deploy if the deploy succeeds.
	VerifyJob *Job `protobuf:"bytes,2,opt,name=verify_job,json=verifyJob,proto3" json:"verify_job,omitempty"`
	// Output only. The predeploy Job, which is the first job on the phase.
	PredeployJob *Job `protobuf:"bytes,3,opt,name=predeploy_job,json=predeployJob,proto3" json:"predeploy_job,omitempty"`
	// Output only. The postdeploy Job, which is the last job on the phase.
	PostdeployJob *Job `protobuf:"bytes,4,opt,name=postdeploy_job,json=postdeployJob,proto3" json:"postdeploy_job,omitempty"`
}

func (x *DeploymentJobs) Reset() {
	*x = DeploymentJobs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentJobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentJobs) ProtoMessage() {}

func (x *DeploymentJobs) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentJobs.ProtoReflect.Descriptor instead.
func (*DeploymentJobs) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{42}
}

func (x *DeploymentJobs) GetDeployJob() *Job {
	if x != nil {
		return x.DeployJob
	}
	return nil
}

func (x *DeploymentJobs) GetVerifyJob() *Job {
	if x != nil {
		return x.VerifyJob
	}
	return nil
}

func (x *DeploymentJobs) GetPredeployJob() *Job {
	if x != nil {
		return x.PredeployJob
	}
	return nil
}

func (x *DeploymentJobs) GetPostdeployJob() *Job {
	if x != nil {
		return x.PostdeployJob
	}
	return nil
}

// ChildRollouts job composition
type ChildRolloutJobs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. List of CreateChildRolloutJobs
	CreateRolloutJobs []*Job `protobuf:"bytes,1,rep,name=create_rollout_jobs,json=createRolloutJobs,proto3" json:"create_rollout_jobs,omitempty"`
	// Output only. List of AdvanceChildRolloutJobs
	AdvanceRolloutJobs []*Job `protobuf:"bytes,2,rep,name=advance_rollout_jobs,json=advanceRolloutJobs,proto3" json:"advance_rollout_jobs,omitempty"`
}

func (x *ChildRolloutJobs) Reset() {
	*x = ChildRolloutJobs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildRolloutJobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildRolloutJobs) ProtoMessage() {}

func (x *ChildRolloutJobs) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildRolloutJobs.ProtoReflect.Descriptor instead.
func (*ChildRolloutJobs) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{43}
}

func (x *ChildRolloutJobs) GetCreateRolloutJobs() []*Job {
	if x != nil {
		return x.CreateRolloutJobs
	}
	return nil
}

func (x *ChildRolloutJobs) GetAdvanceRolloutJobs() []*Job {
	if x != nil {
		return x.AdvanceRolloutJobs
	}
	return nil
}

// Job represents an operation for a `Rollout`.
type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The ID of the Job.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. The current state of the Job.
	State Job_State `protobuf:"varint,2,opt,name=state,proto3,enum=google.events.cloud.deploy.v1.Job_State" json:"state,omitempty"`
	// Output only. Additional information on why the Job was skipped, if
	// available.
	SkipMessage string `protobuf:"bytes,8,opt,name=skip_message,json=skipMessage,proto3" json:"skip_message,omitempty"`
	// Output only. The name of the `JobRun` responsible for the most recent
	// invocation of this Job.
	JobRun string `protobuf:"bytes,3,opt,name=job_run,json=jobRun,proto3" json:"job_run,omitempty"`
	// The type of Job.
	//
	// Types that are assignable to JobType:
	//
	//	*Job_DeployJob
	//	*Job_VerifyJob
	//	*Job_PredeployJob
	//	*Job_PostdeployJob
	//	*Job_CreateChildRolloutJob
	//	*Job_AdvanceChildRolloutJob
	JobType isJob_JobType `protobuf_oneof:"job_type"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{44}
}

func (x *Job) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Job) GetState() Job_State {
	if x != nil {
		return x.State
	}
	return Job_STATE_UNSPECIFIED
}

func (x *Job) GetSkipMessage() string {
	if x != nil {
		return x.SkipMessage
	}
	return ""
}

func (x *Job) GetJobRun() string {
	if x != nil {
		return x.JobRun
	}
	return ""
}

func (m *Job) GetJobType() isJob_JobType {
	if m != nil {
		return m.JobType
	}
	return nil
}

func (x *Job) GetDeployJob() *DeployJob {
	if x, ok := x.GetJobType().(*Job_DeployJob); ok {
		return x.DeployJob
	}
	return nil
}

func (x *Job) GetVerifyJob() *VerifyJob {
	if x, ok := x.GetJobType().(*Job_VerifyJob); ok {
		return x.VerifyJob
	}
	return nil
}

func (x *Job) GetPredeployJob() *PredeployJob {
	if x, ok := x.GetJobType().(*Job_PredeployJob); ok {
		return x.PredeployJob
	}
	return nil
}

func (x *Job) GetPostdeployJob() *PostdeployJob {
	if x, ok := x.GetJobType().(*Job_PostdeployJob); ok {
		return x.PostdeployJob
	}
	return nil
}

func (x *Job) GetCreateChildRolloutJob() *CreateChildRolloutJob {
	if x, ok := x.GetJobType().(*Job_CreateChildRolloutJob); ok {
		return x.CreateChildRolloutJob
	}
	return nil
}

func (x *Job) GetAdvanceChildRolloutJob() *AdvanceChildRolloutJob {
	if x, ok := x.GetJobType().(*Job_AdvanceChildRolloutJob); ok {
		return x.AdvanceChildRolloutJob
	}
	return nil
}

type isJob_JobType interface {
	isJob_JobType()
}

type Job_DeployJob struct {
	// Output only. A deploy Job.
	DeployJob *DeployJob `protobuf:"bytes,4,opt,name=deploy_job,json=deployJob,proto3,oneof"`
}

type Job_VerifyJob struct {
	// Output only. A verify Job.
	VerifyJob *VerifyJob `protobuf:"bytes,5,opt,name=verify_job,json=verifyJob,proto3,oneof"`
}

type Job_PredeployJob struct {
	// Output only. A predeploy Job.
	PredeployJob *PredeployJob `protobuf:"bytes,9,opt,name=predeploy_job,json=predeployJob,proto3,oneof"`
}

type Job_PostdeployJob struct {
	// Output only. A postdeploy Job.
	PostdeployJob *PostdeployJob `protobuf:"bytes,10,opt,name=postdeploy_job,json=postdeployJob,proto3,oneof"`
}

type Job_CreateChildRolloutJob struct {
	// Output only. A createChildRollout Job.
	CreateChildRolloutJob *CreateChildRolloutJob `protobuf:"bytes,6,opt,name=create_child_rollout_job,json=createChildRolloutJob,proto3,oneof"`
}

type Job_AdvanceChildRolloutJob struct {
	// Output only. An advanceChildRollout Job.
	AdvanceChildRolloutJob *AdvanceChildRolloutJob `protobuf:"bytes,7,opt,name=advance_child_rollout_job,json=advanceChildRolloutJob,proto3,oneof"`
}

func (*Job_DeployJob) isJob_JobType() {}

func (*Job_VerifyJob) isJob_JobType() {}

func (*Job_PredeployJob) isJob_JobType() {}

func (*Job_PostdeployJob) isJob_JobType() {}

func (*Job_CreateChildRolloutJob) isJob_JobType() {}

func (*Job_AdvanceChildRolloutJob) isJob_JobType() {}

// A deploy Job.
type DeployJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeployJob) Reset() {
	*x = DeployJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployJob) ProtoMessage() {}

func (x *DeployJob) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployJob.ProtoReflect.Descriptor instead.
func (*DeployJob) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{45}
}

// A verify Job.
type VerifyJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VerifyJob) Reset() {
	*x = VerifyJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyJob) ProtoMessage() {}

func (x *VerifyJob) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyJob.ProtoReflect.Descriptor instead.
func (*VerifyJob) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{46}
}

// A predeploy Job.
type PredeployJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The custom actions that the predeploy Job executes.
	Actions []string `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *PredeployJob) Reset() {
	*x = PredeployJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredeployJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredeployJob) ProtoMessage() {}

func (x *PredeployJob) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredeployJob.ProtoReflect.Descriptor instead.
func (*PredeployJob) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{47}
}

func (x *PredeployJob) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

// A postdeploy Job.
type PostdeployJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The custom actions that the postdeploy Job executes.
	Actions []string `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *PostdeployJob) Reset() {
	*x = PostdeployJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostdeployJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostdeployJob) ProtoMessage() {}

func (x *PostdeployJob) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostdeployJob.ProtoReflect.Descriptor instead.
func (*PostdeployJob) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{48}
}

func (x *PostdeployJob) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

// A createChildRollout Job.
type CreateChildRolloutJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateChildRolloutJob) Reset() {
	*x = CreateChildRolloutJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChildRolloutJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChildRolloutJob) ProtoMessage() {}

func (x *CreateChildRolloutJob) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChildRolloutJob.ProtoReflect.Descriptor instead.
func (*CreateChildRolloutJob) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{49}
}

// An advanceChildRollout Job.
type AdvanceChildRolloutJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AdvanceChildRolloutJob) Reset() {
	*x = AdvanceChildRolloutJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvanceChildRolloutJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvanceChildRolloutJob) ProtoMessage() {}

func (x *AdvanceChildRolloutJob) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvanceChildRolloutJob.ProtoReflect.Descriptor instead.
func (*AdvanceChildRolloutJob) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{50}
}

// An `Automation` resource in the Cloud Deploy API.
//
// An `Automation` enables the automation of manually driven actions for
// a Delivery Pipeline, which includes Release promotion among Targets,
// Rollout repair and Rollout deployment strategy advancement. The intention
// of Automation is to reduce manual intervention in the continuous delivery
// process.
type Automation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Name of the `Automation`. Format is
	// `projects/{project}/locations/{location}/deliveryPipelines/{delivery_pipeline}/automations/{automation}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Unique identifier of the `Automation`.
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// Optional. Description of the `Automation`. Max length is 255 characters.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. Time at which the automation was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Time at which the automation was updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional. User annotations. These attributes can only be set and used by
	// the user, and not by Cloud Deploy. Annotations must meet the following
	// constraints:
	//
	// * Annotations are key/value pairs.
	// * Valid annotation keys have two segments: an optional prefix and name,
	// separated by a slash (`/`).
	// * The name segment is required and must be 63 characters or less,
	// beginning and ending with an alphanumeric character (`[a-z0-9A-Z]`) with
	// dashes (`-`), underscores (`_`), dots (`.`), and alphanumerics between.
	// * The prefix is optional. If specified, the prefix must be a DNS subdomain:
	// a series of DNS labels separated by dots(`.`), not longer than 253
	// characters in total, followed by a slash (`/`).
	//
	// See
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set
	// for more details.
	Annotations map[string]string `protobuf:"bytes,6,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional. Labels are attributes that can be set and used by both the
	// user and by Cloud Deploy. Labels must meet the following constraints:
	//
	// * Keys and values can contain only lowercase letters, numeric characters,
	// underscores, and dashes.
	// * All characters must use UTF-8 encoding, and international characters are
	// allowed.
	// * Keys must start with a lowercase letter or international character.
	// * Each resource is limited to a maximum of 64 labels.
	//
	// Both keys and values are additionally constrained to be <= 63 characters.
	Labels map[string]string `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional. The weak etag of the `Automation` resource.
	// This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	Etag string `protobuf:"bytes,8,opt,name=etag,proto3" json:"etag,omitempty"`
	// Optional. When Suspended, automation is deactivated from execution.
	Suspended bool `protobuf:"varint,9,opt,name=suspended,proto3" json:"suspended,omitempty"`
	// Required. Email address of the user-managed IAM service account that
	// creates Cloud Deploy release and rollout resources.
	ServiceAccount string `protobuf:"bytes,10,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// Required. Selected resources to which the automation will be applied.
	Selector *AutomationResourceSelector `protobuf:"bytes,11,opt,name=selector,proto3" json:"selector,omitempty"`
	// Required. List of Automation rules associated with the Automation resource.
	// Must have at least one rule and limited to 250 rules per Delivery Pipeline.
	// Note: the order of the rules here is not the same as the order of
	// execution.
	Rules []*AutomationRule `protobuf:"bytes,14,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *Automation) Reset() {
	*x = Automation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Automation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Automation) ProtoMessage() {}

func (x *Automation) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Automation.ProtoReflect.Descriptor instead.
func (*Automation) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{51}
}

func (x *Automation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Automation) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Automation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Automation) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Automation) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Automation) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Automation) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Automation) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *Automation) GetSuspended() bool {
	if x != nil {
		return x.Suspended
	}
	return false
}

func (x *Automation) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *Automation) GetSelector() *AutomationResourceSelector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *Automation) GetRules() []*AutomationRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// AutomationResourceSelector contains the information to select the resources
// to which an Automation is going to be applied.
type AutomationResourceSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains attributes about a target.
	Targets []*TargetAttribute `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
}

func (x *AutomationResourceSelector) Reset() {
	*x = AutomationResourceSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutomationResourceSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomationResourceSelector) ProtoMessage() {}

func (x *AutomationResourceSelector) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomationResourceSelector.ProtoReflect.Descriptor instead.
func (*AutomationResourceSelector) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{52}
}

func (x *AutomationResourceSelector) GetTargets() []*TargetAttribute {
	if x != nil {
		return x.Targets
	}
	return nil
}

// `AutomationRule` defines the automation activities.
type AutomationRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The configuration of the Automation rule.
	//
	// Types that are assignable to Rule:
	//
	//	*AutomationRule_PromoteReleaseRule
	//	*AutomationRule_AdvanceRolloutRule
	//	*AutomationRule_RepairRolloutRule
	Rule isAutomationRule_Rule `protobuf_oneof:"rule"`
}

func (x *AutomationRule) Reset() {
	*x = AutomationRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutomationRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomationRule) ProtoMessage() {}

func (x *AutomationRule) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomationRule.ProtoReflect.Descriptor instead.
func (*AutomationRule) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{53}
}

func (m *AutomationRule) GetRule() isAutomationRule_Rule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (x *AutomationRule) GetPromoteReleaseRule() *PromoteReleaseRule {
	if x, ok := x.GetRule().(*AutomationRule_PromoteReleaseRule); ok {
		return x.PromoteReleaseRule
	}
	return nil
}

func (x *AutomationRule) GetAdvanceRolloutRule() *AdvanceRolloutRule {
	if x, ok := x.GetRule().(*AutomationRule_AdvanceRolloutRule); ok {
		return x.AdvanceRolloutRule
	}
	return nil
}

func (x *AutomationRule) GetRepairRolloutRule() *RepairRolloutRule {
	if x, ok := x.GetRule().(*AutomationRule_RepairRolloutRule); ok {
		return x.RepairRolloutRule
	}
	return nil
}

type isAutomationRule_Rule interface {
	isAutomationRule_Rule()
}

type AutomationRule_PromoteReleaseRule struct {
	// Optional. `PromoteReleaseRule` will automatically promote a release from
	// the current target to a specified target.
	PromoteReleaseRule *PromoteReleaseRule `protobuf:"bytes,1,opt,name=promote_release_rule,json=promoteReleaseRule,proto3,oneof"`
}

type AutomationRule_AdvanceRolloutRule struct {
	// Optional. The `AdvanceRolloutRule` will automatically advance a
	// successful Rollout.
	AdvanceRolloutRule *AdvanceRolloutRule `protobuf:"bytes,2,opt,name=advance_rollout_rule,json=advanceRolloutRule,proto3,oneof"`
}

type AutomationRule_RepairRolloutRule struct {
	// Optional. The `RepairRolloutRule` will automatically repair a failed
	// rollout.
	RepairRolloutRule *RepairRolloutRule `protobuf:"bytes,3,opt,name=repair_rollout_rule,json=repairRolloutRule,proto3,oneof"`
}

func (*AutomationRule_PromoteReleaseRule) isAutomationRule_Rule() {}

func (*AutomationRule_AdvanceRolloutRule) isAutomationRule_Rule() {}

func (*AutomationRule_RepairRolloutRule) isAutomationRule_Rule() {}

// `PromoteRelease` rule will automatically promote a release from the current
// target to a specified target.
type PromoteReleaseRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. ID of the rule. This id must be unique in the `Automation`
	// resource to which this rule belongs. The format is `[a-z][a-z0-9\-]{0,62}`.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional. How long the release need to be paused until being promoted to
	// the next target.
	Wait *durationpb.Duration `protobuf:"bytes,2,opt,name=wait,proto3" json:"wait,omitempty"`
	// Optional. The ID of the stage in the pipeline to which this `Release` is
	// deploying. If unspecified, default it to the next stage in the promotion
	// flow. The value of this field could be one of the following:
	//
	// * The last segment of a target name. It only needs the ID to determine
	// if the target is one of the stages in the promotion sequence defined
	// in the pipeline.
	// * "@next", the next target in the promotion sequence.
	DestinationTargetId string `protobuf:"bytes,7,opt,name=destination_target_id,json=destinationTargetId,proto3" json:"destination_target_id,omitempty"`
	// Output only. Information around the state of the Automation rule.
	Condition *AutomationRuleCondition `protobuf:"bytes,5,opt,name=condition,proto3" json:"condition,omitempty"`
	// Optional. The starting phase of the rollout created by this operation.
	// Default to the first phase.
	DestinationPhase string `protobuf:"bytes,8,opt,name=destination_phase,json=destinationPhase,proto3" json:"destination_phase,omitempty"`
}

func (x *PromoteReleaseRule) Reset() {
	*x = PromoteReleaseRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoteReleaseRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteReleaseRule) ProtoMessage() {}

func (x *PromoteReleaseRule) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteReleaseRule.ProtoReflect.Descriptor instead.
func (*PromoteReleaseRule) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{54}
}

func (x *PromoteReleaseRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PromoteReleaseRule) GetWait() *durationpb.Duration {
	if x != nil {
		return x.Wait
	}
	return nil
}

func (x *PromoteReleaseRule) GetDestinationTargetId() string {
	if x != nil {
		return x.DestinationTargetId
	}
	return ""
}

func (x *PromoteReleaseRule) GetCondition() *AutomationRuleCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *PromoteReleaseRule) GetDestinationPhase() string {
	if x != nil {
		return x.DestinationPhase
	}
	return ""
}

// The `AdvanceRollout` automation rule will automatically advance a successful
// Rollout to the next phase.
type AdvanceRolloutRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. ID of the rule. This id must be unique in the `Automation`
	// resource to which this rule belongs. The format is `[a-z][a-z0-9\-]{0,62}`.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional. Proceeds only after phase name matched any one in the list.
	// This value must consist of lower-case letters, numbers, and hyphens,
	// start with a letter and end with a letter or a number, and have a max
	// length of 63 characters. In other words, it must match the following
	// regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
	SourcePhases []string `protobuf:"bytes,6,rep,name=source_phases,json=sourcePhases,proto3" json:"source_phases,omitempty"`
	// Optional. How long to wait after a rollout is finished.
	Wait *durationpb.Duration `protobuf:"bytes,3,opt,name=wait,proto3" json:"wait,omitempty"`
	// Output only. Information around the state of the Automation rule.
	Condition *AutomationRuleCondition `protobuf:"bytes,5,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *AdvanceRolloutRule) Reset() {
	*x = AdvanceRolloutRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvanceRolloutRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvanceRolloutRule) ProtoMessage() {}

func (x *AdvanceRolloutRule) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvanceRolloutRule.ProtoReflect.Descriptor instead.
func (*AdvanceRolloutRule) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{55}
}

func (x *AdvanceRolloutRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AdvanceRolloutRule) GetSourcePhases() []string {
	if x != nil {
		return x.SourcePhases
	}
	return nil
}

func (x *AdvanceRolloutRule) GetWait() *durationpb.Duration {
	if x != nil {
		return x.Wait
	}
	return nil
}

func (x *AdvanceRolloutRule) GetCondition() *AutomationRuleCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

// The `RepairRolloutRule` automation rule will automatically repair a failed
// `Rollout`.
type RepairRolloutRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. ID of the rule. This id must be unique in the `Automation`
	// resource to which this rule belongs. The format is `[a-z][a-z0-9\-]{0,62}`.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional. Phases within which jobs are subject to automatic repair actions
	// on failure. Proceeds only after phase name matched any one in the list, or
	// for all phases if unspecified. This value must consist of lower-case
	// letters, numbers, and hyphens, start with a letter and end with a letter or
	// a number, and have a max length of 63 characters. In other words, it must
	// match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
	SourcePhases []string `protobuf:"bytes,2,rep,name=source_phases,json=sourcePhases,proto3" json:"source_phases,omitempty"`
	// Optional. Jobs to repair. Proceeds only after job name matched any one in
	// the list, or for all jobs if unspecified or empty. The phase that includes
	// the job must match the phase ID specified in `source_phase`. This value
	// must consist of lower-case letters, numbers, and hyphens, start with a
	// letter and end with a letter or a number, and have a max length of 63
	// characters. In other words, it must match the following regex:
	// `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
	Jobs []string `protobuf:"bytes,3,rep,name=jobs,proto3" json:"jobs,omitempty"`
	// Required. Defines the types of automatic repair actions for failed jobs.
	RepairModes []*RepairMode `protobuf:"bytes,4,rep,name=repair_modes,json=repairModes,proto3" json:"repair_modes,omitempty"`
	// Output only. Information around the state of the 'Automation' rule.
	Condition *AutomationRuleCondition `protobuf:"bytes,6,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *RepairRolloutRule) Reset() {
	*x = RepairRolloutRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepairRolloutRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepairRolloutRule) ProtoMessage() {}

func (x *RepairRolloutRule) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepairRolloutRule.ProtoReflect.Descriptor instead.
func (*RepairRolloutRule) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{56}
}

func (x *RepairRolloutRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RepairRolloutRule) GetSourcePhases() []string {
	if x != nil {
		return x.SourcePhases
	}
	return nil
}

func (x *RepairRolloutRule) GetJobs() []string {
	if x != nil {
		return x.Jobs
	}
	return nil
}

func (x *RepairRolloutRule) GetRepairModes() []*RepairMode {
	if x != nil {
		return x.RepairModes
	}
	return nil
}

func (x *RepairRolloutRule) GetCondition() *AutomationRuleCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

// Configuration of the repair action.
type RepairMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The repair action to perform.
	//
	// Types that are assignable to Mode:
	//
	//	*RepairMode_Retry
	//	*RepairMode_Rollback
	Mode isRepairMode_Mode `protobuf_oneof:"mode"`
}

func (x *RepairMode) Reset() {
	*x = RepairMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepairMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepairMode) ProtoMessage() {}

func (x *RepairMode) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepairMode.ProtoReflect.Descriptor instead.
func (*RepairMode) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{57}
}

func (m *RepairMode) GetMode() isRepairMode_Mode {
	if m != nil {
		return m.Mode
	}
	return nil
}

func (x *RepairMode) GetRetry() *Retry {
	if x, ok := x.GetMode().(*RepairMode_Retry); ok {
		return x.Retry
	}
	return nil
}

func (x *RepairMode) GetRollback() *Rollback {
	if x, ok := x.GetMode().(*RepairMode_Rollback); ok {
		return x.Rollback
	}
	return nil
}

type isRepairMode_Mode interface {
	isRepairMode_Mode()
}

type RepairMode_Retry struct {
	// Optional. Retries a failed job.
	Retry *Retry `protobuf:"bytes,1,opt,name=retry,proto3,oneof"`
}

type RepairMode_Rollback struct {
	// Optional. Rolls back a `Rollout`.
	Rollback *Rollback `protobuf:"bytes,2,opt,name=rollback,proto3,oneof"`
}

func (*RepairMode_Retry) isRepairMode_Mode() {}

func (*RepairMode_Rollback) isRepairMode_Mode() {}

// Retries the failed job.
type Retry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Total number of retries. Retry is skipped if set to 0; The
	// minimum value is 1, and the maximum value is 10.
	Attempts int64 `protobuf:"varint,1,opt,name=attempts,proto3" json:"attempts,omitempty"`
	// Optional. How long to wait for the first retry. Default is 0, and the
	// maximum value is 14d.
	Wait *durationpb.Duration `protobuf:"bytes,2,opt,name=wait,proto3" json:"wait,omitempty"`
	// Optional. The pattern of how wait time will be increased. Default is
	// linear. Backoff mode will be ignored if `wait` is 0.
	BackoffMode BackoffMode `protobuf:"varint,3,opt,name=backoff_mode,json=backoffMode,proto3,enum=google.events.cloud.deploy.v1.BackoffMode" json:"backoff_mode,omitempty"`
}

func (x *Retry) Reset() {
	*x = Retry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Retry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Retry) ProtoMessage() {}

func (x *Retry) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Retry.ProtoReflect.Descriptor instead.
func (*Retry) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{58}
}

func (x *Retry) GetAttempts() int64 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *Retry) GetWait() *durationpb.Duration {
	if x != nil {
		return x.Wait
	}
	return nil
}

func (x *Retry) GetBackoffMode() BackoffMode {
	if x != nil {
		return x.BackoffMode
	}
	return BackoffMode_BACKOFF_MODE_UNSPECIFIED
}

// Rolls back a `Rollout`.
type Rollback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The starting phase ID for the `Rollout`. If unspecified, the
	// `Rollout` will start in the stable phase.
	DestinationPhase string `protobuf:"bytes,1,opt,name=destination_phase,json=destinationPhase,proto3" json:"destination_phase,omitempty"`
}

func (x *Rollback) Reset() {
	*x = Rollback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rollback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rollback) ProtoMessage() {}

func (x *Rollback) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rollback.ProtoReflect.Descriptor instead.
func (*Rollback) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{59}
}

func (x *Rollback) GetDestinationPhase() string {
	if x != nil {
		return x.DestinationPhase
	}
	return ""
}

// `AutomationRuleCondition` contains conditions relevant to an
// `Automation` rule.
type AutomationRuleCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Details around targets enumerated in the rule.
	TargetsPresentCondition *TargetsPresentCondition `protobuf:"bytes,1,opt,name=targets_present_condition,json=targetsPresentCondition,proto3" json:"targets_present_condition,omitempty"`
}

func (x *AutomationRuleCondition) Reset() {
	*x = AutomationRuleCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutomationRuleCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomationRuleCondition) ProtoMessage() {}

func (x *AutomationRuleCondition) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomationRuleCondition.ProtoReflect.Descriptor instead.
func (*AutomationRuleCondition) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{60}
}

func (x *AutomationRuleCondition) GetTargetsPresentCondition() *TargetsPresentCondition {
	if x != nil {
		return x.TargetsPresentCondition
	}
	return nil
}

// The data within all DeliveryPipeline events.
type DeliveryPipelineEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The DeliveryPipeline event payload. Unset for deletion events.
	Payload *DeliveryPipeline `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *DeliveryPipelineEventData) Reset() {
	*x = DeliveryPipelineEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryPipelineEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryPipelineEventData) ProtoMessage() {}

func (x *DeliveryPipelineEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryPipelineEventData.ProtoReflect.Descriptor instead.
func (*DeliveryPipelineEventData) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{61}
}

func (x *DeliveryPipelineEventData) GetPayload() *DeliveryPipeline {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all Target events.
type TargetEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The Target event payload. Unset for deletion events.
	Payload *Target `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *TargetEventData) Reset() {
	*x = TargetEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetEventData) ProtoMessage() {}

func (x *TargetEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetEventData.ProtoReflect.Descriptor instead.
func (*TargetEventData) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{62}
}

func (x *TargetEventData) GetPayload() *Target {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all CustomTargetType events.
type CustomTargetTypeEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The CustomTargetType event payload. Unset for deletion events.
	Payload *CustomTargetType `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CustomTargetTypeEventData) Reset() {
	*x = CustomTargetTypeEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomTargetTypeEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomTargetTypeEventData) ProtoMessage() {}

func (x *CustomTargetTypeEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomTargetTypeEventData.ProtoReflect.Descriptor instead.
func (*CustomTargetTypeEventData) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{63}
}

func (x *CustomTargetTypeEventData) GetPayload() *CustomTargetType {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all Release events.
type ReleaseEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Release event payload.
	Payload *Release `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *ReleaseEventData) Reset() {
	*x = ReleaseEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseEventData) ProtoMessage() {}

func (x *ReleaseEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseEventData.ProtoReflect.Descriptor instead.
func (*ReleaseEventData) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{64}
}

func (x *ReleaseEventData) GetPayload() *Release {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all Rollout events.
type RolloutEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Rollout event payload.
	Payload *Rollout `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *RolloutEventData) Reset() {
	*x = RolloutEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RolloutEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolloutEventData) ProtoMessage() {}

func (x *RolloutEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolloutEventData.ProtoReflect.Descriptor instead.
func (*RolloutEventData) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{65}
}

func (x *RolloutEventData) GetPayload() *Rollout {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all Automation events.
type AutomationEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The Automation event payload. Unset for deletion events.
	Payload *Automation `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *AutomationEventData) Reset() {
	*x = AutomationEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutomationEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomationEventData) ProtoMessage() {}

func (x *AutomationEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomationEventData.ProtoReflect.Descriptor instead.
func (*AutomationEventData) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{66}
}

func (x *AutomationEventData) GetPayload() *Automation {
	if x != nil {
		return x.Payload
	}
	return nil
}

// PhaseConfig represents the configuration for a phase in the custom
// canary deployment.
type CustomCanaryDeployment_PhaseConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The ID to assign to the `Rollout` phase.
	// This value must consist of lower-case letters, numbers, and hyphens,
	// start with a letter and end with a letter or a number, and have a max
	// length of 63 characters. In other words, it must match the following
	// regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
	PhaseId string `protobuf:"bytes,1,opt,name=phase_id,json=phaseId,proto3" json:"phase_id,omitempty"`
	// Required. Percentage deployment for the phase.
	Percentage int32 `protobuf:"varint,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// Skaffold profiles to use when rendering the manifest for this phase.
	// These are in addition to the profiles list specified in the
	// `DeliveryPipeline` stage.
	Profiles []string `protobuf:"bytes,3,rep,name=profiles,proto3" json:"profiles,omitempty"`
	// Whether to run verify tests after the deployment.
	Verify bool `protobuf:"varint,4,opt,name=verify,proto3" json:"verify,omitempty"`
	// Optional. Configuration for the predeploy job of this phase. If this is
	// not configured, there will be no predeploy job for this phase.
	Predeploy *Predeploy `protobuf:"bytes,5,opt,name=predeploy,proto3" json:"predeploy,omitempty"`
	// Optional. Configuration for the postdeploy job of this phase. If this is
	// not configured, there will be no postdeploy job for this phase.
	Postdeploy *Postdeploy `protobuf:"bytes,6,opt,name=postdeploy,proto3" json:"postdeploy,omitempty"`
}

func (x *CustomCanaryDeployment_PhaseConfig) Reset() {
	*x = CustomCanaryDeployment_PhaseConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomCanaryDeployment_PhaseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomCanaryDeployment_PhaseConfig) ProtoMessage() {}

func (x *CustomCanaryDeployment_PhaseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomCanaryDeployment_PhaseConfig.ProtoReflect.Descriptor instead.
func (*CustomCanaryDeployment_PhaseConfig) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{10, 0}
}

func (x *CustomCanaryDeployment_PhaseConfig) GetPhaseId() string {
	if x != nil {
		return x.PhaseId
	}
	return ""
}

func (x *CustomCanaryDeployment_PhaseConfig) GetPercentage() int32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *CustomCanaryDeployment_PhaseConfig) GetProfiles() []string {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *CustomCanaryDeployment_PhaseConfig) GetVerify() bool {
	if x != nil {
		return x.Verify
	}
	return false
}

func (x *CustomCanaryDeployment_PhaseConfig) GetPredeploy() *Predeploy {
	if x != nil {
		return x.Predeploy
	}
	return nil
}

func (x *CustomCanaryDeployment_PhaseConfig) GetPostdeploy() *Postdeploy {
	if x != nil {
		return x.Postdeploy
	}
	return nil
}

// Information about the Kubernetes Gateway API service mesh configuration.
type KubernetesConfig_GatewayServiceMesh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of the Gateway API HTTPRoute.
	HttpRoute string `protobuf:"bytes,1,opt,name=http_route,json=httpRoute,proto3" json:"http_route,omitempty"`
	// Required. Name of the Kubernetes Service.
	Service string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	// Required. Name of the Kubernetes Deployment whose traffic is managed by
	// the specified HTTPRoute and Service.
	Deployment string `protobuf:"bytes,3,opt,name=deployment,proto3" json:"deployment,omitempty"`
	// Optional. The time to wait for route updates to propagate. The maximum
	// configurable time is 3 hours, in seconds format. If unspecified, there is
	// no wait time.
	RouteUpdateWaitTime *durationpb.Duration `protobuf:"bytes,4,opt,name=route_update_wait_time,json=routeUpdateWaitTime,proto3" json:"route_update_wait_time,omitempty"`
	// Optional. The amount of time to migrate traffic back from the canary
	// Service to the original Service during the stable phase deployment. If
	// specified, must be between 15s and 3600s. If unspecified, there is no
	// cutback time.
	StableCutbackDuration *durationpb.Duration `protobuf:"bytes,5,opt,name=stable_cutback_duration,json=stableCutbackDuration,proto3" json:"stable_cutback_duration,omitempty"`
}

func (x *KubernetesConfig_GatewayServiceMesh) Reset() {
	*x = KubernetesConfig_GatewayServiceMesh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesConfig_GatewayServiceMesh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesConfig_GatewayServiceMesh) ProtoMessage() {}

func (x *KubernetesConfig_GatewayServiceMesh) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesConfig_GatewayServiceMesh.ProtoReflect.Descriptor instead.
func (*KubernetesConfig_GatewayServiceMesh) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{11, 0}
}

func (x *KubernetesConfig_GatewayServiceMesh) GetHttpRoute() string {
	if x != nil {
		return x.HttpRoute
	}
	return ""
}

func (x *KubernetesConfig_GatewayServiceMesh) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *KubernetesConfig_GatewayServiceMesh) GetDeployment() string {
	if x != nil {
		return x.Deployment
	}
	return ""
}

func (x *KubernetesConfig_GatewayServiceMesh) GetRouteUpdateWaitTime() *durationpb.Duration {
	if x != nil {
		return x.RouteUpdateWaitTime
	}
	return nil
}

func (x *KubernetesConfig_GatewayServiceMesh) GetStableCutbackDuration() *durationpb.Duration {
	if x != nil {
		return x.StableCutbackDuration
	}
	return nil
}

// Information about the Kubernetes Service networking configuration.
type KubernetesConfig_ServiceNetworking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of the Kubernetes Service.
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	// Required. Name of the Kubernetes Deployment whose traffic is managed by
	// the specified Service.
	Deployment string `protobuf:"bytes,2,opt,name=deployment,proto3" json:"deployment,omitempty"`
	// Optional. Whether to disable Pod overprovisioning. If Pod
	// overprovisioning is disabled then Cloud Deploy will limit the number of
	// total Pods used for the deployment strategy to the number of Pods the
	// Deployment has on the cluster.
	DisablePodOverprovisioning bool `protobuf:"varint,3,opt,name=disable_pod_overprovisioning,json=disablePodOverprovisioning,proto3" json:"disable_pod_overprovisioning,omitempty"`
}

func (x *KubernetesConfig_ServiceNetworking) Reset() {
	*x = KubernetesConfig_ServiceNetworking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesConfig_ServiceNetworking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesConfig_ServiceNetworking) ProtoMessage() {}

func (x *KubernetesConfig_ServiceNetworking) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesConfig_ServiceNetworking.ProtoReflect.Descriptor instead.
func (*KubernetesConfig_ServiceNetworking) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{11, 1}
}

func (x *KubernetesConfig_ServiceNetworking) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *KubernetesConfig_ServiceNetworking) GetDeployment() string {
	if x != nil {
		return x.Deployment
	}
	return ""
}

func (x *KubernetesConfig_ServiceNetworking) GetDisablePodOverprovisioning() bool {
	if x != nil {
		return x.DisablePodOverprovisioning
	}
	return false
}

// Git repository containing Skaffold Config modules.
type SkaffoldModules_SkaffoldGitSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Git repository the package should be cloned from.
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// Optional. Relative path from the repository root to the Skaffold file.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Optional. Git ref the package should be cloned from.
	Ref string `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *SkaffoldModules_SkaffoldGitSource) Reset() {
	*x = SkaffoldModules_SkaffoldGitSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkaffoldModules_SkaffoldGitSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkaffoldModules_SkaffoldGitSource) ProtoMessage() {}

func (x *SkaffoldModules_SkaffoldGitSource) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkaffoldModules_SkaffoldGitSource.ProtoReflect.Descriptor instead.
func (*SkaffoldModules_SkaffoldGitSource) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{29, 0}
}

func (x *SkaffoldModules_SkaffoldGitSource) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *SkaffoldModules_SkaffoldGitSource) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SkaffoldModules_SkaffoldGitSource) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

// Cloud Storage bucket containing Skaffold Config modules.
type SkaffoldModules_SkaffoldGCSSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cloud Storage source paths to copy recursively. For example,
	// providing "gs://my-bucket/dir/configs/*" will result in Skaffold copying
	// all files within the "dir/configs" directory in the bucket "my-bucket".
	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// Optional. Relative path from the source to the Skaffold file.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *SkaffoldModules_SkaffoldGCSSource) Reset() {
	*x = SkaffoldModules_SkaffoldGCSSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkaffoldModules_SkaffoldGCSSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkaffoldModules_SkaffoldGCSSource) ProtoMessage() {}

func (x *SkaffoldModules_SkaffoldGCSSource) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkaffoldModules_SkaffoldGCSSource.ProtoReflect.Descriptor instead.
func (*SkaffoldModules_SkaffoldGCSSource) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{29, 1}
}

func (x *SkaffoldModules_SkaffoldGCSSource) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SkaffoldModules_SkaffoldGCSSource) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// Details of rendering for a single target.
type Release_TargetRender struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The resource name of the Cloud Build `Build` object that is
	// used to render the manifest for this target. Format is
	// `projects/{project}/locations/{location}/builds/{build}`.
	RenderingBuild string `protobuf:"bytes,1,opt,name=rendering_build,json=renderingBuild,proto3" json:"rendering_build,omitempty"`
	// Output only. Current state of the render operation for this Target.
	RenderingState Release_TargetRender_TargetRenderState `protobuf:"varint,2,opt,name=rendering_state,json=renderingState,proto3,enum=google.events.cloud.deploy.v1.Release_TargetRender_TargetRenderState" json:"rendering_state,omitempty"`
	// Output only. Metadata related to the `Release` render for this Target.
	Metadata *RenderMetadata `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Output only. Reason this render failed. This will always be unspecified
	// while the render in progress.
	FailureCause Release_TargetRender_FailureCause `protobuf:"varint,4,opt,name=failure_cause,json=failureCause,proto3,enum=google.events.cloud.deploy.v1.Release_TargetRender_FailureCause" json:"failure_cause,omitempty"`
	// Output only. Additional information about the render failure, if
	// available.
	FailureMessage string `protobuf:"bytes,5,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message,omitempty"`
}

func (x *Release_TargetRender) Reset() {
	*x = Release_TargetRender{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Release_TargetRender) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release_TargetRender) ProtoMessage() {}

func (x *Release_TargetRender) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release_TargetRender.ProtoReflect.Descriptor instead.
func (*Release_TargetRender) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{31, 0}
}

func (x *Release_TargetRender) GetRenderingBuild() string {
	if x != nil {
		return x.RenderingBuild
	}
	return ""
}

func (x *Release_TargetRender) GetRenderingState() Release_TargetRender_TargetRenderState {
	if x != nil {
		return x.RenderingState
	}
	return Release_TargetRender_TARGET_RENDER_STATE_UNSPECIFIED
}

func (x *Release_TargetRender) GetMetadata() *RenderMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Release_TargetRender) GetFailureCause() Release_TargetRender_FailureCause {
	if x != nil {
		return x.FailureCause
	}
	return Release_TargetRender_FAILURE_CAUSE_UNSPECIFIED
}

func (x *Release_TargetRender) GetFailureMessage() string {
	if x != nil {
		return x.FailureMessage
	}
	return ""
}

// ReleaseReadyCondition contains information around the status of the
// Release. If a release is not ready, you cannot create a rollout with the
// release.
type Release_ReleaseReadyCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if the Release is in a valid state. Otherwise at least one condition
	// in `ReleaseCondition` is in an invalid state. Iterate over those
	// conditions and see which condition(s) has status = false to find out what
	// is wrong with the Release.
	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Release_ReleaseReadyCondition) Reset() {
	*x = Release_ReleaseReadyCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Release_ReleaseReadyCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release_ReleaseReadyCondition) ProtoMessage() {}

func (x *Release_ReleaseReadyCondition) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release_ReleaseReadyCondition.ProtoReflect.Descriptor instead.
func (*Release_ReleaseReadyCondition) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{31, 1}
}

func (x *Release_ReleaseReadyCondition) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

// SkaffoldSupportedCondition contains information about when support for the
// release's version of Skaffold ends.
type Release_SkaffoldSupportedCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if the version of Skaffold used by this release is supported.
	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// The Skaffold support state for this release's version of Skaffold.
	SkaffoldSupportState SkaffoldSupportState `protobuf:"varint,2,opt,name=skaffold_support_state,json=skaffoldSupportState,proto3,enum=google.events.cloud.deploy.v1.SkaffoldSupportState" json:"skaffold_support_state,omitempty"`
	// The time at which this release's version of Skaffold will enter
	// maintenance mode.
	MaintenanceModeTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=maintenance_mode_time,json=maintenanceModeTime,proto3" json:"maintenance_mode_time,omitempty"`
	// The time at which this release's version of Skaffold will no longer be
	// supported.
	SupportExpirationTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=support_expiration_time,json=supportExpirationTime,proto3" json:"support_expiration_time,omitempty"`
}

func (x *Release_SkaffoldSupportedCondition) Reset() {
	*x = Release_SkaffoldSupportedCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Release_SkaffoldSupportedCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release_SkaffoldSupportedCondition) ProtoMessage() {}

func (x *Release_SkaffoldSupportedCondition) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release_SkaffoldSupportedCondition.ProtoReflect.Descriptor instead.
func (*Release_SkaffoldSupportedCondition) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{31, 2}
}

func (x *Release_SkaffoldSupportedCondition) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *Release_SkaffoldSupportedCondition) GetSkaffoldSupportState() SkaffoldSupportState {
	if x != nil {
		return x.SkaffoldSupportState
	}
	return SkaffoldSupportState_SKAFFOLD_SUPPORT_STATE_UNSPECIFIED
}

func (x *Release_SkaffoldSupportedCondition) GetMaintenanceModeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.MaintenanceModeTime
	}
	return nil
}

func (x *Release_SkaffoldSupportedCondition) GetSupportExpirationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SupportExpirationTime
	}
	return nil
}

// ReleaseCondition contains all conditions relevant to a Release.
type Release_ReleaseCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Details around the Releases's overall status.
	ReleaseReadyCondition *Release_ReleaseReadyCondition `protobuf:"bytes,1,opt,name=release_ready_condition,json=releaseReadyCondition,proto3" json:"release_ready_condition,omitempty"`
	// Details around the support state of the release's Skaffold
	// version.
	SkaffoldSupportedCondition *Release_SkaffoldSupportedCondition `protobuf:"bytes,2,opt,name=skaffold_supported_condition,json=skaffoldSupportedCondition,proto3" json:"skaffold_supported_condition,omitempty"`
}

func (x *Release_ReleaseCondition) Reset() {
	*x = Release_ReleaseCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Release_ReleaseCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release_ReleaseCondition) ProtoMessage() {}

func (x *Release_ReleaseCondition) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release_ReleaseCondition.ProtoReflect.Descriptor instead.
func (*Release_ReleaseCondition) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{31, 3}
}

func (x *Release_ReleaseCondition) GetReleaseReadyCondition() *Release_ReleaseReadyCondition {
	if x != nil {
		return x.ReleaseReadyCondition
	}
	return nil
}

func (x *Release_ReleaseCondition) GetSkaffoldSupportedCondition() *Release_SkaffoldSupportedCondition {
	if x != nil {
		return x.SkaffoldSupportedCondition
	}
	return nil
}

// Contains the paths to the artifacts, relative to the URI, for a phase.
type TargetArtifact_PhaseArtifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. File path of the resolved Skaffold configuration relative to
	// the URI.
	SkaffoldConfigPath string `protobuf:"bytes,1,opt,name=skaffold_config_path,json=skaffoldConfigPath,proto3" json:"skaffold_config_path,omitempty"`
	// Output only. File path of the rendered manifest relative to the URI.
	ManifestPath string `protobuf:"bytes,3,opt,name=manifest_path,json=manifestPath,proto3" json:"manifest_path,omitempty"`
	// Output only. File path of the directory of rendered job manifests
	// relative to the URI. This is only set if it is applicable.
	JobManifestsPath string `protobuf:"bytes,4,opt,name=job_manifests_path,json=jobManifestsPath,proto3" json:"job_manifests_path,omitempty"`
}

func (x *TargetArtifact_PhaseArtifact) Reset() {
	*x = TargetArtifact_PhaseArtifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_deploy_v1_data_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetArtifact_PhaseArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetArtifact_PhaseArtifact) ProtoMessage() {}

func (x *TargetArtifact_PhaseArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_deploy_v1_data_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetArtifact_PhaseArtifact.ProtoReflect.Descriptor instead.
func (*TargetArtifact_PhaseArtifact) Descriptor() ([]byte, []int) {
	return file_cloud_deploy_v1_data_proto_rawDescGZIP(), []int{33, 0}
}

func (x *TargetArtifact_PhaseArtifact) GetSkaffoldConfigPath() string {
	if x != nil {
		return x.SkaffoldConfigPath
	}
	return ""
}

func (x *TargetArtifact_PhaseArtifact) GetManifestPath() string {
	if x != nil {
		return x.ManifestPath
	}
	return ""
}

func (x *TargetArtifact_PhaseArtifact) GetJobManifestsPath() string {
	if x != nil {
		return x.JobManifestsPath
	}
	return ""
}

var File_cloud_deploy_v1_data_proto protoreflect.FileDescriptor

var file_cloud_deploy_v1_data_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x05, 0x0a,
	0x10, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x0f,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22,
	0x4e, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x22,
	0xe3, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x5c, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xe0, 0x02, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x76, 0x0a, 0x13, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9, 0x01, 0x0a, 0x08, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x45, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x06,
	0x63, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e,
	0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x42, 0x15, 0x0a,
	0x13, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x22, 0x25, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x26, 0x0a, 0x0a, 0x50,
	0x6f, 0x73, 0x74, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x46, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x12, 0x49, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52,
	0x0a, 0x70, 0x6f, 0x73, 0x74, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x22, 0xb8, 0x02, 0x0a, 0x06,
	0x43, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x53, 0x0a, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5e, 0x0a, 0x11, 0x63,
	0x61, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x61, 0x72,
	0x79, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x71, 0x0a, 0x18, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61,
	0x6e, 0x61, 0x72, 0x79, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x06,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x61, 0x72,
	0x79, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0b, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x46, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x49, 0x0a,
	0x0a, 0x70, 0x6f, 0x73, 0x74, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x0a, 0x70, 0x6f,
	0x73, 0x74, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x22, 0x92, 0x03, 0x0a, 0x16, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x66, 0x0a, 0x0d, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0x8f, 0x02, 0x0a, 0x0b,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x46, 0x0a, 0x09, 0x70, 0x72,
	0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x12, 0x49, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x22, 0xb9, 0x05,
	0x0a, 0x10, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x76, 0x0a, 0x14, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x65, 0x73, 0x68, 0x48, 0x00, 0x52, 0x12, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x12, 0x72, 0x0a, 0x12, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x1a, 0x90,
	0x02, 0x0a, 0x12, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x65, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4e,
	0x0a, 0x16, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x77,
	0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x51,
	0x0a, 0x17, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x75, 0x74, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x75, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x8f, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x40, 0x0a, 0x1c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x64,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x6f, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x42, 0x14, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe0, 0x01, 0x0a, 0x0e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x19,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x61, 0x6e, 0x61,
	0x72, 0x79, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x63, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x73, 0x22, 0xc2, 0x01, 0x0a,
	0x0d, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x51,
	0x0a, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x12, 0x4c, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x75, 0x6e, 0x42,
	0x10, 0x0a, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x6d, 0x0a, 0x16, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x97, 0x01, 0x0a, 0x17, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x14, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0xe3, 0x02, 0x0a, 0x11, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6f, 0x0a, 0x18, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x72, 0x0a, 0x19, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x17, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x16, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe7, 0x09, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x49, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x03, 0x67, 0x6b, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6b, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x03, 0x67, 0x6b, 0x65, 0x12, 0x55,
	0x0a, 0x0e, 0x61, 0x6e, 0x74, 0x68, 0x6f, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x74, 0x68, 0x6f, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x6e, 0x74, 0x68, 0x6f, 0x73, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x03, 0x72, 0x75, 0x6e, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x72, 0x75, 0x6e, 0x12, 0x4f, 0x0a, 0x0c, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0b,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65,
	0x74, 0x61, 0x67, 0x12, 0x5b, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x12, 0x68, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22,
	0xf9, 0x04, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x60, 0x0a, 0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x4f, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x11,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x45, 0x50, 0x4c, 0x4f, 0x59, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x45, 0x52, 0x49, 0x46,
	0x59, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59,
	0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x53, 0x54, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59,
	0x10, 0x05, 0x42, 0x17, 0x0a, 0x15, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x61, 0x0a, 0x0b, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0x82,
	0x01, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x22, 0x47, 0x0a, 0x0a, 0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x22, 0x2f, 0x0a, 0x0d,
	0x41, 0x6e, 0x74, 0x68, 0x6f, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x22, 0x2e, 0x0a,
	0x10, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x0a,
	0x0b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x73, 0x22, 0x3c, 0x0a, 0x0c, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc2, 0x05, 0x0a, 0x10, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x65, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67,
	0x12, 0x63, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x6b, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd1,
	0x01, 0x0a, 0x1b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53,
	0x6b, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x18, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x73, 0x6b, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x5f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x61, 0x66, 0x66,
	0x6f, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x16, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x53, 0x6b, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x22, 0x91, 0x03, 0x0a, 0x0f, 0x53, 0x6b, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x12, 0x54, 0x0a, 0x03, 0x67, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b,
	0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x6b,
	0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x47, 0x69, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x03, 0x67, 0x69, 0x74, 0x12, 0x74, 0x0a, 0x14, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x47, 0x43, 0x53,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x12, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a, 0x4d, 0x0a, 0x11,
	0x53, 0x6b, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x47, 0x69, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x1a, 0x3f, 0x0a, 0x11, 0x53,
	0x6b, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x47, 0x43, 0x53, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x42, 0x08, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xef, 0x1a, 0x0a, 0x07, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a,
	0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e,
	0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x46, 0x0a, 0x11, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x72, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x6b, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6b, 0x61, 0x66, 0x66, 0x6f,
	0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x72, 0x69, 0x12, 0x30, 0x0a, 0x14, 0x73,
	0x6b, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x6b, 0x61, 0x66, 0x66,
	0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x55, 0x0a,
	0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x52, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x12, 0x6d, 0x0a, 0x1a, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x18, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x50, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x70, 0x0a, 0x1c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x19, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x0c, 0x72, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0b, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74,
	0x61, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6b, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6b,
	0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a,
	0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x60, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x55, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69,
	0x0a, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xf4, 0x05, 0x0a, 0x0c, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x12, 0x6e, 0x0a, 0x0f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x65,
	0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x43, 0x61, 0x75, 0x73, 0x65, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x64,
	0x0a, 0x11, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x03, 0x22, 0x89, 0x02, 0x0a, 0x0c, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x42, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4c, 0x4f, 0x55, 0x44,
	0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x45, 0x52, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x45, 0x50, 0x4c, 0x4f,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x20,
	0x0a, 0x1c, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x07,
	0x1a, 0x2f, 0x0a, 0x15, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x1a, 0xc3, 0x02, 0x0a, 0x1a, 0x53, 0x6b, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x69, 0x0a, 0x16, 0x73, 0x6b, 0x61, 0x66,
	0x66, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x61, 0x66, 0x66, 0x6f, 0x6c,
	0x64, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x14, 0x73,
	0x6b, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13,
	0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x8e, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x17,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x83, 0x01, 0x0a, 0x1c, 0x73, 0x6b, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x2e, 0x53, 0x6b, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x73, 0x6b,
	0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x71, 0x0a, 0x14, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x43, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x75, 0x0a, 0x12, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x49,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a,
	0x15, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x57, 0x0a, 0x0b, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x03, 0x22, 0x37, 0x0a, 0x0d, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x22, 0x96, 0x04, 0x0a, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x55, 0x72, 0x69, 0x12, 0x30, 0x0a, 0x14,
	0x73, 0x6b, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x6b, 0x61, 0x66,
	0x66, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x6a, 0x0a, 0x0f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x70, 0x68, 0x61, 0x73, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x1a,
	0x94, 0x01, 0x0a, 0x0d, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6b, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x73, 0x6b, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x6a, 0x6f, 0x62, 0x5f,
	0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6a, 0x6f, 0x62, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x73, 0x50, 0x61, 0x74, 0x68, 0x1a, 0x7e, 0x0a, 0x13, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x22, 0x32, 0x0a,
	0x16, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x22, 0xab, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72, 0x75,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x75, 0x6e, 0x12, 0x45, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x22,
	0xad, 0x0f, 0x0a, 0x07, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a,
	0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x5b,
	0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f,
	0x75, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65,
	0x74, 0x61, 0x67, 0x12, 0x65, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x43, 0x61, 0x75, 0x73, 0x65, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x06, 0x70, 0x68, 0x61, 0x73, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x6c,
	0x6f, 0x75, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x6f, 0x6c, 0x6c,
	0x6f, 0x75, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x6f, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x4f, 0x66, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x12, 0x35, 0x0a, 0x17,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x62, 0x79, 0x5f, 0x72,
	0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x42, 0x79, 0x52, 0x6f, 0x6c, 0x6c, 0x6f,
	0x75, 0x74, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7b,
	0x0a, 0x0d, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1e, 0x0a, 0x1a, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x4e, 0x45, 0x45, 0x44, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x4e, 0x45, 0x45, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x22, 0xc4, 0x01, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x15,
	0x0a, 0x11, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45,
	0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x41, 0x4c, 0x54, 0x45, 0x44,
	0x10, 0x0a, 0x22, 0x8a, 0x02, 0x0a, 0x0c, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x61,
	0x75, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x43,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x42, 0x55, 0x49, 0x4c,
	0x44, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e,
	0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x41, 0x42, 0x41, 0x4e,
	0x44, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x45, 0x52, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x08, 0x22,
	0xf9, 0x01, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x09,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x75, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x75, 0x6e, 0x12, 0x58, 0x0a, 0x0a, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x22, 0x7d, 0x0a, 0x10, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x75, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x82, 0x02, 0x0a, 0x19, 0x41,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x12, 0x36,
	0x0a, 0x17, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x15, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72,
	0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x1d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x61,
	0x69, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x22,
	0x9e, 0x01, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x51, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xb2, 0x03, 0x0a, 0x05, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x58, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6a, 0x6f,
	0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x5f, 0x0a, 0x12, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x6c, 0x6f,
	0x75, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x52,
	0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x22, 0x71, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x06, 0x42, 0x06, 0x0a,
	0x04, 0x6a, 0x6f, 0x62, 0x73, 0x22, 0xaa, 0x02, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62,
	0x52, 0x09, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4a, 0x6f, 0x62, 0x12, 0x41, 0x0a, 0x0a, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4a, 0x6f, 0x62, 0x52, 0x09, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4a, 0x6f, 0x62, 0x12, 0x47,
	0x0a, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x6a, 0x6f, 0x62, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x4a, 0x6f, 0x62, 0x12, 0x49, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4a, 0x6f, 0x62, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4a,
	0x6f, 0x62, 0x22, 0xbc, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x6c,
	0x6f, 0x75, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x52, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x54, 0x0a, 0x14, 0x61,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x5f, 0x6a,
	0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x12, 0x61,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x4a, 0x6f, 0x62,
	0x73, 0x22, 0xd2, 0x06, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6b, 0x69,
	0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x6b, 0x69, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6a,
	0x6f, 0x62, 0x52, 0x75, 0x6e, 0x12, 0x49, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f,
	0x6a, 0x6f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4a, 0x6f, 0x62,
	0x12, 0x49, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4a, 0x6f, 0x62, 0x48, 0x00,
	0x52, 0x09, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4a, 0x6f, 0x62, 0x12, 0x52, 0x0a, 0x0d, 0x70,
	0x72, 0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4a, 0x6f, 0x62, 0x48,
	0x00, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4a, 0x6f, 0x62, 0x12,
	0x55, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x6a, 0x6f,
	0x62, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x4a, 0x6f, 0x62, 0x12, 0x6f, 0x0a, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x5f, 0x6a,
	0x6f, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x4a, 0x6f, 0x62, 0x48, 0x00,
	0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c,
	0x6c, 0x6f, 0x75, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x72, 0x0a, 0x19, 0x61, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x4a, 0x6f,
	0x62, 0x48, 0x00, 0x52, 0x16, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x4a, 0x6f, 0x62, 0x22, 0x8c, 0x01, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x06,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x08, 0x42, 0x0a, 0x0a, 0x08, 0x6a, 0x6f,
	0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x0b, 0x0a, 0x09, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x4a, 0x6f, 0x62, 0x22, 0x0b, 0x0a, 0x09, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4a, 0x6f, 0x62,
	0x22, 0x28, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4a, 0x6f, 0x62,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x29, 0x0a, 0x0d, 0x50, 0x6f,
	0x73, 0x74, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4a, 0x6f, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x4a, 0x6f, 0x62, 0x22, 0x18,
	0x0a, 0x16, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x6f,
	0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x4a, 0x6f, 0x62, 0x22, 0xed, 0x05, 0x0a, 0x0a, 0x41, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x55, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x3e, 0x0a,
	0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x66, 0x0a, 0x1a, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x22, 0xca, 0x02, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x65, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x65, 0x0a, 0x14, 0x61, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x12, 0x61,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x62, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x6c,
	0x6f, 0x75, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x8a, 0x02,
	0x0a, 0x12, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x77,
	0x61, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x12, 0x41,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x77, 0x61, 0x69, 0x74, 0x12, 0x54, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x02, 0x0a, 0x11,
	0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x72, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x70,
	0x61, 0x69, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x99,
	0x01, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a,
	0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x08, 0x72,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x42, 0x06, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x05, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x12, 0x2d, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x12,
	0x4d, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x37,
	0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x17, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x72, 0x0a, 0x19, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x52, 0x0a, 0x0f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x3f, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0x66, 0x0a, 0x19, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x49, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x54, 0x0a, 0x10, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x40, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0x54, 0x0a, 0x10, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x5a, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x2a, 0xb9, 0x01, 0x0a, 0x14, 0x53, 0x6b, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x22,
	0x53, 0x4b, 0x41, 0x46, 0x46, 0x4f, 0x4c, 0x44, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x4b, 0x41, 0x46, 0x46, 0x4f, 0x4c, 0x44,
	0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x4b,
	0x41, 0x46, 0x46, 0x4f, 0x4c, 0x44, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x4b, 0x41, 0x46, 0x46,
	0x4f, 0x4c, 0x44, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a,
	0x62, 0x0a, 0x0b, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x42, 0x41, 0x43, 0x4b, 0x4f, 0x46, 0x46, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x42, 0x41, 0x43, 0x4b, 0x4f, 0x46, 0x46, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x49, 0x4e,
	0x45, 0x41, 0x52, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x41, 0x43, 0x4b, 0x4f, 0x46, 0x46,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x49, 0x41,
	0x4c, 0x10, 0x02, 0x42, 0x6e, 0xaa, 0x02, 0x26, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x1d, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5c, 0x56, 0x31, 0xea, 0x02,
	0x22, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_deploy_v1_data_proto_rawDescOnce sync.Once
	file_cloud_deploy_v1_data_proto_rawDescData = file_cloud_deploy_v1_data_proto_rawDesc
)

func file_cloud_deploy_v1_data_proto_rawDescGZIP() []byte {
	file_cloud_deploy_v1_data_proto_rawDescOnce.Do(func() {
		file_cloud_deploy_v1_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_deploy_v1_data_proto_rawDescData)
	})
	return file_cloud_deploy_v1_data_proto_rawDescData
}

var file_cloud_deploy_v1_data_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_cloud_deploy_v1_data_proto_msgTypes = make([]protoimpl.MessageInfo, 98)
var file_cloud_deploy_v1_data_proto_goTypes = []any{
	(SkaffoldSupportState)(0),                      // 0: google.events.cloud.deploy.v1.SkaffoldSupportState
	(BackoffMode)(0),                               // 1: google.events.cloud.deploy.v1.BackoffMode
	(ExecutionConfig_ExecutionEnvironmentUsage)(0), // 2: google.events.cloud.deploy.v1.ExecutionConfig.ExecutionEnvironmentUsage
	(Release_RenderState)(0),                       // 3: google.events.cloud.deploy.v1.Release.RenderState
	(Release_TargetRender_TargetRenderState)(0),    // 4: google.events.cloud.deploy.v1.Release.TargetRender.TargetRenderState
	(Release_TargetRender_FailureCause)(0),         // 5: google.events.cloud.deploy.v1.Release.TargetRender.FailureCause
	(Rollout_ApprovalState)(0),                     // 6: google.events.cloud.deploy.v1.Rollout.ApprovalState
	(Rollout_State)(0),                             // 7: google.events.cloud.deploy.v1.Rollout.State
	(Rollout_FailureCause)(0),                      // 8: google.events.cloud.deploy.v1.Rollout.FailureCause
	(Phase_State)(0),                               // 9: google.events.cloud.deploy.v1.Phase.State
	(Job_State)(0),                                 // 10: google.events.cloud.deploy.v1.Job.State
	(*DeliveryPipeline)(nil),                       // 11: google.events.cloud.deploy.v1.DeliveryPipeline
	(*SerialPipeline)(nil),                         // 12: google.events.cloud.deploy.v1.SerialPipeline
	(*Stage)(nil),                                  // 13: google.events.cloud.deploy.v1.Stage
	(*DeployParameters)(nil),                       // 14: google.events.cloud.deploy.v1.DeployParameters
	(*Strategy)(nil),                               // 15: google.events.cloud.deploy.v1.Strategy
	(*Predeploy)(nil),                              // 16: google.events.cloud.deploy.v1.Predeploy
	(*Postdeploy)(nil),                             // 17: google.events.cloud.deploy.v1.Postdeploy
	(*Standard)(nil),                               // 18: google.events.cloud.deploy.v1.Standard
	(*Canary)(nil),                                 // 19: google.events.cloud.deploy.v1.Canary
	(*CanaryDeployment)(nil),                       // 20: google.events.cloud.deploy.v1.CanaryDeployment
	(*CustomCanaryDeployment)(nil),                 // 21: google.events.cloud.deploy.v1.CustomCanaryDeployment
	(*KubernetesConfig)(nil),                       // 22: google.events.cloud.deploy.v1.KubernetesConfig
	(*CloudRunConfig)(nil),                         // 23: google.events.cloud.deploy.v1.CloudRunConfig
	(*RuntimeConfig)(nil),                          // 24: google.events.cloud.deploy.v1.RuntimeConfig
	(*PipelineReadyCondition)(nil),                 // 25: google.events.cloud.deploy.v1.PipelineReadyCondition
	(*TargetsPresentCondition)(nil),                // 26: google.events.cloud.deploy.v1.TargetsPresentCondition
	(*TargetsTypeCondition)(nil),                   // 27: google.events.cloud.deploy.v1.TargetsTypeCondition
	(*PipelineCondition)(nil),                      // 28: google.events.cloud.deploy.v1.PipelineCondition
	(*Target)(nil),                                 // 29: google.events.cloud.deploy.v1.Target
	(*ExecutionConfig)(nil),                        // 30: google.events.cloud.deploy.v1.ExecutionConfig
	(*DefaultPool)(nil),                            // 31: google.events.cloud.deploy.v1.DefaultPool
	(*PrivatePool)(nil),                            // 32: google.events.cloud.deploy.v1.PrivatePool
	(*GkeCluster)(nil),                             // 33: google.events.cloud.deploy.v1.GkeCluster
	(*AnthosCluster)(nil),                          // 34: google.events.cloud.deploy.v1.AnthosCluster
	(*CloudRunLocation)(nil),                       // 35: google.events.cloud.deploy.v1.CloudRunLocation
	(*MultiTarget)(nil),                            // 36: google.events.cloud.deploy.v1.MultiTarget
	(*CustomTarget)(nil),                           // 37: google.events.cloud.deploy.v1.CustomTarget
	(*CustomTargetType)(nil),                       // 38: google.events.cloud.deploy.v1.CustomTargetType
	(*CustomTargetSkaffoldActions)(nil),            // 39: google.events.cloud.deploy.v1.CustomTargetSkaffoldActions
	(*SkaffoldModules)(nil),                        // 40: google.events.cloud.deploy.v1.SkaffoldModules
	(*TargetAttribute)(nil),                        // 41: google.events.cloud.deploy.v1.TargetAttribute
	(*Release)(nil),                                // 42: google.events.cloud.deploy.v1.Release
	(*BuildArtifact)(nil),                          // 43: google.events.cloud.deploy.v1.BuildArtifact
	(*TargetArtifact)(nil),                         // 44: google.events.cloud.deploy.v1.TargetArtifact
	(*CloudRunRenderMetadata)(nil),                 // 45: google.events.cloud.deploy.v1.CloudRunRenderMetadata
	(*RenderMetadata)(nil),                         // 46: google.events.cloud.deploy.v1.RenderMetadata
	(*Rollout)(nil),                                // 47: google.events.cloud.deploy.v1.Rollout
	(*Metadata)(nil),                               // 48: google.events.cloud.deploy.v1.Metadata
	(*CloudRunMetadata)(nil),                       // 49: google.events.cloud.deploy.v1.CloudRunMetadata
	(*AutomationRolloutMetadata)(nil),              // 50: google.events.cloud.deploy.v1.AutomationRolloutMetadata
	(*CustomMetadata)(nil),                         // 51: google.events.cloud.deploy.v1.CustomMetadata
	(*Phase)(nil),                                  // 52: google.events.cloud.deploy.v1.Phase
	(*DeploymentJobs)(nil),                         // 53: google.events.cloud.deploy.v1.DeploymentJobs
	(*ChildRolloutJobs)(nil),                       // 54: google.events.cloud.deploy.v1.ChildRolloutJobs
	(*Job)(nil),                                    // 55: google.events.cloud.deploy.v1.Job
	(*DeployJob)(nil),                              // 56: google.events.cloud.deploy.v1.DeployJob
	(*VerifyJob)(nil),                              // 57: google.events.cloud.deploy.v1.VerifyJob
	(*PredeployJob)(nil),                           // 58: google.events.cloud.deploy.v1.PredeployJob
	(*PostdeployJob)(nil),                          // 59: google.events.cloud.deploy.v1.PostdeployJob
	(*CreateChildRolloutJob)(nil),                  // 60: google.events.cloud.deploy.v1.CreateChildRolloutJob
	(*AdvanceChildRolloutJob)(nil),                 // 61: google.events.cloud.deploy.v1.AdvanceChildRolloutJob
	(*Automation)(nil),                             // 62: google.events.cloud.deploy.v1.Automation
	(*AutomationResourceSelector)(nil),             // 63: google.events.cloud.deploy.v1.AutomationResourceSelector
	(*AutomationRule)(nil),                         // 64: google.events.cloud.deploy.v1.AutomationRule
	(*PromoteReleaseRule)(nil),                     // 65: google.events.cloud.deploy.v1.PromoteReleaseRule
	(*AdvanceRolloutRule)(nil),                     // 66: google.events.cloud.deploy.v1.AdvanceRolloutRule
	(*RepairRolloutRule)(nil),                      // 67: google.events.cloud.deploy.v1.RepairRolloutRule
	(*RepairMode)(nil),                             // 68: google.events.cloud.deploy.v1.RepairMode
	(*Retry)(nil),                                  // 69: google.events.cloud.deploy.v1.Retry
	(*Rollback)(nil),                               // 70: google.events.cloud.deploy.v1.Rollback
	(*AutomationRuleCondition)(nil),                // 71: google.events.cloud.deploy.v1.AutomationRuleCondition
	(*DeliveryPipelineEventData)(nil),              // 72: google.events.cloud.deploy.v1.DeliveryPipelineEventData
	(*TargetEventData)(nil),                        // 73: google.events.cloud.deploy.v1.TargetEventData
	(*CustomTargetTypeEventData)(nil),              // 74: google.events.cloud.deploy.v1.CustomTargetTypeEventData
	(*ReleaseEventData)(nil),                       // 75: google.events.cloud.deploy.v1.ReleaseEventData
	(*RolloutEventData)(nil),                       // 76: google.events.cloud.deploy.v1.RolloutEventData
	(*AutomationEventData)(nil),                    // 77: google.events.cloud.deploy.v1.AutomationEventData
	nil,                                            // 78: google.events.cloud.deploy.v1.DeliveryPipeline.AnnotationsEntry
	nil,                                            // 79: google.events.cloud.deploy.v1.DeliveryPipeline.LabelsEntry
	nil,                                            // 80: google.events.cloud.deploy.v1.DeployParameters.ValuesEntry
	nil,                                            // 81: google.events.cloud.deploy.v1.DeployParameters.MatchTargetLabelsEntry
	(*CustomCanaryDeployment_PhaseConfig)(nil),     // 82: google.events.cloud.deploy.v1.CustomCanaryDeployment.PhaseConfig
	(*KubernetesConfig_GatewayServiceMesh)(nil),    // 83: google.events.cloud.deploy.v1.KubernetesConfig.GatewayServiceMesh
	(*KubernetesConfig_ServiceNetworking)(nil),     // 84: google.events.cloud.deploy.v1.KubernetesConfig.ServiceNetworking
	nil, // 85: google.events.cloud.deploy.v1.Target.AnnotationsEntry
	nil, // 86: google.events.cloud.deploy.v1.Target.LabelsEntry
	nil, // 87: google.events.cloud.deploy.v1.Target.DeployParametersEntry
	nil, // 88: google.events.cloud.deploy.v1.CustomTargetType.AnnotationsEntry
	nil, // 89: google.events.cloud.deploy.v1.CustomTargetType.LabelsEntry
	(*SkaffoldModules_SkaffoldGitSource)(nil), // 90: google.events.cloud.deploy.v1.SkaffoldModules.SkaffoldGitSource
	(*SkaffoldModules_SkaffoldGCSSource)(nil), // 91: google.events.cloud.deploy.v1.SkaffoldModules.SkaffoldGCSSource
	nil,                                   // 92: google.events.cloud.deploy.v1.TargetAttribute.LabelsEntry
	(*Release_TargetRender)(nil),          // 93: google.events.cloud.deploy.v1.Release.TargetRender
	(*Release_ReleaseReadyCondition)(nil), // 94: google.events.cloud.deploy.v1.Release.ReleaseReadyCondition
	(*Release_SkaffoldSupportedCondition)(nil), // 95: google.events.cloud.deploy.v1.Release.SkaffoldSupportedCondition
	(*Release_ReleaseCondition)(nil),           // 96: google.events.cloud.deploy.v1.Release.ReleaseCondition
	nil,                                        // 97: google.events.cloud.deploy.v1.Release.AnnotationsEntry
	nil,                                        // 98: google.events.cloud.deploy.v1.Release.LabelsEntry
	nil,                                        // 99: google.events.cloud.deploy.v1.Release.TargetArtifactsEntry
	nil,                                        // 100: google.events.cloud.deploy.v1.Release.TargetRendersEntry
	nil,                                        // 101: google.events.cloud.deploy.v1.Release.DeployParametersEntry
	(*TargetArtifact_PhaseArtifact)(nil),       // 102: google.events.cloud.deploy.v1.TargetArtifact.PhaseArtifact
	nil,                                        // 103: google.events.cloud.deploy.v1.TargetArtifact.PhaseArtifactsEntry
	nil,                                        // 104: google.events.cloud.deploy.v1.Rollout.AnnotationsEntry
	nil,                                        // 105: google.events.cloud.deploy.v1.Rollout.LabelsEntry
	nil,                                        // 106: google.events.cloud.deploy.v1.CustomMetadata.ValuesEntry
	nil,                                        // 107: google.events.cloud.deploy.v1.Automation.AnnotationsEntry
	nil,                                        // 108: google.events.cloud.deploy.v1.Automation.LabelsEntry
	(*timestamppb.Timestamp)(nil),              // 109: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                // 110: google.protobuf.Duration
}
var file_cloud_deploy_v1_data_proto_depIdxs = []int32{
	78,  // 0: google.events.cloud.deploy.v1.DeliveryPipeline.annotations:type_name -> google.events.cloud.deploy.v1.DeliveryPipeline.AnnotationsEntry
	79,  // 1: google.events.cloud.deploy.v1.DeliveryPipeline.labels:type_name -> google.events.cloud.deploy.v1.DeliveryPipeline.LabelsEntry
	109, // 2: google.events.cloud.deploy.v1.DeliveryPipeline.create_time:type_name -> google.protobuf.Timestamp
	109, // 3: google.events.cloud.deploy.v1.DeliveryPipeline.update_time:type_name -> google.protobuf.Timestamp
	12,  // 4: google.events.cloud.deploy.v1.DeliveryPipeline.serial_pipeline:type_name -> google.events.cloud.deploy.v1.SerialPipeline
	28,  // 5: google.events.cloud.deploy.v1.DeliveryPipeline.condition:type_name -> google.events.cloud.deploy.v1.PipelineCondition
	13,  // 6: google.events.cloud.deploy.v1.SerialPipeline.stages:type_name -> google.events.cloud.deploy.v1.Stage
	15,  // 7: google.events.cloud.deploy.v1.Stage.strategy:type_name -> google.events.cloud.deploy.v1.Strategy
	14,  // 8: google.events.cloud.deploy.v1.Stage.deploy_parameters:type_name -> google.events.cloud.deploy.v1.DeployParameters
	80,  // 9: google.events.cloud.deploy.v1.DeployParameters.values:type_name -> google.events.cloud.deploy.v1.DeployParameters.ValuesEntry
	81,  // 10: google.events.cloud.deploy.v1.DeployParameters.match_target_labels:type_name -> google.events.cloud.deploy.v1.DeployParameters.MatchTargetLabelsEntry
	18,  // 11: google.events.cloud.deploy.v1.Strategy.standard:type_name -> google.events.cloud.deploy.v1.Standard
	19,  // 12: google.events.cloud.deploy.v1.Strategy.canary:type_name -> google.events.cloud.deploy.v1.Canary
	16,  // 13: google.events.cloud.deploy.v1.Standard.predeploy:type_name -> google.events.cloud.deploy.v1.Predeploy
	17,  // 14: google.events.cloud.deploy.v1.Standard.postdeploy:type_name -> google.events.cloud.deploy.v1.Postdeploy
	24,  // 15: google.events.cloud.deploy.v1.Canary.runtime_config:type_name -> google.events.cloud.deploy.v1.RuntimeConfig
	20,  // 16: google.events.cloud.deploy.v1.Canary.canary_deployment:type_name -> google.events.cloud.deploy.v1.CanaryDeployment
	21,  // 17: google.events.cloud.deploy.v1.Canary.custom_canary_deployment:type_name -> google.events.cloud.deploy.v1.CustomCanaryDeployment
	16,  // 18: google.events.cloud.deploy.v1.CanaryDeployment.predeploy:type_name -> google.events.cloud.deploy.v1.Predeploy
	17,  // 19: google.events.cloud.deploy.v1.CanaryDeployment.postdeploy:type_name -> google.events.cloud.deploy.v1.Postdeploy
	82,  // 20: google.events.cloud.deploy.v1.CustomCanaryDeployment.phase_configs:type_name -> google.events.cloud.deploy.v1.CustomCanaryDeployment.PhaseConfig
	83,  // 21: google.events.cloud.deploy.v1.KubernetesConfig.gateway_service_mesh:type_name -> google.events.cloud.deploy.v1.KubernetesConfig.GatewayServiceMesh
	84,  // 22: google.events.cloud.deploy.v1.KubernetesConfig.service_networking:type_name -> google.events.cloud.deploy.v1.KubernetesConfig.ServiceNetworking
	22,  // 23: google.events.cloud.deploy.v1.RuntimeConfig.kubernetes:type_name -> google.events.cloud.deploy.v1.KubernetesConfig
	23,  // 24: google.events.cloud.deploy.v1.RuntimeConfig.cloud_run:type_name -> google.events.cloud.deploy.v1.CloudRunConfig
	109, // 25: google.events.cloud.deploy.v1.PipelineReadyCondition.update_time:type_name -> google.protobuf.Timestamp
	109, // 26: google.events.cloud.deploy.v1.TargetsPresentCondition.update_time:type_name -> google.protobuf.Timestamp
	25,  // 27: google.events.cloud.deploy.v1.PipelineCondition.pipeline_ready_condition:type_name -> google.events.cloud.deploy.v1.PipelineReadyCondition
	26,  // 28: google.events.cloud.deploy.v1.PipelineCondition.targets_present_condition:type_name -> google.events.cloud.deploy.v1.TargetsPresentCondition
	27,  // 29: google.events.cloud.deploy.v1.PipelineCondition.targets_type_condition:type_name -> google.events.cloud.deploy.v1.TargetsTypeCondition
	85,  // 30: google.events.cloud.deploy.v1.Target.annotations:type_name -> google.events.cloud.deploy.v1.Target.AnnotationsEntry
	86,  // 31: google.events.cloud.deploy.v1.Target.labels:type_name -> google.events.cloud.deploy.v1.Target.LabelsEntry
	109, // 32: google.events.cloud.deploy.v1.Target.create_time:type_name -> google.protobuf.Timestamp
	109, // 33: google.events.cloud.deploy.v1.Target.update_time:type_name -> google.protobuf.Timestamp
	33,  // 34: google.events.cloud.deploy.v1.Target.gke:type_name -> google.events.cloud.deploy.v1.GkeCluster
	34,  // 35: google.events.cloud.deploy.v1.Target.anthos_cluster:type_name -> google.events.cloud.deploy.v1.AnthosCluster
	35,  // 36: google.events.cloud.deploy.v1.Target.run:type_name -> google.events.cloud.deploy.v1.CloudRunLocation
	36,  // 37: google.events.cloud.deploy.v1.Target.multi_target:type_name -> google.events.cloud.deploy.v1.MultiTarget
	37,  // 38: google.events.cloud.deploy.v1.Target.custom_target:type_name -> google.events.cloud.deploy.v1.CustomTarget
	30,  // 39: google.events.cloud.deploy.v1.Target.execution_configs:type_name -> google.events.cloud.deploy.v1.ExecutionConfig
	87,  // 40: google.events.cloud.deploy.v1.Target.deploy_parameters:type_name -> google.events.cloud.deploy.v1.Target.DeployParametersEntry
	2,   // 41: google.events.cloud.deploy.v1.ExecutionConfig.usages:type_name -> google.events.cloud.deploy.v1.ExecutionConfig.ExecutionEnvironmentUsage
	31,  // 42: google.events.cloud.deploy.v1.ExecutionConfig.default_pool:type_name -> google.events.cloud.deploy.v1.DefaultPool
	32,  // 43: google.events.cloud.deploy.v1.ExecutionConfig.private_pool:type_name -> google.events.cloud.deploy.v1.PrivatePool
	110, // 44: google.events.cloud.deploy.v1.ExecutionConfig.execution_timeout:type_name -> google.protobuf.Duration
	88,  // 45: google.events.cloud.deploy.v1.CustomTargetType.annotations:type_name -> google.events.cloud.deploy.v1.CustomTargetType.AnnotationsEntry
	89,  // 46: google.events.cloud.deploy.v1.CustomTargetType.labels:type_name -> google.events.cloud.deploy.v1.CustomTargetType.LabelsEntry
	109, // 47: google.events.cloud.deploy.v1.CustomTargetType.create_time:type_name -> google.protobuf.Timestamp
	109, // 48: google.events.cloud.deploy.v1.CustomTargetType.update_time:type_name -> google.protobuf.Timestamp
	39,  // 49: google.events.cloud.deploy.v1.CustomTargetType.custom_actions:type_name -> google.events.cloud.deploy.v1.CustomTargetSkaffoldActions
	40,  // 50: google.events.cloud.deploy.v1.CustomTargetSkaffoldActions.include_skaffold_modules:type_name -> google.events.cloud.deploy.v1.SkaffoldModules
	90,  // 51: google.events.cloud.deploy.v1.SkaffoldModules.git:type_name -> google.events.cloud.deploy.v1.SkaffoldModules.SkaffoldGitSource
	91,  // 52: google.events.cloud.deploy.v1.SkaffoldModules.google_cloud_storage:type_name -> google.events.cloud.deploy.v1.SkaffoldModules.SkaffoldGCSSource
	92,  // 53: google.events.cloud.deploy.v1.TargetAttribute.labels:type_name -> google.events.cloud.deploy.v1.TargetAttribute.LabelsEntry
	97,  // 54: google.events.cloud.deploy.v1.Release.annotations:type_name -> google.events.cloud.deploy.v1.Release.AnnotationsEntry
	98,  // 55: google.events.cloud.deploy.v1.Release.labels:type_name -> google.events.cloud.deploy.v1.Release.LabelsEntry
	109, // 56: google.events.cloud.deploy.v1.Release.create_time:type_name -> google.protobuf.Timestamp
	109, // 57: google.events.cloud.deploy.v1.Release.render_start_time:type_name -> google.protobuf.Timestamp
	109, // 58: google.events.cloud.deploy.v1.Release.render_end_time:type_name -> google.protobuf.Timestamp
	43,  // 59: google.events.cloud.deploy.v1.Release.build_artifacts:type_name -> google.events.cloud.deploy.v1.BuildArtifact
	11,  // 60: google.events.cloud.deploy.v1.Release.delivery_pipeline_snapshot:type_name -> google.events.cloud.deploy.v1.DeliveryPipeline
	29,  // 61: google.events.cloud.deploy.v1.Release.target_snapshots:type_name -> google.events.cloud.deploy.v1.Target
	38,  // 62: google.events.cloud.deploy.v1.Release.custom_target_type_snapshots:type_name -> google.events.cloud.deploy.v1.CustomTargetType
	3,   // 63: google.events.cloud.deploy.v1.Release.render_state:type_name -> google.events.cloud.deploy.v1.Release.RenderState
	99,  // 64: google.events.cloud.deploy.v1.Release.target_artifacts:type_name -> google.events.cloud.deploy.v1.Release.TargetArtifactsEntry
	100, // 65: google.events.cloud.deploy.v1.Release.target_renders:type_name -> google.events.cloud.deploy.v1.Release.TargetRendersEntry
	96,  // 66: google.events.cloud.deploy.v1.Release.condition:type_name -> google.events.cloud.deploy.v1.Release.ReleaseCondition
	101, // 67: google.events.cloud.deploy.v1.Release.deploy_parameters:type_name -> google.events.cloud.deploy.v1.Release.DeployParametersEntry
	103, // 68: google.events.cloud.deploy.v1.TargetArtifact.phase_artifacts:type_name -> google.events.cloud.deploy.v1.TargetArtifact.PhaseArtifactsEntry
	45,  // 69: google.events.cloud.deploy.v1.RenderMetadata.cloud_run:type_name -> google.events.cloud.deploy.v1.CloudRunRenderMetadata
	51,  // 70: google.events.cloud.deploy.v1.RenderMetadata.custom:type_name -> google.events.cloud.deploy.v1.CustomMetadata
	104, // 71: google.events.cloud.deploy.v1.Rollout.annotations:type_name -> google.events.cloud.deploy.v1.Rollout.AnnotationsEntry
	105, // 72: google.events.cloud.deploy.v1.Rollout.labels:type_name -> google.events.cloud.deploy.v1.Rollout.LabelsEntry
	109, // 73: google.events.cloud.deploy.v1.Rollout.create_time:type_name -> google.protobuf.Timestamp
	109, // 74: google.events.cloud.deploy.v1.Rollout.approve_time:type_name -> google.protobuf.Timestamp
	109, // 75: google.events.cloud.deploy.v1.Rollout.enqueue_time:type_name -> google.protobuf.Timestamp
	109, // 76: google.events.cloud.deploy.v1.Rollout.deploy_start_time:type_name -> google.protobuf.Timestamp
	109, // 77: google.events.cloud.deploy.v1.Rollout.deploy_end_time:type_name -> google.protobuf.Timestamp
	6,   // 78: google.events.cloud.deploy.v1.Rollout.approval_state:type_name -> google.events.cloud.deploy.v1.Rollout.ApprovalState
	7,   // 79: google.events.cloud.deploy.v1.Rollout.state:type_name -> google.events.cloud.deploy.v1.Rollout.State
	8,   // 80: google.events.cloud.deploy.v1.Rollout.deploy_failure_cause:type_name -> google.events.cloud.deploy.v1.Rollout.FailureCause
	52,  // 81: google.events.cloud.deploy.v1.Rollout.phases:type_name -> google.events.cloud.deploy.v1.Phase
	48,  // 82: google.events.cloud.deploy.v1.Rollout.metadata:type_name -> google.events.cloud.deploy.v1.Metadata
	49,  // 83: google.events.cloud.deploy.v1.Metadata.cloud_run:type_name -> google.events.cloud.deploy.v1.CloudRunMetadata
	50,  // 84: google.events.cloud.deploy.v1.Metadata.automation:type_name -> google.events.cloud.deploy.v1.AutomationRolloutMetadata
	51,  // 85: google.events.cloud.deploy.v1.Metadata.custom:type_name -> google.events.cloud.deploy.v1.CustomMetadata
	106, // 86: google.events.cloud.deploy.v1.CustomMetadata.values:type_name -> google.events.cloud.deploy.v1.CustomMetadata.ValuesEntry
	9,   // 87: google.events.cloud.deploy.v1.Phase.state:type_name -> google.events.cloud.deploy.v1.Phase.State
	53,  // 88: google.events.cloud.deploy.v1.Phase.deployment_jobs:type_name -> google.events.cloud.deploy.v1.DeploymentJobs
	54,  // 89: google.events.cloud.deploy.v1.Phase.child_rollout_jobs:type_name -> google.events.cloud.deploy.v1.ChildRolloutJobs
	55,  // 90: google.events.cloud.deploy.v1.DeploymentJobs.deploy_job:type_name -> google.events.cloud.deploy.v1.Job
	55,  // 91: google.events.cloud.deploy.v1.DeploymentJobs.verify_job:type_name -> google.events.cloud.deploy.v1.Job
	55,  // 92: google.events.cloud.deploy.v1.DeploymentJobs.predeploy_job:type_name -> google.events.cloud.deploy.v1.Job
	55,  // 93: google.events.cloud.deploy.v1.DeploymentJobs.postdeploy_job:type_name -> google.events.cloud.deploy.v1.Job
	55,  // 94: google.events.cloud.deploy.v1.ChildRolloutJobs.create_rollout_jobs:type_name -> google.events.cloud.deploy.v1.Job
	55,  // 95: google.events.cloud.deploy.v1.ChildRolloutJobs.advance_rollout_jobs:type_name -> google.events.cloud.deploy.v1.Job
	10,  // 96: google.events.cloud.deploy.v1.Job.state:type_name -> google.events.cloud.deploy.v1.Job.State
	56,  // 97: google.events.cloud.deploy.v1.Job.deploy_job:type_name -> google.events.cloud.deploy.v1.DeployJob
	57,  // 98: google.events.cloud.deploy.v1.Job.verify_job:type_name -> google.events.cloud.deploy.v1.VerifyJob
	58,  // 99: google.events.cloud.deploy.v1.Job.predeploy_job:type_name -> google.events.cloud.deploy.v1.PredeployJob
	59,  // 100: google.events.cloud.deploy.v1.Job.postdeploy_job:type_name -> google.events.cloud.deploy.v1.PostdeployJob
	60,  // 101: google.events.cloud.deploy.v1.Job.create_child_rollout_job:type_name -> google.events.cloud.deploy.v1.CreateChildRolloutJob
	61,  // 102: google.events.cloud.deploy.v1.Job.advance_child_rollout_job:type_name -> google.events.cloud.deploy.v1.AdvanceChildRolloutJob
	109, // 103: google.events.cloud.deploy.v1.Automation.create_time:type_name -> google.protobuf.Timestamp
	109, // 104: google.events.cloud.deploy.v1.Automation.update_time:type_name -> google.protobuf.Timestamp
	107, // 105: google.events.cloud.deploy.v1.Automation.annotations:type_name -> google.events.cloud.deploy.v1.Automation.AnnotationsEntry
	108, // 106: google.events.cloud.deploy.v1.Automation.labels:type_name -> google.events.cloud.deploy.v1.Automation.LabelsEntry
	63,  // 107: google.events.cloud.deploy.v1.Automation.selector:type_name -> google.events.cloud.deploy.v1.AutomationResourceSelector
	64,  // 108: google.events.cloud.deploy.v1.Automation.rules:type_name -> google.events.cloud.deploy.v1.AutomationRule
	41,  // 109: google.events.cloud.deploy.v1.AutomationResourceSelector.targets:type_name -> google.events.cloud.deploy.v1.TargetAttribute
	65,  // 110: google.events.cloud.deploy.v1.AutomationRule.promote_release_rule:type_name -> google.events.cloud.deploy.v1.PromoteReleaseRule
	66,  // 111: google.events.cloud.deploy.v1.AutomationRule.advance_rollout_rule:type_name -> google.events.cloud.deploy.v1.AdvanceRolloutRule
	67,  // 112: google.events.cloud.deploy.v1.AutomationRule.repair_rollout_rule:type_name -> google.events.cloud.deploy.v1.RepairRolloutRule
	110, // 113: google.events.cloud.deploy.v1.PromoteReleaseRule.wait:type_name -> google.protobuf.Duration
	71,  // 114: google.events.cloud.deploy.v1.PromoteReleaseRule.condition:type_name -> google.events.cloud.deploy.v1.AutomationRuleCondition
	110, // 115: google.events.cloud.deploy.v1.AdvanceRolloutRule.wait:type_name -> google.protobuf.Duration
	71,  // 116: google.events.cloud.deploy.v1.AdvanceRolloutRule.condition:type_name -> google.events.cloud.deploy.v1.AutomationRuleCondition
	68,  // 117: google.events.cloud.deploy.v1.RepairRolloutRule.repair_modes:type_name -> google.events.cloud.deploy.v1.RepairMode
	71,  // 118: google.events.cloud.deploy.v1.RepairRolloutRule.condition:type_name -> google.events.cloud.deploy.v1.AutomationRuleCondition
	69,  // 119: google.events.cloud.deploy.v1.RepairMode.retry:type_name -> google.events.cloud.deploy.v1.Retry
	70,  // 120: google.events.cloud.deploy.v1.RepairMode.rollback:type_name -> google.events.cloud.deploy.v1.Rollback
	110, // 121: google.events.cloud.deploy.v1.Retry.wait:type_name -> google.protobuf.Duration
	1,   // 122: google.events.cloud.deploy.v1.Retry.backoff_mode:type_name -> google.events.cloud.deploy.v1.BackoffMode
	26,  // 123: google.events.cloud.deploy.v1.AutomationRuleCondition.targets_present_condition:type_name -> google.events.cloud.deploy.v1.TargetsPresentCondition
	11,  // 124: google.events.cloud.deploy.v1.DeliveryPipelineEventData.payload:type_name -> google.events.cloud.deploy.v1.DeliveryPipeline
	29,  // 125: google.events.cloud.deploy.v1.TargetEventData.payload:type_name -> google.events.cloud.deploy.v1.Target
	38,  // 126: google.events.cloud.deploy.v1.CustomTargetTypeEventData.payload:type_name -> google.events.cloud.deploy.v1.CustomTargetType
	42,  // 127: google.events.cloud.deploy.v1.ReleaseEventData.payload:type_name -> google.events.cloud.deploy.v1.Release
	47,  // 128: google.events.cloud.deploy.v1.RolloutEventData.payload:type_name -> google.events.cloud.deploy.v1.Rollout
	62,  // 129: google.events.cloud.deploy.v1.AutomationEventData.payload:type_name -> google.events.cloud.deploy.v1.Automation
	16,  // 130: google.events.cloud.deploy.v1.CustomCanaryDeployment.PhaseConfig.predeploy:type_name -> google.events.cloud.deploy.v1.Predeploy
	17,  // 131: google.events.cloud.deploy.v1.CustomCanaryDeployment.PhaseConfig.postdeploy:type_name -> google.events.cloud.deploy.v1.Postdeploy
	110, // 132: google.events.cloud.deploy.v1.KubernetesConfig.GatewayServiceMesh.route_update_wait_time:type_name -> google.protobuf.Duration
	110, // 133: google.events.cloud.deploy.v1.KubernetesConfig.GatewayServiceMesh.stable_cutback_duration:type_name -> google.protobuf.Duration
	4,   // 134: google.events.cloud.deploy.v1.Release.TargetRender.rendering_state:type_name -> google.events.cloud.deploy.v1.Release.TargetRender.TargetRenderState
	46,  // 135: google.events.cloud.deploy.v1.Release.TargetRender.metadata:type_name -> google.events.cloud.deploy.v1.RenderMetadata
	5,   // 136: google.events.cloud.deploy.v1.Release.TargetRender.failure_cause:type_name -> google.events.cloud.deploy.v1.Release.TargetRender.FailureCause
	0,   // 137: google.events.cloud.deploy.v1.Release.SkaffoldSupportedCondition.skaffold_support_state:type_name -> google.events.cloud.deploy.v1.SkaffoldSupportState
	109, // 138: google.events.cloud.deploy.v1.Release.SkaffoldSupportedCondition.maintenance_mode_time:type_name -> google.protobuf.Timestamp
	109, // 139: google.events.cloud.deploy.v1.Release.SkaffoldSupportedCondition.support_expiration_time:type_name -> google.protobuf.Timestamp
	94,  // 140: google.events.cloud.deploy.v1.Release.ReleaseCondition.release_ready_condition:type_name -> google.events.cloud.deploy.v1.Release.ReleaseReadyCondition
	95,  // 141: google.events.cloud.deploy.v1.Release.ReleaseCondition.skaffold_supported_condition:type_name -> google.events.cloud.deploy.v1.Release.SkaffoldSupportedCondition
	44,  // 142: google.events.cloud.deploy.v1.Release.TargetArtifactsEntry.value:type_name -> google.events.cloud.deploy.v1.TargetArtifact
	93,  // 143: google.events.cloud.deploy.v1.Release.TargetRendersEntry.value:type_name -> google.events.cloud.deploy.v1.Release.TargetRender
	102, // 144: google.events.cloud.deploy.v1.TargetArtifact.PhaseArtifactsEntry.value:type_name -> google.events.cloud.deploy.v1.TargetArtifact.PhaseArtifact
	145, // [145:145] is the sub-list for method output_type
	145, // [145:145] is the sub-list for method input_type
	145, // [145:145] is the sub-list for extension type_name
	145, // [145:145] is the sub-list for extension extendee
	0,   // [0:145] is the sub-list for field type_name
}

func init() { file_cloud_deploy_v1_data_proto_init() }
func file_cloud_deploy_v1_data_proto_init() {
	if File_cloud_deploy_v1_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_deploy_v1_data_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*DeliveryPipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SerialPipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Stage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DeployParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Strategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Predeploy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Postdeploy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Standard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Canary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CanaryDeployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CustomCanaryDeployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*KubernetesConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CloudRunConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*RuntimeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*PipelineReadyCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*TargetsPresentCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*TargetsTypeCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*PipelineCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*ExecutionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*DefaultPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*PrivatePool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*GkeCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*AnthosCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*CloudRunLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*MultiTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*CustomTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*CustomTargetType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*CustomTargetSkaffoldActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*SkaffoldModules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*TargetAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*Release); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*BuildArtifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*TargetArtifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*CloudRunRenderMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*RenderMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*Rollout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*CloudRunMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*AutomationRolloutMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*CustomMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*Phase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*DeploymentJobs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*ChildRolloutJobs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*DeployJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*VerifyJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*PredeployJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*PostdeployJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*CreateChildRolloutJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*AdvanceChildRolloutJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*Automation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*AutomationResourceSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*AutomationRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*PromoteReleaseRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*AdvanceRolloutRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*RepairRolloutRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*RepairMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*Retry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*Rollback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*AutomationRuleCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*DeliveryPipelineEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*TargetEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*CustomTargetTypeEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*ReleaseEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*RolloutEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*AutomationEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*CustomCanaryDeployment_PhaseConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*KubernetesConfig_GatewayServiceMesh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*KubernetesConfig_ServiceNetworking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*SkaffoldModules_SkaffoldGitSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*SkaffoldModules_SkaffoldGCSSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*Release_TargetRender); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*Release_ReleaseReadyCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*Release_SkaffoldSupportedCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*Release_ReleaseCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_deploy_v1_data_proto_msgTypes[91].Exporter = func(v any, i int) any {
			switch v := v.(*TargetArtifact_PhaseArtifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cloud_deploy_v1_data_proto_msgTypes[0].OneofWrappers = []any{
		(*DeliveryPipeline_SerialPipeline)(nil),
	}
	file_cloud_deploy_v1_data_proto_msgTypes[4].OneofWrappers = []any{
		(*Strategy_Standard)(nil),
		(*Strategy_Canary)(nil),
	}
	file_cloud_deploy_v1_data_proto_msgTypes[8].OneofWrappers = []any{
		(*Canary_CanaryDeployment)(nil),
		(*Canary_CustomCanaryDeployment)(nil),
	}
	file_cloud_deploy_v1_data_proto_msgTypes[11].OneofWrappers = []any{
		(*KubernetesConfig_GatewayServiceMesh_)(nil),
		(*KubernetesConfig_ServiceNetworking_)(nil),
	}
	file_cloud_deploy_v1_data_proto_msgTypes[13].OneofWrappers = []any{
		(*RuntimeConfig_Kubernetes)(nil),
		(*RuntimeConfig_CloudRun)(nil),
	}
	file_cloud_deploy_v1_data_proto_msgTypes[18].OneofWrappers = []any{
		(*Target_Gke)(nil),
		(*Target_AnthosCluster)(nil),
		(*Target_Run)(nil),
		(*Target_MultiTarget)(nil),
		(*Target_CustomTarget)(nil),
	}
	file_cloud_deploy_v1_data_proto_msgTypes[19].OneofWrappers = []any{
		(*ExecutionConfig_DefaultPool)(nil),
		(*ExecutionConfig_PrivatePool)(nil),
	}
	file_cloud_deploy_v1_data_proto_msgTypes[27].OneofWrappers = []any{
		(*CustomTargetType_CustomActions)(nil),
	}
	file_cloud_deploy_v1_data_proto_msgTypes[29].OneofWrappers = []any{
		(*SkaffoldModules_Git)(nil),
		(*SkaffoldModules_GoogleCloudStorage)(nil),
	}
	file_cloud_deploy_v1_data_proto_msgTypes[33].OneofWrappers = []any{
		(*TargetArtifact_ArtifactUri)(nil),
	}
	file_cloud_deploy_v1_data_proto_msgTypes[41].OneofWrappers = []any{
		(*Phase_DeploymentJobs)(nil),
		(*Phase_ChildRolloutJobs)(nil),
	}
	file_cloud_deploy_v1_data_proto_msgTypes[44].OneofWrappers = []any{
		(*Job_DeployJob)(nil),
		(*Job_VerifyJob)(nil),
		(*Job_PredeployJob)(nil),
		(*Job_PostdeployJob)(nil),
		(*Job_CreateChildRolloutJob)(nil),
		(*Job_AdvanceChildRolloutJob)(nil),
	}
	file_cloud_deploy_v1_data_proto_msgTypes[53].OneofWrappers = []any{
		(*AutomationRule_PromoteReleaseRule)(nil),
		(*AutomationRule_AdvanceRolloutRule)(nil),
		(*AutomationRule_RepairRolloutRule)(nil),
	}
	file_cloud_deploy_v1_data_proto_msgTypes[57].OneofWrappers = []any{
		(*RepairMode_Retry)(nil),
		(*RepairMode_Rollback)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_deploy_v1_data_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   98,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_deploy_v1_data_proto_goTypes,
		DependencyIndexes: file_cloud_deploy_v1_data_proto_depIdxs,
		EnumInfos:         file_cloud_deploy_v1_data_proto_enumTypes,
		MessageInfos:      file_cloud_deploy_v1_data_proto_msgTypes,
	}.Build()
	File_cloud_deploy_v1_data_proto = out.File
	file_cloud_deploy_v1_data_proto_rawDesc = nil
	file_cloud_deploy_v1_data_proto_goTypes = nil
	file_cloud_deploy_v1_data_proto_depIdxs = nil
}
