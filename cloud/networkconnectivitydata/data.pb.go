// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.6
// source: cloud/networkconnectivity/v1/data.proto

package networkconnectivitydata

import (
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The infrastructure used for connections between consumers/producers.
type Infrastructure int32

const (
	// An invalid infrastructure as the default case.
	Infrastructure_INFRASTRUCTURE_UNSPECIFIED Infrastructure = 0
	// Private Service Connect is used for connections.
	Infrastructure_PSC Infrastructure = 1
)

// Enum value maps for Infrastructure.
var (
	Infrastructure_name = map[int32]string{
		0: "INFRASTRUCTURE_UNSPECIFIED",
		1: "PSC",
	}
	Infrastructure_value = map[string]int32{
		"INFRASTRUCTURE_UNSPECIFIED": 0,
		"PSC":                        1,
	}
)

func (x Infrastructure) Enum() *Infrastructure {
	p := new(Infrastructure)
	*p = x
	return p
}

func (x Infrastructure) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Infrastructure) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_networkconnectivity_v1_data_proto_enumTypes[0].Descriptor()
}

func (Infrastructure) Type() protoreflect.EnumType {
	return &file_cloud_networkconnectivity_v1_data_proto_enumTypes[0]
}

func (x Infrastructure) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Infrastructure.Descriptor instead.
func (Infrastructure) EnumDescriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{0}
}

// The error type indicates whether a connection error is consumer facing,
// producer facing or system internal.
type ConnectionErrorType int32

const (
	// An invalid error type as the default case.
	ConnectionErrorType_CONNECTION_ERROR_TYPE_UNSPECIFIED ConnectionErrorType = 0
	// The error is due to Service Automation system internal.
	ConnectionErrorType_ERROR_INTERNAL ConnectionErrorType = 1
	// The error is due to the setup on consumer side.
	ConnectionErrorType_ERROR_CONSUMER_SIDE ConnectionErrorType = 2
	// The error is due to the setup on producer side.
	ConnectionErrorType_ERROR_PRODUCER_SIDE ConnectionErrorType = 3
)

// Enum value maps for ConnectionErrorType.
var (
	ConnectionErrorType_name = map[int32]string{
		0: "CONNECTION_ERROR_TYPE_UNSPECIFIED",
		1: "ERROR_INTERNAL",
		2: "ERROR_CONSUMER_SIDE",
		3: "ERROR_PRODUCER_SIDE",
	}
	ConnectionErrorType_value = map[string]int32{
		"CONNECTION_ERROR_TYPE_UNSPECIFIED": 0,
		"ERROR_INTERNAL":                    1,
		"ERROR_CONSUMER_SIDE":               2,
		"ERROR_PRODUCER_SIDE":               3,
	}
)

func (x ConnectionErrorType) Enum() *ConnectionErrorType {
	p := new(ConnectionErrorType)
	*p = x
	return p
}

func (x ConnectionErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_networkconnectivity_v1_data_proto_enumTypes[1].Descriptor()
}

func (ConnectionErrorType) Type() protoreflect.EnumType {
	return &file_cloud_networkconnectivity_v1_data_proto_enumTypes[1]
}

func (x ConnectionErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionErrorType.Descriptor instead.
func (ConnectionErrorType) EnumDescriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{1}
}

// The State enum represents the lifecycle stage of a Network Connectivity
// Center resource.
type State int32

const (
	// No state information available
	State_STATE_UNSPECIFIED State = 0
	// The resource's create operation is in progress.
	State_CREATING State = 1
	// The resource is active
	State_ACTIVE State = 2
	// The resource's delete operation is in progress.
	State_DELETING State = 3
	// The resource's update operation is in progress.
	State_UPDATING State = 6
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "CREATING",
		2: "ACTIVE",
		3: "DELETING",
		6: "UPDATING",
	}
	State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"CREATING":          1,
		"ACTIVE":            2,
		"DELETING":          3,
		"UPDATING":          6,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_networkconnectivity_v1_data_proto_enumTypes[2].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_cloud_networkconnectivity_v1_data_proto_enumTypes[2]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{2}
}

// PSC Consumer Config State.
type ServiceConnectionMap_ConsumerPscConfig_State int32

const (
	// Default state, when Connection Map is created initially.
	ServiceConnectionMap_ConsumerPscConfig_STATE_UNSPECIFIED ServiceConnectionMap_ConsumerPscConfig_State = 0
	// Set when policy and map configuration is valid,
	// and their matching can lead to allowing creation of PSC Connections
	// subject to other constraints like connections limit.
	ServiceConnectionMap_ConsumerPscConfig_VALID ServiceConnectionMap_ConsumerPscConfig_State = 1
	// No Service Connection Policy found for this network and Service
	// Class
	ServiceConnectionMap_ConsumerPscConfig_CONNECTION_POLICY_MISSING ServiceConnectionMap_ConsumerPscConfig_State = 2
)

// Enum value maps for ServiceConnectionMap_ConsumerPscConfig_State.
var (
	ServiceConnectionMap_ConsumerPscConfig_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "VALID",
		2: "CONNECTION_POLICY_MISSING",
	}
	ServiceConnectionMap_ConsumerPscConfig_State_value = map[string]int32{
		"STATE_UNSPECIFIED":         0,
		"VALID":                     1,
		"CONNECTION_POLICY_MISSING": 2,
	}
)

func (x ServiceConnectionMap_ConsumerPscConfig_State) Enum() *ServiceConnectionMap_ConsumerPscConfig_State {
	p := new(ServiceConnectionMap_ConsumerPscConfig_State)
	*p = x
	return p
}

func (x ServiceConnectionMap_ConsumerPscConfig_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceConnectionMap_ConsumerPscConfig_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_networkconnectivity_v1_data_proto_enumTypes[3].Descriptor()
}

func (ServiceConnectionMap_ConsumerPscConfig_State) Type() protoreflect.EnumType {
	return &file_cloud_networkconnectivity_v1_data_proto_enumTypes[3]
}

func (x ServiceConnectionMap_ConsumerPscConfig_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceConnectionMap_ConsumerPscConfig_State.Descriptor instead.
func (ServiceConnectionMap_ConsumerPscConfig_State) EnumDescriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{0, 1, 0}
}

// The state of the PSC connection.
type ServiceConnectionMap_ConsumerPscConnection_State int32

const (
	// An invalid state as the default case.
	ServiceConnectionMap_ConsumerPscConnection_STATE_UNSPECIFIED ServiceConnectionMap_ConsumerPscConnection_State = 0
	// The connection is fully established and ready to use.
	ServiceConnectionMap_ConsumerPscConnection_ACTIVE ServiceConnectionMap_ConsumerPscConnection_State = 1
	// The connection is not functional since some resources on the connection
	// fail to be created.
	ServiceConnectionMap_ConsumerPscConnection_FAILED ServiceConnectionMap_ConsumerPscConnection_State = 2
	// The connection is being created.
	ServiceConnectionMap_ConsumerPscConnection_CREATING ServiceConnectionMap_ConsumerPscConnection_State = 3
	// The connection is being deleted.
	ServiceConnectionMap_ConsumerPscConnection_DELETING ServiceConnectionMap_ConsumerPscConnection_State = 4
)

// Enum value maps for ServiceConnectionMap_ConsumerPscConnection_State.
var (
	ServiceConnectionMap_ConsumerPscConnection_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "ACTIVE",
		2: "FAILED",
		3: "CREATING",
		4: "DELETING",
	}
	ServiceConnectionMap_ConsumerPscConnection_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"ACTIVE":            1,
		"FAILED":            2,
		"CREATING":          3,
		"DELETING":          4,
	}
)

func (x ServiceConnectionMap_ConsumerPscConnection_State) Enum() *ServiceConnectionMap_ConsumerPscConnection_State {
	p := new(ServiceConnectionMap_ConsumerPscConnection_State)
	*p = x
	return p
}

func (x ServiceConnectionMap_ConsumerPscConnection_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceConnectionMap_ConsumerPscConnection_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_networkconnectivity_v1_data_proto_enumTypes[4].Descriptor()
}

func (ServiceConnectionMap_ConsumerPscConnection_State) Type() protoreflect.EnumType {
	return &file_cloud_networkconnectivity_v1_data_proto_enumTypes[4]
}

func (x ServiceConnectionMap_ConsumerPscConnection_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceConnectionMap_ConsumerPscConnection_State.Descriptor instead.
func (ServiceConnectionMap_ConsumerPscConnection_State) EnumDescriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{0, 2, 0}
}

// The state of the PSC connection.
type ServiceConnectionPolicy_State int32

const (
	// An invalid state as the default case.
	ServiceConnectionPolicy_STATE_UNSPECIFIED ServiceConnectionPolicy_State = 0
	// The connection is fully established and ready to use.
	ServiceConnectionPolicy_ACTIVE ServiceConnectionPolicy_State = 1
	// The connection is not functional since some resources on the connection
	// fail to be created.
	ServiceConnectionPolicy_FAILED ServiceConnectionPolicy_State = 2
	// The connection is being created.
	ServiceConnectionPolicy_CREATING ServiceConnectionPolicy_State = 3
	// The connection is being deleted.
	ServiceConnectionPolicy_DELETING ServiceConnectionPolicy_State = 4
)

// Enum value maps for ServiceConnectionPolicy_State.
var (
	ServiceConnectionPolicy_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "ACTIVE",
		2: "FAILED",
		3: "CREATING",
		4: "DELETING",
	}
	ServiceConnectionPolicy_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"ACTIVE":            1,
		"FAILED":            2,
		"CREATING":          3,
		"DELETING":          4,
	}
)

func (x ServiceConnectionPolicy_State) Enum() *ServiceConnectionPolicy_State {
	p := new(ServiceConnectionPolicy_State)
	*p = x
	return p
}

func (x ServiceConnectionPolicy_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceConnectionPolicy_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_networkconnectivity_v1_data_proto_enumTypes[5].Descriptor()
}

func (ServiceConnectionPolicy_State) Type() protoreflect.EnumType {
	return &file_cloud_networkconnectivity_v1_data_proto_enumTypes[5]
}

func (x ServiceConnectionPolicy_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceConnectionPolicy_State.Descriptor instead.
func (ServiceConnectionPolicy_State) EnumDescriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{1, 0}
}

// The ServiceConnectionMap resource.
// Next id: 14
type ServiceConnectionMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Immutable. The name of a ServiceConnectionMap.
	// Format:
	// projects/{project}/locations/{location}/serviceConnectionMaps/{service_connection_map}
	// See: https://google.aip.dev/122#fields-representing-resource-names
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Time when the ServiceConnectionMap was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Time when the ServiceConnectionMap was updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// User-defined labels.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A description of this resource.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// The service class identifier this ServiceConnectionMap is for.
	// The user of ServiceConnectionMap create API needs to have
	// networkconnecitivty.serviceclasses.use iam permission for the service
	// class.
	ServiceClass string `protobuf:"bytes,7,opt,name=service_class,json=serviceClass,proto3" json:"service_class,omitempty"`
	// Output only. The service class uri this ServiceConnectionMap is for.
	ServiceClassUri string `protobuf:"bytes,12,opt,name=service_class_uri,json=serviceClassUri,proto3" json:"service_class_uri,omitempty"`
	// Output only. The infrastructure used for connections between
	// consumers/producers.
	Infrastructure Infrastructure `protobuf:"varint,8,opt,name=infrastructure,proto3,enum=google.events.cloud.networkconnectivity.v1.Infrastructure" json:"infrastructure,omitempty"`
	// The PSC configurations on producer side.
	ProducerPscConfigs []*ServiceConnectionMap_ProducerPscConfig `protobuf:"bytes,9,rep,name=producer_psc_configs,json=producerPscConfigs,proto3" json:"producer_psc_configs,omitempty"`
	// The PSC configurations on consumer side.
	ConsumerPscConfigs []*ServiceConnectionMap_ConsumerPscConfig `protobuf:"bytes,10,rep,name=consumer_psc_configs,json=consumerPscConfigs,proto3" json:"consumer_psc_configs,omitempty"`
	// Output only. PSC connection details on consumer side.
	ConsumerPscConnections []*ServiceConnectionMap_ConsumerPscConnection `protobuf:"bytes,11,rep,name=consumer_psc_connections,json=consumerPscConnections,proto3" json:"consumer_psc_connections,omitempty"`
}

func (x *ServiceConnectionMap) Reset() {
	*x = ServiceConnectionMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceConnectionMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConnectionMap) ProtoMessage() {}

func (x *ServiceConnectionMap) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConnectionMap.ProtoReflect.Descriptor instead.
func (*ServiceConnectionMap) Descriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{0}
}

func (x *ServiceConnectionMap) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceConnectionMap) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ServiceConnectionMap) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ServiceConnectionMap) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ServiceConnectionMap) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ServiceConnectionMap) GetServiceClass() string {
	if x != nil {
		return x.ServiceClass
	}
	return ""
}

func (x *ServiceConnectionMap) GetServiceClassUri() string {
	if x != nil {
		return x.ServiceClassUri
	}
	return ""
}

func (x *ServiceConnectionMap) GetInfrastructure() Infrastructure {
	if x != nil {
		return x.Infrastructure
	}
	return Infrastructure_INFRASTRUCTURE_UNSPECIFIED
}

func (x *ServiceConnectionMap) GetProducerPscConfigs() []*ServiceConnectionMap_ProducerPscConfig {
	if x != nil {
		return x.ProducerPscConfigs
	}
	return nil
}

func (x *ServiceConnectionMap) GetConsumerPscConfigs() []*ServiceConnectionMap_ConsumerPscConfig {
	if x != nil {
		return x.ConsumerPscConfigs
	}
	return nil
}

func (x *ServiceConnectionMap) GetConsumerPscConnections() []*ServiceConnectionMap_ConsumerPscConnection {
	if x != nil {
		return x.ConsumerPscConnections
	}
	return nil
}

// The ServiceConnectionPolicy resource.
// Next id: 11
type ServiceConnectionPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Immutable. The name of a ServiceConnectionPolicy.
	// Format:
	// projects/{project}/locations/{location}/serviceConnectionPolicies/{service_connection_policy}
	// See: https://google.aip.dev/122#fields-representing-resource-names
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Time when the ServiceConnectionMap was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Time when the ServiceConnectionMap was updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// User-defined labels.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A description of this resource.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// The resource path of the consumer network.
	// Example:
	// - projects/{projectNumOrId}/global/networks/{resourceId}.
	Network string `protobuf:"bytes,6,opt,name=network,proto3" json:"network,omitempty"`
	// The service class identifier for which this ServiceConnectionPolicy is for.
	// The service class identifier is a unique, symbolic representation of a
	// ServiceClass. It is provided by the Service Producer. Google services have
	// a prefix of gcp. For example, gcp-cloud-sql. 3rd party services do not. For
	// example, test-service-a3dfcx.
	ServiceClass string `protobuf:"bytes,7,opt,name=service_class,json=serviceClass,proto3" json:"service_class,omitempty"`
	// Output only. The type of underlying resources used to create the
	// connection.
	Infrastructure Infrastructure `protobuf:"varint,8,opt,name=infrastructure,proto3,enum=google.events.cloud.networkconnectivity.v1.Infrastructure" json:"infrastructure,omitempty"`
	// Configuration used for Private Service Connect connections. Used when
	// Infrastructure is PSC.
	PscConfig *ServiceConnectionPolicy_PscConfig `protobuf:"bytes,9,opt,name=psc_config,json=pscConfig,proto3" json:"psc_config,omitempty"`
	// Output only. [Output only] Information about each Private Service Connect
	// connection.
	PscConnections []*ServiceConnectionPolicy_PscConnection `protobuf:"bytes,10,rep,name=psc_connections,json=pscConnections,proto3" json:"psc_connections,omitempty"`
}

func (x *ServiceConnectionPolicy) Reset() {
	*x = ServiceConnectionPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceConnectionPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConnectionPolicy) ProtoMessage() {}

func (x *ServiceConnectionPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConnectionPolicy.ProtoReflect.Descriptor instead.
func (*ServiceConnectionPolicy) Descriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{1}
}

func (x *ServiceConnectionPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceConnectionPolicy) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ServiceConnectionPolicy) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ServiceConnectionPolicy) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ServiceConnectionPolicy) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ServiceConnectionPolicy) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ServiceConnectionPolicy) GetServiceClass() string {
	if x != nil {
		return x.ServiceClass
	}
	return ""
}

func (x *ServiceConnectionPolicy) GetInfrastructure() Infrastructure {
	if x != nil {
		return x.Infrastructure
	}
	return Infrastructure_INFRASTRUCTURE_UNSPECIFIED
}

func (x *ServiceConnectionPolicy) GetPscConfig() *ServiceConnectionPolicy_PscConfig {
	if x != nil {
		return x.PscConfig
	}
	return nil
}

func (x *ServiceConnectionPolicy) GetPscConnections() []*ServiceConnectionPolicy_PscConnection {
	if x != nil {
		return x.PscConnections
	}
	return nil
}

// The ServiceClass resource.
// Next id: 8
type ServiceClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Immutable. The name of a ServiceClass resource.
	// Format:
	// projects/{project}/locations/{location}/serviceClasses/{service_class}
	// See: https://google.aip.dev/122#fields-representing-resource-names
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The generated service class name. Use this name to refer to
	// the Service class in Service Connection Maps and Service Connection
	// Policies.
	ServiceClass string `protobuf:"bytes,7,opt,name=service_class,json=serviceClass,proto3" json:"service_class,omitempty"`
	// Output only. Time when the ServiceClass was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Time when the ServiceClass was updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// User-defined labels.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A description of this resource.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. URIs of all Service Connection Maps using this service class.
	ServiceConnectionMaps []string `protobuf:"bytes,6,rep,name=service_connection_maps,json=serviceConnectionMaps,proto3" json:"service_connection_maps,omitempty"`
}

func (x *ServiceClass) Reset() {
	*x = ServiceClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceClass) ProtoMessage() {}

func (x *ServiceClass) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceClass.ProtoReflect.Descriptor instead.
func (*ServiceClass) Descriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{2}
}

func (x *ServiceClass) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceClass) GetServiceClass() string {
	if x != nil {
		return x.ServiceClass
	}
	return ""
}

func (x *ServiceClass) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ServiceClass) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ServiceClass) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ServiceClass) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ServiceClass) GetServiceConnectionMaps() []string {
	if x != nil {
		return x.ServiceConnectionMaps
	}
	return nil
}

// The ServiceConnectionToken resource.
// Next id: 9
type ServiceConnectionToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Immutable. The name of a ServiceConnectionToken.
	// Format:
	// projects/{project}/locations/{location}/ServiceConnectionTokens/{service_connection_token}
	// See: https://google.aip.dev/122#fields-representing-resource-names
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Time when the ServiceConnectionToken was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Time when the ServiceConnectionToken was updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// User-defined labels.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A description of this resource.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// The resource path of the network associated with this token.
	// Example:
	// projects/{projectNumOrId}/global/networks/{resourceId}.
	Network string `protobuf:"bytes,6,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *ServiceConnectionToken) Reset() {
	*x = ServiceConnectionToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceConnectionToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConnectionToken) ProtoMessage() {}

func (x *ServiceConnectionToken) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConnectionToken.ProtoReflect.Descriptor instead.
func (*ServiceConnectionToken) Descriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{3}
}

func (x *ServiceConnectionToken) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceConnectionToken) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ServiceConnectionToken) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ServiceConnectionToken) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ServiceConnectionToken) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ServiceConnectionToken) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

// A Network Connectivity Center hub is a global management resource to which
// you attach spokes. A single hub can contain spokes from multiple regions.
// However, if any of a hub's spokes use the site-to-site data transfer feature,
// the resources associated with those spokes must all be in the same VPC
// network. Spokes that do not use site-to-site data transfer can be associated
// with any VPC network in your project.
type Hub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Immutable. The name of the hub. Hub names must be unique. They use the
	// following form:
	//
	//	`projects/{project_number}/locations/global/hubs/{hub_id}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The time the hub was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time the hub was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional labels in key:value format. For more information about labels, see
	// [Requirements for
	// labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// An optional description of the hub.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The Google-generated UUID for the hub. This value is unique
	// across all hub resources. If a hub is deleted and another with the same
	// name is created, the new hub is assigned a different unique_id.
	UniqueId string `protobuf:"bytes,8,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	// Output only. The current lifecycle state of this hub.
	State State `protobuf:"varint,9,opt,name=state,proto3,enum=google.events.cloud.networkconnectivity.v1.State" json:"state,omitempty"`
	// The VPC networks associated with this hub's spokes.
	//
	// This field is read-only. Network Connectivity Center automatically
	// populates it based on the set of spokes attached to the hub.
	RoutingVpcs []*RoutingVPC `protobuf:"bytes,10,rep,name=routing_vpcs,json=routingVpcs,proto3" json:"routing_vpcs,omitempty"`
}

func (x *Hub) Reset() {
	*x = Hub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hub) ProtoMessage() {}

func (x *Hub) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hub.ProtoReflect.Descriptor instead.
func (*Hub) Descriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{4}
}

func (x *Hub) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Hub) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Hub) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Hub) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Hub) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Hub) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *Hub) GetState() State {
	if x != nil {
		return x.State
	}
	return State_STATE_UNSPECIFIED
}

func (x *Hub) GetRoutingVpcs() []*RoutingVPC {
	if x != nil {
		return x.RoutingVpcs
	}
	return nil
}

// RoutingVPC contains information about the VPC networks associated
// with the spokes of a Network Connectivity Center hub.
type RoutingVPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URI of the VPC network.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// Output only. If true, indicates that this VPC network is currently
	// associated with spokes that use the data transfer feature (spokes where the
	// site_to_site_data_transfer field is set to true). If you create new spokes
	// that use data transfer, they must be associated with this VPC network. At
	// most, one VPC network will have this field set to true.
	RequiredForNewSiteToSiteDataTransferSpokes bool `protobuf:"varint,2,opt,name=required_for_new_site_to_site_data_transfer_spokes,json=requiredForNewSiteToSiteDataTransferSpokes,proto3" json:"required_for_new_site_to_site_data_transfer_spokes,omitempty"`
}

func (x *RoutingVPC) Reset() {
	*x = RoutingVPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingVPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingVPC) ProtoMessage() {}

func (x *RoutingVPC) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingVPC.ProtoReflect.Descriptor instead.
func (*RoutingVPC) Descriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{5}
}

func (x *RoutingVPC) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *RoutingVPC) GetRequiredForNewSiteToSiteDataTransferSpokes() bool {
	if x != nil {
		return x.RequiredForNewSiteToSiteDataTransferSpokes
	}
	return false
}

// A Network Connectivity Center spoke represents one or more network
// connectivity resources.
//
// When you create a spoke, you associate it with a hub. You must also
// identify a value for exactly one of the following fields:
//
// * linked_vpn_tunnels
// * linked_interconnect_attachments
// * linked_router_appliance_instances
type Spoke struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Immutable. The name of the spoke. Spoke names must be unique. They use the
	// following form:
	//
	//	`projects/{project_number}/locations/{region}/spokes/{spoke_id}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The time the spoke was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time the spoke was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional labels in key:value format. For more information about labels, see
	// [Requirements for
	// labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// An optional description of the spoke.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Immutable. The name of the hub that this spoke is attached to.
	Hub string `protobuf:"bytes,6,opt,name=hub,proto3" json:"hub,omitempty"`
	// VPN tunnels that are associated with the spoke.
	LinkedVpnTunnels *LinkedVpnTunnels `protobuf:"bytes,17,opt,name=linked_vpn_tunnels,json=linkedVpnTunnels,proto3" json:"linked_vpn_tunnels,omitempty"`
	// VLAN attachments that are associated with the spoke.
	LinkedInterconnectAttachments *LinkedInterconnectAttachments `protobuf:"bytes,18,opt,name=linked_interconnect_attachments,json=linkedInterconnectAttachments,proto3" json:"linked_interconnect_attachments,omitempty"`
	// Router appliance instances that are associated with the spoke.
	LinkedRouterApplianceInstances *LinkedRouterApplianceInstances `protobuf:"bytes,19,opt,name=linked_router_appliance_instances,json=linkedRouterApplianceInstances,proto3" json:"linked_router_appliance_instances,omitempty"`
	// Output only. The Google-generated UUID for the spoke. This value is unique
	// across all spoke resources. If a spoke is deleted and another with the same
	// name is created, the new spoke is assigned a different unique_id.
	UniqueId string `protobuf:"bytes,11,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	// Output only. The current lifecycle state of this spoke.
	State State `protobuf:"varint,15,opt,name=state,proto3,enum=google.events.cloud.networkconnectivity.v1.State" json:"state,omitempty"`
}

func (x *Spoke) Reset() {
	*x = Spoke{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spoke) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spoke) ProtoMessage() {}

func (x *Spoke) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spoke.ProtoReflect.Descriptor instead.
func (*Spoke) Descriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{6}
}

func (x *Spoke) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Spoke) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Spoke) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Spoke) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Spoke) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Spoke) GetHub() string {
	if x != nil {
		return x.Hub
	}
	return ""
}

func (x *Spoke) GetLinkedVpnTunnels() *LinkedVpnTunnels {
	if x != nil {
		return x.LinkedVpnTunnels
	}
	return nil
}

func (x *Spoke) GetLinkedInterconnectAttachments() *LinkedInterconnectAttachments {
	if x != nil {
		return x.LinkedInterconnectAttachments
	}
	return nil
}

func (x *Spoke) GetLinkedRouterApplianceInstances() *LinkedRouterApplianceInstances {
	if x != nil {
		return x.LinkedRouterApplianceInstances
	}
	return nil
}

func (x *Spoke) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *Spoke) GetState() State {
	if x != nil {
		return x.State
	}
	return State_STATE_UNSPECIFIED
}

// A collection of Cloud VPN tunnel resources. These resources should be
// redundant HA VPN tunnels that all advertise the same prefixes to Google
// Cloud. Alternatively, in a passive/active configuration, all tunnels
// should be capable of advertising the same prefixes.
type LinkedVpnTunnels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URIs of linked VPN tunnel resources.
	Uris []string `protobuf:"bytes,1,rep,name=uris,proto3" json:"uris,omitempty"`
	// A value that controls whether site-to-site data transfer is enabled for
	// these resources. Data transfer is available only in [supported
	// locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
	SiteToSiteDataTransfer bool `protobuf:"varint,2,opt,name=site_to_site_data_transfer,json=siteToSiteDataTransfer,proto3" json:"site_to_site_data_transfer,omitempty"`
	// Output only. The VPC network where these VPN tunnels are located.
	VpcNetwork string `protobuf:"bytes,3,opt,name=vpc_network,json=vpcNetwork,proto3" json:"vpc_network,omitempty"`
}

func (x *LinkedVpnTunnels) Reset() {
	*x = LinkedVpnTunnels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkedVpnTunnels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedVpnTunnels) ProtoMessage() {}

func (x *LinkedVpnTunnels) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedVpnTunnels.ProtoReflect.Descriptor instead.
func (*LinkedVpnTunnels) Descriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{7}
}

func (x *LinkedVpnTunnels) GetUris() []string {
	if x != nil {
		return x.Uris
	}
	return nil
}

func (x *LinkedVpnTunnels) GetSiteToSiteDataTransfer() bool {
	if x != nil {
		return x.SiteToSiteDataTransfer
	}
	return false
}

func (x *LinkedVpnTunnels) GetVpcNetwork() string {
	if x != nil {
		return x.VpcNetwork
	}
	return ""
}

// A collection of VLAN attachment resources. These resources should
// be redundant attachments that all advertise the same prefixes to Google
// Cloud. Alternatively, in active/passive configurations, all attachments
// should be capable of advertising the same prefixes.
type LinkedInterconnectAttachments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URIs of linked interconnect attachment resources
	Uris []string `protobuf:"bytes,1,rep,name=uris,proto3" json:"uris,omitempty"`
	// A value that controls whether site-to-site data transfer is enabled for
	// these resources. Data transfer is available only in [supported
	// locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
	SiteToSiteDataTransfer bool `protobuf:"varint,2,opt,name=site_to_site_data_transfer,json=siteToSiteDataTransfer,proto3" json:"site_to_site_data_transfer,omitempty"`
	// Output only. The VPC network where these VLAN attachments are located.
	VpcNetwork string `protobuf:"bytes,3,opt,name=vpc_network,json=vpcNetwork,proto3" json:"vpc_network,omitempty"`
}

func (x *LinkedInterconnectAttachments) Reset() {
	*x = LinkedInterconnectAttachments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkedInterconnectAttachments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedInterconnectAttachments) ProtoMessage() {}

func (x *LinkedInterconnectAttachments) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedInterconnectAttachments.ProtoReflect.Descriptor instead.
func (*LinkedInterconnectAttachments) Descriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{8}
}

func (x *LinkedInterconnectAttachments) GetUris() []string {
	if x != nil {
		return x.Uris
	}
	return nil
}

func (x *LinkedInterconnectAttachments) GetSiteToSiteDataTransfer() bool {
	if x != nil {
		return x.SiteToSiteDataTransfer
	}
	return false
}

func (x *LinkedInterconnectAttachments) GetVpcNetwork() string {
	if x != nil {
		return x.VpcNetwork
	}
	return ""
}

// A collection of router appliance instances. If you configure multiple router
// appliance instances to receive data from the same set of sites outside of
// Google Cloud, we recommend that you associate those instances with the same
// spoke.
type LinkedRouterApplianceInstances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of router appliance instances.
	Instances []*RouterApplianceInstance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
	// A value that controls whether site-to-site data transfer is enabled for
	// these resources. Data transfer is available only in [supported
	// locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
	SiteToSiteDataTransfer bool `protobuf:"varint,2,opt,name=site_to_site_data_transfer,json=siteToSiteDataTransfer,proto3" json:"site_to_site_data_transfer,omitempty"`
	// Output only. The VPC network where these router appliance instances are
	// located.
	VpcNetwork string `protobuf:"bytes,3,opt,name=vpc_network,json=vpcNetwork,proto3" json:"vpc_network,omitempty"`
}

func (x *LinkedRouterApplianceInstances) Reset() {
	*x = LinkedRouterApplianceInstances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkedRouterApplianceInstances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedRouterApplianceInstances) ProtoMessage() {}

func (x *LinkedRouterApplianceInstances) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedRouterApplianceInstances.ProtoReflect.Descriptor instead.
func (*LinkedRouterApplianceInstances) Descriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{9}
}

func (x *LinkedRouterApplianceInstances) GetInstances() []*RouterApplianceInstance {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *LinkedRouterApplianceInstances) GetSiteToSiteDataTransfer() bool {
	if x != nil {
		return x.SiteToSiteDataTransfer
	}
	return false
}

func (x *LinkedRouterApplianceInstances) GetVpcNetwork() string {
	if x != nil {
		return x.VpcNetwork
	}
	return ""
}

// A router appliance instance is a Compute Engine virtual machine (VM) instance
// that acts as a BGP speaker. A router appliance instance is specified by the
// URI of the VM and the internal IP address of one of the VM's network
// interfaces.
type RouterApplianceInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URI of the VM.
	VirtualMachine string `protobuf:"bytes,1,opt,name=virtual_machine,json=virtualMachine,proto3" json:"virtual_machine,omitempty"`
	// The IP address on the VM to use for peering.
	IpAddress string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *RouterApplianceInstance) Reset() {
	*x = RouterApplianceInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterApplianceInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterApplianceInstance) ProtoMessage() {}

func (x *RouterApplianceInstance) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterApplianceInstance.ProtoReflect.Descriptor instead.
func (*RouterApplianceInstance) Descriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{10}
}

func (x *RouterApplianceInstance) GetVirtualMachine() string {
	if x != nil {
		return x.VirtualMachine
	}
	return ""
}

func (x *RouterApplianceInstance) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

// The data within all ServiceClass events.
type ServiceClassEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The ServiceClass event payload. Unset for deletion events.
	Payload *ServiceClass `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
}

func (x *ServiceClassEventData) Reset() {
	*x = ServiceClassEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceClassEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceClassEventData) ProtoMessage() {}

func (x *ServiceClassEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceClassEventData.ProtoReflect.Descriptor instead.
func (*ServiceClassEventData) Descriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{11}
}

func (x *ServiceClassEventData) GetPayload() *ServiceClass {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all ServiceConnectionToken events.
type ServiceConnectionTokenEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The ServiceConnectionToken event payload. Unset for deletion
	// events.
	Payload *ServiceConnectionToken `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
}

func (x *ServiceConnectionTokenEventData) Reset() {
	*x = ServiceConnectionTokenEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceConnectionTokenEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConnectionTokenEventData) ProtoMessage() {}

func (x *ServiceConnectionTokenEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConnectionTokenEventData.ProtoReflect.Descriptor instead.
func (*ServiceConnectionTokenEventData) Descriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{12}
}

func (x *ServiceConnectionTokenEventData) GetPayload() *ServiceConnectionToken {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all ServiceConnectionMap events.
type ServiceConnectionMapEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The ServiceConnectionMap event payload. Unset for deletion
	// events.
	Payload *ServiceConnectionMap `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
}

func (x *ServiceConnectionMapEventData) Reset() {
	*x = ServiceConnectionMapEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceConnectionMapEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConnectionMapEventData) ProtoMessage() {}

func (x *ServiceConnectionMapEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConnectionMapEventData.ProtoReflect.Descriptor instead.
func (*ServiceConnectionMapEventData) Descriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{13}
}

func (x *ServiceConnectionMapEventData) GetPayload() *ServiceConnectionMap {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all Hub events.
type HubEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The Hub event payload. Unset for deletion events.
	Payload *Hub `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
}

func (x *HubEventData) Reset() {
	*x = HubEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HubEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HubEventData) ProtoMessage() {}

func (x *HubEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HubEventData.ProtoReflect.Descriptor instead.
func (*HubEventData) Descriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{14}
}

func (x *HubEventData) GetPayload() *Hub {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all Spoke events.
type SpokeEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The Spoke event payload. Unset for deletion events.
	Payload *Spoke `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
}

func (x *SpokeEventData) Reset() {
	*x = SpokeEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpokeEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpokeEventData) ProtoMessage() {}

func (x *SpokeEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpokeEventData.ProtoReflect.Descriptor instead.
func (*SpokeEventData) Descriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{15}
}

func (x *SpokeEventData) GetPayload() *Spoke {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all ServiceConnectionPolicy events.
type ServiceConnectionPolicyEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The ServiceConnectionPolicy event payload. Unset for deletion
	// events.
	Payload *ServiceConnectionPolicy `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
}

func (x *ServiceConnectionPolicyEventData) Reset() {
	*x = ServiceConnectionPolicyEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceConnectionPolicyEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConnectionPolicyEventData) ProtoMessage() {}

func (x *ServiceConnectionPolicyEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConnectionPolicyEventData.ProtoReflect.Descriptor instead.
func (*ServiceConnectionPolicyEventData) Descriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{16}
}

func (x *ServiceConnectionPolicyEventData) GetPayload() *ServiceConnectionPolicy {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The PSC configurations on producer side.
type ServiceConnectionMap_ProducerPscConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource path of a service attachment.
	// Example:
	// projects/{projectNumOrId}/regions/{region}/serviceAttachments/{resourceId}.
	ServiceAttachmentUri string `protobuf:"bytes,1,opt,name=service_attachment_uri,json=serviceAttachmentUri,proto3" json:"service_attachment_uri,omitempty"`
}

func (x *ServiceConnectionMap_ProducerPscConfig) Reset() {
	*x = ServiceConnectionMap_ProducerPscConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceConnectionMap_ProducerPscConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConnectionMap_ProducerPscConfig) ProtoMessage() {}

func (x *ServiceConnectionMap_ProducerPscConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConnectionMap_ProducerPscConfig.ProtoReflect.Descriptor instead.
func (*ServiceConnectionMap_ProducerPscConfig) Descriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ServiceConnectionMap_ProducerPscConfig) GetServiceAttachmentUri() string {
	if x != nil {
		return x.ServiceAttachmentUri
	}
	return ""
}

// Allow the producer to specify which consumers can connect to it.
type ServiceConnectionMap_ConsumerPscConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The consumer project where PSC connections are allowed to be created in.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The resource path of the consumer network where PSC connections are
	// allowed to be created in. Note, this network does not need be in the
	// ConsumerPscConfig.project in the case of SharedVPC.
	// Example:
	// projects/{projectNumOrId}/global/networks/{networkId}.
	Network string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	// This is used in PSC consumer ForwardingRule to control whether the PSC
	// endpoint can be accessed from another region.
	DisableGlobalAccess bool `protobuf:"varint,3,opt,name=disable_global_access,json=disableGlobalAccess,proto3" json:"disable_global_access,omitempty"`
	// Output only. Overall state of PSC Connections management for this
	// consumer psc config.
	State ServiceConnectionMap_ConsumerPscConfig_State `protobuf:"varint,4,opt,name=state,proto3,enum=google.events.cloud.networkconnectivity.v1.ServiceConnectionMap_ConsumerPscConfig_State" json:"state,omitempty"`
}

func (x *ServiceConnectionMap_ConsumerPscConfig) Reset() {
	*x = ServiceConnectionMap_ConsumerPscConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceConnectionMap_ConsumerPscConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConnectionMap_ConsumerPscConfig) ProtoMessage() {}

func (x *ServiceConnectionMap_ConsumerPscConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConnectionMap_ConsumerPscConfig.ProtoReflect.Descriptor instead.
func (*ServiceConnectionMap_ConsumerPscConfig) Descriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ServiceConnectionMap_ConsumerPscConfig) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ServiceConnectionMap_ConsumerPscConfig) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ServiceConnectionMap_ConsumerPscConfig) GetDisableGlobalAccess() bool {
	if x != nil {
		return x.DisableGlobalAccess
	}
	return false
}

func (x *ServiceConnectionMap_ConsumerPscConfig) GetState() ServiceConnectionMap_ConsumerPscConfig_State {
	if x != nil {
		return x.State
	}
	return ServiceConnectionMap_ConsumerPscConfig_STATE_UNSPECIFIED
}

// PSC connection details on consumer side.
type ServiceConnectionMap_ConsumerPscConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URI of a service attachment which is the target of the PSC
	// connection.
	ServiceAttachmentUri string `protobuf:"bytes,1,opt,name=service_attachment_uri,json=serviceAttachmentUri,proto3" json:"service_attachment_uri,omitempty"`
	// The state of the PSC connection.
	State ServiceConnectionMap_ConsumerPscConnection_State `protobuf:"varint,2,opt,name=state,proto3,enum=google.events.cloud.networkconnectivity.v1.ServiceConnectionMap_ConsumerPscConnection_State" json:"state,omitempty"`
	// The consumer project whose PSC forwarding rule is connected to the
	// service attachments in this service connection map.
	Project string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	// The consumer network whose PSC forwarding rule is connected to the
	// service attachments in this service connection map.
	// Note that the network could be on a different project (shared VPC).
	Network string `protobuf:"bytes,4,opt,name=network,proto3" json:"network,omitempty"`
	// The PSC connection id of the PSC forwarding rule connected
	// to the service attachments in this service connection map.
	PscConnectionId string `protobuf:"bytes,5,opt,name=psc_connection_id,json=pscConnectionId,proto3" json:"psc_connection_id,omitempty"`
	// The IP literal allocated on the consumer network for the PSC forwarding
	// rule that is created to connect to the producer service attachment in
	// this service connection map.
	Ip string `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`
	// The error type indicates whether the error is consumer facing, producer
	// facing or system internal.
	ErrorType ConnectionErrorType `protobuf:"varint,7,opt,name=error_type,json=errorType,proto3,enum=google.events.cloud.networkconnectivity.v1.ConnectionErrorType" json:"error_type,omitempty"`
	// The most recent error during operating this connection.
	Error *status.Status `protobuf:"bytes,8,opt,name=error,proto3" json:"error,omitempty"`
	// The last Compute Engine operation to setup PSC connection.
	GceOperation string `protobuf:"bytes,9,opt,name=gce_operation,json=gceOperation,proto3" json:"gce_operation,omitempty"`
	// The URI of the consumer forwarding rule created.
	// Example:
	// projects/{projectNumOrId}/regions/us-east1/networks/{resourceId}.
	ForwardingRule string `protobuf:"bytes,10,opt,name=forwarding_rule,json=forwardingRule,proto3" json:"forwarding_rule,omitempty"`
}

func (x *ServiceConnectionMap_ConsumerPscConnection) Reset() {
	*x = ServiceConnectionMap_ConsumerPscConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceConnectionMap_ConsumerPscConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConnectionMap_ConsumerPscConnection) ProtoMessage() {}

func (x *ServiceConnectionMap_ConsumerPscConnection) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConnectionMap_ConsumerPscConnection.ProtoReflect.Descriptor instead.
func (*ServiceConnectionMap_ConsumerPscConnection) Descriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ServiceConnectionMap_ConsumerPscConnection) GetServiceAttachmentUri() string {
	if x != nil {
		return x.ServiceAttachmentUri
	}
	return ""
}

func (x *ServiceConnectionMap_ConsumerPscConnection) GetState() ServiceConnectionMap_ConsumerPscConnection_State {
	if x != nil {
		return x.State
	}
	return ServiceConnectionMap_ConsumerPscConnection_STATE_UNSPECIFIED
}

func (x *ServiceConnectionMap_ConsumerPscConnection) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ServiceConnectionMap_ConsumerPscConnection) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ServiceConnectionMap_ConsumerPscConnection) GetPscConnectionId() string {
	if x != nil {
		return x.PscConnectionId
	}
	return ""
}

func (x *ServiceConnectionMap_ConsumerPscConnection) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ServiceConnectionMap_ConsumerPscConnection) GetErrorType() ConnectionErrorType {
	if x != nil {
		return x.ErrorType
	}
	return ConnectionErrorType_CONNECTION_ERROR_TYPE_UNSPECIFIED
}

func (x *ServiceConnectionMap_ConsumerPscConnection) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ServiceConnectionMap_ConsumerPscConnection) GetGceOperation() string {
	if x != nil {
		return x.GceOperation
	}
	return ""
}

func (x *ServiceConnectionMap_ConsumerPscConnection) GetForwardingRule() string {
	if x != nil {
		return x.ForwardingRule
	}
	return ""
}

// Configuration used for Private Service Connect connections. Used when
// Infrastructure is PSC.
type ServiceConnectionPolicy_PscConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource paths of subnetworks to use for IP address management.
	// Example:
	// projects/{projectNumOrId}/regions/{region}/subnetworks/{resourceId}.
	Subnetworks []string `protobuf:"bytes,1,rep,name=subnetworks,proto3" json:"subnetworks,omitempty"`
	// Optional. Max number of PSC connections for this policy.
	Limit *int64 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
}

func (x *ServiceConnectionPolicy_PscConfig) Reset() {
	*x = ServiceConnectionPolicy_PscConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceConnectionPolicy_PscConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConnectionPolicy_PscConfig) ProtoMessage() {}

func (x *ServiceConnectionPolicy_PscConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConnectionPolicy_PscConfig.ProtoReflect.Descriptor instead.
func (*ServiceConnectionPolicy_PscConfig) Descriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ServiceConnectionPolicy_PscConfig) GetSubnetworks() []string {
	if x != nil {
		return x.Subnetworks
	}
	return nil
}

func (x *ServiceConnectionPolicy_PscConfig) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

// Information about a specific Private Service Connect connection.
type ServiceConnectionPolicy_PscConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// State of the PSC Connection
	State ServiceConnectionPolicy_State `protobuf:"varint,1,opt,name=state,proto3,enum=google.events.cloud.networkconnectivity.v1.ServiceConnectionPolicy_State" json:"state,omitempty"`
	// The resource reference of the PSC Forwarding Rule within the consumer
	// VPC.
	ConsumerForwardingRule string `protobuf:"bytes,2,opt,name=consumer_forwarding_rule,json=consumerForwardingRule,proto3" json:"consumer_forwarding_rule,omitempty"`
	// The resource reference of the consumer address.
	ConsumerAddress string `protobuf:"bytes,3,opt,name=consumer_address,json=consumerAddress,proto3" json:"consumer_address,omitempty"`
	// The error type indicates whether the error is consumer facing, producer
	// facing or system internal.
	ErrorType ConnectionErrorType `protobuf:"varint,4,opt,name=error_type,json=errorType,proto3,enum=google.events.cloud.networkconnectivity.v1.ConnectionErrorType" json:"error_type,omitempty"`
	// The most recent error during operating this connection.
	Error *status.Status `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	// The last Compute Engine operation to setup PSC connection.
	GceOperation string `protobuf:"bytes,6,opt,name=gce_operation,json=gceOperation,proto3" json:"gce_operation,omitempty"`
	// The project where the PSC connection is created.
	ConsumerTargetProject string `protobuf:"bytes,7,opt,name=consumer_target_project,json=consumerTargetProject,proto3" json:"consumer_target_project,omitempty"`
	// The PSC connection id of the PSC forwarding rule.
	PscConnectionId string `protobuf:"bytes,8,opt,name=psc_connection_id,json=pscConnectionId,proto3" json:"psc_connection_id,omitempty"`
}

func (x *ServiceConnectionPolicy_PscConnection) Reset() {
	*x = ServiceConnectionPolicy_PscConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceConnectionPolicy_PscConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConnectionPolicy_PscConnection) ProtoMessage() {}

func (x *ServiceConnectionPolicy_PscConnection) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkconnectivity_v1_data_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConnectionPolicy_PscConnection.ProtoReflect.Descriptor instead.
func (*ServiceConnectionPolicy_PscConnection) Descriptor() ([]byte, []int) {
	return file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ServiceConnectionPolicy_PscConnection) GetState() ServiceConnectionPolicy_State {
	if x != nil {
		return x.State
	}
	return ServiceConnectionPolicy_STATE_UNSPECIFIED
}

func (x *ServiceConnectionPolicy_PscConnection) GetConsumerForwardingRule() string {
	if x != nil {
		return x.ConsumerForwardingRule
	}
	return ""
}

func (x *ServiceConnectionPolicy_PscConnection) GetConsumerAddress() string {
	if x != nil {
		return x.ConsumerAddress
	}
	return ""
}

func (x *ServiceConnectionPolicy_PscConnection) GetErrorType() ConnectionErrorType {
	if x != nil {
		return x.ErrorType
	}
	return ConnectionErrorType_CONNECTION_ERROR_TYPE_UNSPECIFIED
}

func (x *ServiceConnectionPolicy_PscConnection) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ServiceConnectionPolicy_PscConnection) GetGceOperation() string {
	if x != nil {
		return x.GceOperation
	}
	return ""
}

func (x *ServiceConnectionPolicy_PscConnection) GetConsumerTargetProject() string {
	if x != nil {
		return x.ConsumerTargetProject
	}
	return ""
}

func (x *ServiceConnectionPolicy_PscConnection) GetPscConnectionId() string {
	if x != nil {
		return x.PscConnectionId
	}
	return ""
}

var File_cloud_networkconnectivity_v1_data_proto protoreflect.FileDescriptor

var file_cloud_networkconnectivity_v1_data_proto_rawDesc = []byte{
	0x0a, 0x27, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2a, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72,
	0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xa0, 0x0f, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x64, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x72, 0x69, 0x12,
	0x62, 0x0a, 0x0e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x0e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x5f, 0x70, 0x73, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x52, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x50, 0x73, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x50, 0x73, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x14, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x73, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x50, 0x73, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50, 0x73, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x12, 0x90, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x70,
	0x73, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50,
	0x73, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50, 0x73, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x49, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x50, 0x73, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x69, 0x1a,
	0xb5, 0x02, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50, 0x73, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x6e, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x58, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50, 0x73, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x48, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a, 0xdd, 0x04, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x50, 0x73, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x69, 0x12, 0x72, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x50, 0x73, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x73, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x73, 0x63, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x5e, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x63,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x75, 0x6c, 0x65, 0x22, 0x52, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x8d, 0x0b, 0x0a, 0x17, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x67, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x62, 0x0a, 0x0e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x72,
	0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x6c, 0x0a, 0x0a, 0x70, 0x73,
	0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x50, 0x73, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x70,
	0x73, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7a, 0x0a, 0x0f, 0x70, 0x73, 0x63, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x51, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x73, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x70, 0x73, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x52, 0x0a, 0x09, 0x50, 0x73, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xe8, 0x03, 0x0a, 0x0d, 0x50, 0x73, 0x63,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x5e, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x63,
	0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x67, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x73, 0x63, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x73, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x52,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x22, 0xb4, 0x03, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x73, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x85, 0x03, 0x0a, 0x16, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x66, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x86, 0x04, 0x0a, 0x03, 0x48, 0x75, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x75, 0x62, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x70, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x56,
	0x50, 0x43, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x70, 0x63, 0x73, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x86, 0x01, 0x0a, 0x0a, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x50, 0x43, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x66, 0x0a, 0x32, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x73, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x6f, 0x6b, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x77, 0x53, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x53, 0x69, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x70, 0x6f,
	0x6b, 0x65, 0x73, 0x22, 0xd9, 0x06, 0x0a, 0x05, 0x53, 0x70, 0x6f, 0x6b, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x6f, 0x6b, 0x65, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x75, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x68, 0x75, 0x62, 0x12, 0x6a, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x56, 0x70, 0x6e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x52, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x56, 0x70, 0x6e, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x1f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x1d, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x21, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x1e,
	0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x83, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x56, 0x70, 0x6e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x69, 0x73, 0x12, 0x3a, 0x0a, 0x1a, 0x73, 0x69, 0x74, 0x65,
	0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x73, 0x69,
	0x74, 0x65, 0x54, 0x6f, 0x53, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x70, 0x63, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x90, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x69, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x69, 0x73, 0x12, 0x3a, 0x0a, 0x1a, 0x73,
	0x69, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x73, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x53, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x70, 0x63, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x70,
	0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0xe0, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x09, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x3a,
	0x0a, 0x1a, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x73, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x53, 0x69, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x70,
	0x63, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x76, 0x70, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x61, 0x0a, 0x17, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x7c,
	0x0a, 0x15, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x90, 0x01, 0x0a,
	0x1f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x61, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x8c, 0x01, 0x0a, 0x1d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x5f, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x6a,
	0x0a, 0x0c, 0x48, 0x75, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4e,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x75, 0x62,
	0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x6e, 0x0a, 0x0e, 0x53, 0x70,
	0x6f, 0x6b, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x6f, 0x6b, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x20, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x62, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2a,
	0x39, 0x0a, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x53, 0x43, 0x10, 0x01, 0x2a, 0x82, 0x01, 0x0a, 0x13, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f,
	0x53, 0x49, 0x44, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x10, 0x03, 0x2a,
	0x54, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x06, 0x42, 0x94, 0x01, 0xaa, 0x02, 0x33, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x2a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5c, 0x56, 0x31, 0xea, 0x02, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x3a, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_networkconnectivity_v1_data_proto_rawDescOnce sync.Once
	file_cloud_networkconnectivity_v1_data_proto_rawDescData = file_cloud_networkconnectivity_v1_data_proto_rawDesc
)

func file_cloud_networkconnectivity_v1_data_proto_rawDescGZIP() []byte {
	file_cloud_networkconnectivity_v1_data_proto_rawDescOnce.Do(func() {
		file_cloud_networkconnectivity_v1_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_networkconnectivity_v1_data_proto_rawDescData)
	})
	return file_cloud_networkconnectivity_v1_data_proto_rawDescData
}

var file_cloud_networkconnectivity_v1_data_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_cloud_networkconnectivity_v1_data_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_cloud_networkconnectivity_v1_data_proto_goTypes = []interface{}{
	(Infrastructure)(0),      // 0: google.events.cloud.networkconnectivity.v1.Infrastructure
	(ConnectionErrorType)(0), // 1: google.events.cloud.networkconnectivity.v1.ConnectionErrorType
	(State)(0),               // 2: google.events.cloud.networkconnectivity.v1.State
	(ServiceConnectionMap_ConsumerPscConfig_State)(0),     // 3: google.events.cloud.networkconnectivity.v1.ServiceConnectionMap.ConsumerPscConfig.State
	(ServiceConnectionMap_ConsumerPscConnection_State)(0), // 4: google.events.cloud.networkconnectivity.v1.ServiceConnectionMap.ConsumerPscConnection.State
	(ServiceConnectionPolicy_State)(0),                    // 5: google.events.cloud.networkconnectivity.v1.ServiceConnectionPolicy.State
	(*ServiceConnectionMap)(nil),                          // 6: google.events.cloud.networkconnectivity.v1.ServiceConnectionMap
	(*ServiceConnectionPolicy)(nil),                       // 7: google.events.cloud.networkconnectivity.v1.ServiceConnectionPolicy
	(*ServiceClass)(nil),                                  // 8: google.events.cloud.networkconnectivity.v1.ServiceClass
	(*ServiceConnectionToken)(nil),                        // 9: google.events.cloud.networkconnectivity.v1.ServiceConnectionToken
	(*Hub)(nil),                                           // 10: google.events.cloud.networkconnectivity.v1.Hub
	(*RoutingVPC)(nil),                                    // 11: google.events.cloud.networkconnectivity.v1.RoutingVPC
	(*Spoke)(nil),                                         // 12: google.events.cloud.networkconnectivity.v1.Spoke
	(*LinkedVpnTunnels)(nil),                              // 13: google.events.cloud.networkconnectivity.v1.LinkedVpnTunnels
	(*LinkedInterconnectAttachments)(nil),                 // 14: google.events.cloud.networkconnectivity.v1.LinkedInterconnectAttachments
	(*LinkedRouterApplianceInstances)(nil),                // 15: google.events.cloud.networkconnectivity.v1.LinkedRouterApplianceInstances
	(*RouterApplianceInstance)(nil),                       // 16: google.events.cloud.networkconnectivity.v1.RouterApplianceInstance
	(*ServiceClassEventData)(nil),                         // 17: google.events.cloud.networkconnectivity.v1.ServiceClassEventData
	(*ServiceConnectionTokenEventData)(nil),               // 18: google.events.cloud.networkconnectivity.v1.ServiceConnectionTokenEventData
	(*ServiceConnectionMapEventData)(nil),                 // 19: google.events.cloud.networkconnectivity.v1.ServiceConnectionMapEventData
	(*HubEventData)(nil),                                  // 20: google.events.cloud.networkconnectivity.v1.HubEventData
	(*SpokeEventData)(nil),                                // 21: google.events.cloud.networkconnectivity.v1.SpokeEventData
	(*ServiceConnectionPolicyEventData)(nil),              // 22: google.events.cloud.networkconnectivity.v1.ServiceConnectionPolicyEventData
	(*ServiceConnectionMap_ProducerPscConfig)(nil),        // 23: google.events.cloud.networkconnectivity.v1.ServiceConnectionMap.ProducerPscConfig
	(*ServiceConnectionMap_ConsumerPscConfig)(nil),        // 24: google.events.cloud.networkconnectivity.v1.ServiceConnectionMap.ConsumerPscConfig
	(*ServiceConnectionMap_ConsumerPscConnection)(nil),    // 25: google.events.cloud.networkconnectivity.v1.ServiceConnectionMap.ConsumerPscConnection
	nil, // 26: google.events.cloud.networkconnectivity.v1.ServiceConnectionMap.LabelsEntry
	(*ServiceConnectionPolicy_PscConfig)(nil),     // 27: google.events.cloud.networkconnectivity.v1.ServiceConnectionPolicy.PscConfig
	(*ServiceConnectionPolicy_PscConnection)(nil), // 28: google.events.cloud.networkconnectivity.v1.ServiceConnectionPolicy.PscConnection
	nil,                           // 29: google.events.cloud.networkconnectivity.v1.ServiceConnectionPolicy.LabelsEntry
	nil,                           // 30: google.events.cloud.networkconnectivity.v1.ServiceClass.LabelsEntry
	nil,                           // 31: google.events.cloud.networkconnectivity.v1.ServiceConnectionToken.LabelsEntry
	nil,                           // 32: google.events.cloud.networkconnectivity.v1.Hub.LabelsEntry
	nil,                           // 33: google.events.cloud.networkconnectivity.v1.Spoke.LabelsEntry
	(*timestamppb.Timestamp)(nil), // 34: google.protobuf.Timestamp
	(*status.Status)(nil),         // 35: google.rpc.Status
}
var file_cloud_networkconnectivity_v1_data_proto_depIdxs = []int32{
	34, // 0: google.events.cloud.networkconnectivity.v1.ServiceConnectionMap.create_time:type_name -> google.protobuf.Timestamp
	34, // 1: google.events.cloud.networkconnectivity.v1.ServiceConnectionMap.update_time:type_name -> google.protobuf.Timestamp
	26, // 2: google.events.cloud.networkconnectivity.v1.ServiceConnectionMap.labels:type_name -> google.events.cloud.networkconnectivity.v1.ServiceConnectionMap.LabelsEntry
	0,  // 3: google.events.cloud.networkconnectivity.v1.ServiceConnectionMap.infrastructure:type_name -> google.events.cloud.networkconnectivity.v1.Infrastructure
	23, // 4: google.events.cloud.networkconnectivity.v1.ServiceConnectionMap.producer_psc_configs:type_name -> google.events.cloud.networkconnectivity.v1.ServiceConnectionMap.ProducerPscConfig
	24, // 5: google.events.cloud.networkconnectivity.v1.ServiceConnectionMap.consumer_psc_configs:type_name -> google.events.cloud.networkconnectivity.v1.ServiceConnectionMap.ConsumerPscConfig
	25, // 6: google.events.cloud.networkconnectivity.v1.ServiceConnectionMap.consumer_psc_connections:type_name -> google.events.cloud.networkconnectivity.v1.ServiceConnectionMap.ConsumerPscConnection
	34, // 7: google.events.cloud.networkconnectivity.v1.ServiceConnectionPolicy.create_time:type_name -> google.protobuf.Timestamp
	34, // 8: google.events.cloud.networkconnectivity.v1.ServiceConnectionPolicy.update_time:type_name -> google.protobuf.Timestamp
	29, // 9: google.events.cloud.networkconnectivity.v1.ServiceConnectionPolicy.labels:type_name -> google.events.cloud.networkconnectivity.v1.ServiceConnectionPolicy.LabelsEntry
	0,  // 10: google.events.cloud.networkconnectivity.v1.ServiceConnectionPolicy.infrastructure:type_name -> google.events.cloud.networkconnectivity.v1.Infrastructure
	27, // 11: google.events.cloud.networkconnectivity.v1.ServiceConnectionPolicy.psc_config:type_name -> google.events.cloud.networkconnectivity.v1.ServiceConnectionPolicy.PscConfig
	28, // 12: google.events.cloud.networkconnectivity.v1.ServiceConnectionPolicy.psc_connections:type_name -> google.events.cloud.networkconnectivity.v1.ServiceConnectionPolicy.PscConnection
	34, // 13: google.events.cloud.networkconnectivity.v1.ServiceClass.create_time:type_name -> google.protobuf.Timestamp
	34, // 14: google.events.cloud.networkconnectivity.v1.ServiceClass.update_time:type_name -> google.protobuf.Timestamp
	30, // 15: google.events.cloud.networkconnectivity.v1.ServiceClass.labels:type_name -> google.events.cloud.networkconnectivity.v1.ServiceClass.LabelsEntry
	34, // 16: google.events.cloud.networkconnectivity.v1.ServiceConnectionToken.create_time:type_name -> google.protobuf.Timestamp
	34, // 17: google.events.cloud.networkconnectivity.v1.ServiceConnectionToken.update_time:type_name -> google.protobuf.Timestamp
	31, // 18: google.events.cloud.networkconnectivity.v1.ServiceConnectionToken.labels:type_name -> google.events.cloud.networkconnectivity.v1.ServiceConnectionToken.LabelsEntry
	34, // 19: google.events.cloud.networkconnectivity.v1.Hub.create_time:type_name -> google.protobuf.Timestamp
	34, // 20: google.events.cloud.networkconnectivity.v1.Hub.update_time:type_name -> google.protobuf.Timestamp
	32, // 21: google.events.cloud.networkconnectivity.v1.Hub.labels:type_name -> google.events.cloud.networkconnectivity.v1.Hub.LabelsEntry
	2,  // 22: google.events.cloud.networkconnectivity.v1.Hub.state:type_name -> google.events.cloud.networkconnectivity.v1.State
	11, // 23: google.events.cloud.networkconnectivity.v1.Hub.routing_vpcs:type_name -> google.events.cloud.networkconnectivity.v1.RoutingVPC
	34, // 24: google.events.cloud.networkconnectivity.v1.Spoke.create_time:type_name -> google.protobuf.Timestamp
	34, // 25: google.events.cloud.networkconnectivity.v1.Spoke.update_time:type_name -> google.protobuf.Timestamp
	33, // 26: google.events.cloud.networkconnectivity.v1.Spoke.labels:type_name -> google.events.cloud.networkconnectivity.v1.Spoke.LabelsEntry
	13, // 27: google.events.cloud.networkconnectivity.v1.Spoke.linked_vpn_tunnels:type_name -> google.events.cloud.networkconnectivity.v1.LinkedVpnTunnels
	14, // 28: google.events.cloud.networkconnectivity.v1.Spoke.linked_interconnect_attachments:type_name -> google.events.cloud.networkconnectivity.v1.LinkedInterconnectAttachments
	15, // 29: google.events.cloud.networkconnectivity.v1.Spoke.linked_router_appliance_instances:type_name -> google.events.cloud.networkconnectivity.v1.LinkedRouterApplianceInstances
	2,  // 30: google.events.cloud.networkconnectivity.v1.Spoke.state:type_name -> google.events.cloud.networkconnectivity.v1.State
	16, // 31: google.events.cloud.networkconnectivity.v1.LinkedRouterApplianceInstances.instances:type_name -> google.events.cloud.networkconnectivity.v1.RouterApplianceInstance
	8,  // 32: google.events.cloud.networkconnectivity.v1.ServiceClassEventData.payload:type_name -> google.events.cloud.networkconnectivity.v1.ServiceClass
	9,  // 33: google.events.cloud.networkconnectivity.v1.ServiceConnectionTokenEventData.payload:type_name -> google.events.cloud.networkconnectivity.v1.ServiceConnectionToken
	6,  // 34: google.events.cloud.networkconnectivity.v1.ServiceConnectionMapEventData.payload:type_name -> google.events.cloud.networkconnectivity.v1.ServiceConnectionMap
	10, // 35: google.events.cloud.networkconnectivity.v1.HubEventData.payload:type_name -> google.events.cloud.networkconnectivity.v1.Hub
	12, // 36: google.events.cloud.networkconnectivity.v1.SpokeEventData.payload:type_name -> google.events.cloud.networkconnectivity.v1.Spoke
	7,  // 37: google.events.cloud.networkconnectivity.v1.ServiceConnectionPolicyEventData.payload:type_name -> google.events.cloud.networkconnectivity.v1.ServiceConnectionPolicy
	3,  // 38: google.events.cloud.networkconnectivity.v1.ServiceConnectionMap.ConsumerPscConfig.state:type_name -> google.events.cloud.networkconnectivity.v1.ServiceConnectionMap.ConsumerPscConfig.State
	4,  // 39: google.events.cloud.networkconnectivity.v1.ServiceConnectionMap.ConsumerPscConnection.state:type_name -> google.events.cloud.networkconnectivity.v1.ServiceConnectionMap.ConsumerPscConnection.State
	1,  // 40: google.events.cloud.networkconnectivity.v1.ServiceConnectionMap.ConsumerPscConnection.error_type:type_name -> google.events.cloud.networkconnectivity.v1.ConnectionErrorType
	35, // 41: google.events.cloud.networkconnectivity.v1.ServiceConnectionMap.ConsumerPscConnection.error:type_name -> google.rpc.Status
	5,  // 42: google.events.cloud.networkconnectivity.v1.ServiceConnectionPolicy.PscConnection.state:type_name -> google.events.cloud.networkconnectivity.v1.ServiceConnectionPolicy.State
	1,  // 43: google.events.cloud.networkconnectivity.v1.ServiceConnectionPolicy.PscConnection.error_type:type_name -> google.events.cloud.networkconnectivity.v1.ConnectionErrorType
	35, // 44: google.events.cloud.networkconnectivity.v1.ServiceConnectionPolicy.PscConnection.error:type_name -> google.rpc.Status
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_cloud_networkconnectivity_v1_data_proto_init() }
func file_cloud_networkconnectivity_v1_data_proto_init() {
	if File_cloud_networkconnectivity_v1_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_networkconnectivity_v1_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceConnectionMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_networkconnectivity_v1_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceConnectionPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_networkconnectivity_v1_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_networkconnectivity_v1_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceConnectionToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_networkconnectivity_v1_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_networkconnectivity_v1_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingVPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_networkconnectivity_v1_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spoke); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_networkconnectivity_v1_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkedVpnTunnels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_networkconnectivity_v1_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkedInterconnectAttachments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_networkconnectivity_v1_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkedRouterApplianceInstances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_networkconnectivity_v1_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterApplianceInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_networkconnectivity_v1_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceClassEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_networkconnectivity_v1_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceConnectionTokenEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_networkconnectivity_v1_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceConnectionMapEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_networkconnectivity_v1_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HubEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_networkconnectivity_v1_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpokeEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_networkconnectivity_v1_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceConnectionPolicyEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_networkconnectivity_v1_data_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceConnectionMap_ProducerPscConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_networkconnectivity_v1_data_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceConnectionMap_ConsumerPscConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_networkconnectivity_v1_data_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceConnectionMap_ConsumerPscConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_networkconnectivity_v1_data_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceConnectionPolicy_PscConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_networkconnectivity_v1_data_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceConnectionPolicy_PscConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cloud_networkconnectivity_v1_data_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_cloud_networkconnectivity_v1_data_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_cloud_networkconnectivity_v1_data_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_cloud_networkconnectivity_v1_data_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_cloud_networkconnectivity_v1_data_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_cloud_networkconnectivity_v1_data_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_cloud_networkconnectivity_v1_data_proto_msgTypes[21].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_networkconnectivity_v1_data_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_networkconnectivity_v1_data_proto_goTypes,
		DependencyIndexes: file_cloud_networkconnectivity_v1_data_proto_depIdxs,
		EnumInfos:         file_cloud_networkconnectivity_v1_data_proto_enumTypes,
		MessageInfos:      file_cloud_networkconnectivity_v1_data_proto_msgTypes,
	}.Build()
	File_cloud_networkconnectivity_v1_data_proto = out.File
	file_cloud_networkconnectivity_v1_data_proto_rawDesc = nil
	file_cloud_networkconnectivity_v1_data_proto_goTypes = nil
	file_cloud_networkconnectivity_v1_data_proto_depIdxs = nil
}
