// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v3.21.6
// source: cloud/gkebackup/v1/data.proto

package gkebackupdata

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// State
type Backup_State int32

const (
	// The Backup resource is in the process of being created.
	Backup_STATE_UNSPECIFIED Backup_State = 0
	// The Backup resource has been created and the associated BackupJob
	// Kubernetes resource has been injected into the source cluster.
	Backup_CREATING Backup_State = 1
	// The gkebackup agent in the cluster has begun executing the backup
	// operation.
	Backup_IN_PROGRESS Backup_State = 2
	// The backup operation has completed successfully.
	Backup_SUCCEEDED Backup_State = 3
	// The backup operation has failed.
	Backup_FAILED Backup_State = 4
	// This Backup resource (and its associated artifacts) is in the process
	// of being deleted.
	Backup_DELETING Backup_State = 5
)

// Enum value maps for Backup_State.
var (
	Backup_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "CREATING",
		2: "IN_PROGRESS",
		3: "SUCCEEDED",
		4: "FAILED",
		5: "DELETING",
	}
	Backup_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"CREATING":          1,
		"IN_PROGRESS":       2,
		"SUCCEEDED":         3,
		"FAILED":            4,
		"DELETING":          5,
	}
)

func (x Backup_State) Enum() *Backup_State {
	p := new(Backup_State)
	*p = x
	return p
}

func (x Backup_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Backup_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_gkebackup_v1_data_proto_enumTypes[0].Descriptor()
}

func (Backup_State) Type() protoreflect.EnumType {
	return &file_cloud_gkebackup_v1_data_proto_enumTypes[0]
}

func (x Backup_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Backup_State.Descriptor instead.
func (Backup_State) EnumDescriptor() ([]byte, []int) {
	return file_cloud_gkebackup_v1_data_proto_rawDescGZIP(), []int{4, 0}
}

// Possible values for state of the Restore.
type Restore_State int32

const (
	// The Restore resource is in the process of being created.
	Restore_STATE_UNSPECIFIED Restore_State = 0
	// The Restore resource has been created and the associated RestoreJob
	// Kubernetes resource has been injected into target cluster.
	Restore_CREATING Restore_State = 1
	// The gkebackup agent in the cluster has begun executing the restore
	// operation.
	Restore_IN_PROGRESS Restore_State = 2
	// The restore operation has completed successfully. Restored workloads may
	// not yet be operational.
	Restore_SUCCEEDED Restore_State = 3
	// The restore operation has failed.
	Restore_FAILED Restore_State = 4
	// This Restore resource is in the process of being deleted.
	Restore_DELETING Restore_State = 5
)

// Enum value maps for Restore_State.
var (
	Restore_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "CREATING",
		2: "IN_PROGRESS",
		3: "SUCCEEDED",
		4: "FAILED",
		5: "DELETING",
	}
	Restore_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"CREATING":          1,
		"IN_PROGRESS":       2,
		"SUCCEEDED":         3,
		"FAILED":            4,
		"DELETING":          5,
	}
)

func (x Restore_State) Enum() *Restore_State {
	p := new(Restore_State)
	*p = x
	return p
}

func (x Restore_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Restore_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_gkebackup_v1_data_proto_enumTypes[1].Descriptor()
}

func (Restore_State) Type() protoreflect.EnumType {
	return &file_cloud_gkebackup_v1_data_proto_enumTypes[1]
}

func (x Restore_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Restore_State.Descriptor instead.
func (Restore_State) EnumDescriptor() ([]byte, []int) {
	return file_cloud_gkebackup_v1_data_proto_rawDescGZIP(), []int{6, 0}
}

// Defines how volume data should be restored
type RestoreConfig_VolumeDataRestorePolicy int32

const (
	// Unspecified (illegal).
	RestoreConfig_VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED RestoreConfig_VolumeDataRestorePolicy = 0
	// For each PVC to be restored, will create a new underlying volume (and PV)
	// from the corresponding VolumeBackup contained within the Backup.
	RestoreConfig_RESTORE_VOLUME_DATA_FROM_BACKUP RestoreConfig_VolumeDataRestorePolicy = 1
	// For each PVC to be restored, attempt to reuse the original PV contained
	// in the Backup (with its original underlying volume).  Note that option
	// is likely only usable when restoring a workload to its original cluster.
	RestoreConfig_REUSE_VOLUME_HANDLE_FROM_BACKUP RestoreConfig_VolumeDataRestorePolicy = 2
	// For each PVC to be restored, PVCs will be created without any particular
	// action to restore data.  In this case, the normal Kubernetes provisioning
	// logic would kick in, and this would likely result in either dynamically
	// provisioning blank PVs or binding to statically provisioned PVs.
	RestoreConfig_NO_VOLUME_DATA_RESTORATION RestoreConfig_VolumeDataRestorePolicy = 3
)

// Enum value maps for RestoreConfig_VolumeDataRestorePolicy.
var (
	RestoreConfig_VolumeDataRestorePolicy_name = map[int32]string{
		0: "VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED",
		1: "RESTORE_VOLUME_DATA_FROM_BACKUP",
		2: "REUSE_VOLUME_HANDLE_FROM_BACKUP",
		3: "NO_VOLUME_DATA_RESTORATION",
	}
	RestoreConfig_VolumeDataRestorePolicy_value = map[string]int32{
		"VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED": 0,
		"RESTORE_VOLUME_DATA_FROM_BACKUP":        1,
		"REUSE_VOLUME_HANDLE_FROM_BACKUP":        2,
		"NO_VOLUME_DATA_RESTORATION":             3,
	}
)

func (x RestoreConfig_VolumeDataRestorePolicy) Enum() *RestoreConfig_VolumeDataRestorePolicy {
	p := new(RestoreConfig_VolumeDataRestorePolicy)
	*p = x
	return p
}

func (x RestoreConfig_VolumeDataRestorePolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RestoreConfig_VolumeDataRestorePolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_gkebackup_v1_data_proto_enumTypes[2].Descriptor()
}

func (RestoreConfig_VolumeDataRestorePolicy) Type() protoreflect.EnumType {
	return &file_cloud_gkebackup_v1_data_proto_enumTypes[2]
}

func (x RestoreConfig_VolumeDataRestorePolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RestoreConfig_VolumeDataRestorePolicy.Descriptor instead.
func (RestoreConfig_VolumeDataRestorePolicy) EnumDescriptor() ([]byte, []int) {
	return file_cloud_gkebackup_v1_data_proto_rawDescGZIP(), []int{7, 0}
}

// Defines the behavior for handling the situation where cluster-scoped
// resources being restored already exist in the target cluster.
type RestoreConfig_ClusterResourceConflictPolicy int32

const (
	// Unspecified. Only allowed if no cluster-scoped resources will be
	// restored.
	RestoreConfig_CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED RestoreConfig_ClusterResourceConflictPolicy = 0
	// Do not attempt to restore the conflicting resource.
	RestoreConfig_USE_EXISTING_VERSION RestoreConfig_ClusterResourceConflictPolicy = 1
	// Delete the existing version before re-creating it from the Backup.
	// Note that this is a dangerous option which could cause unintentional
	// data loss if used inappropriately - for example, deleting a CRD will
	// cause Kubernetes to delete all CRs of that type.
	RestoreConfig_USE_BACKUP_VERSION RestoreConfig_ClusterResourceConflictPolicy = 2
)

// Enum value maps for RestoreConfig_ClusterResourceConflictPolicy.
var (
	RestoreConfig_ClusterResourceConflictPolicy_name = map[int32]string{
		0: "CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED",
		1: "USE_EXISTING_VERSION",
		2: "USE_BACKUP_VERSION",
	}
	RestoreConfig_ClusterResourceConflictPolicy_value = map[string]int32{
		"CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED": 0,
		"USE_EXISTING_VERSION":                         1,
		"USE_BACKUP_VERSION":                           2,
	}
)

func (x RestoreConfig_ClusterResourceConflictPolicy) Enum() *RestoreConfig_ClusterResourceConflictPolicy {
	p := new(RestoreConfig_ClusterResourceConflictPolicy)
	*p = x
	return p
}

func (x RestoreConfig_ClusterResourceConflictPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RestoreConfig_ClusterResourceConflictPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_gkebackup_v1_data_proto_enumTypes[3].Descriptor()
}

func (RestoreConfig_ClusterResourceConflictPolicy) Type() protoreflect.EnumType {
	return &file_cloud_gkebackup_v1_data_proto_enumTypes[3]
}

func (x RestoreConfig_ClusterResourceConflictPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RestoreConfig_ClusterResourceConflictPolicy.Descriptor instead.
func (RestoreConfig_ClusterResourceConflictPolicy) EnumDescriptor() ([]byte, []int) {
	return file_cloud_gkebackup_v1_data_proto_rawDescGZIP(), []int{7, 1}
}

// Defines the behavior for handling the situation where sets of namespaced
// resources being restored already exist in the target cluster.
type RestoreConfig_NamespacedResourceRestoreMode int32

const (
	// Unspecified (invalid).
	RestoreConfig_NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED RestoreConfig_NamespacedResourceRestoreMode = 0
	// When conflicting top-level resources (either Namespaces or
	// ProtectedApplications, depending upon the scope) are encountered, this
	// will first trigger a delete of the conflicting resource AND ALL OF ITS
	// REFERENCED RESOURCES (e.g., all resources in the Namespace or all
	// resources referenced by the ProtectedApplication) before restoring the
	// resources from the Backup. This mode should only be used when you are
	// intending to revert some portion of a cluster to an earlier state.
	RestoreConfig_DELETE_AND_RESTORE RestoreConfig_NamespacedResourceRestoreMode = 1
	// If conflicting top-level resources (either Namespaces or
	// ProtectedApplications, depending upon the scope) are encountered at the
	// beginning of a restore process, the Restore will fail.  If a conflict
	// occurs during the restore process itself (e.g., because an out of band
	// process creates conflicting resources), a conflict will be reported.
	RestoreConfig_FAIL_ON_CONFLICT RestoreConfig_NamespacedResourceRestoreMode = 2
)

// Enum value maps for RestoreConfig_NamespacedResourceRestoreMode.
var (
	RestoreConfig_NamespacedResourceRestoreMode_name = map[int32]string{
		0: "NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED",
		1: "DELETE_AND_RESTORE",
		2: "FAIL_ON_CONFLICT",
	}
	RestoreConfig_NamespacedResourceRestoreMode_value = map[string]int32{
		"NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED": 0,
		"DELETE_AND_RESTORE":                           1,
		"FAIL_ON_CONFLICT":                             2,
	}
)

func (x RestoreConfig_NamespacedResourceRestoreMode) Enum() *RestoreConfig_NamespacedResourceRestoreMode {
	p := new(RestoreConfig_NamespacedResourceRestoreMode)
	*p = x
	return p
}

func (x RestoreConfig_NamespacedResourceRestoreMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RestoreConfig_NamespacedResourceRestoreMode) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_gkebackup_v1_data_proto_enumTypes[4].Descriptor()
}

func (RestoreConfig_NamespacedResourceRestoreMode) Type() protoreflect.EnumType {
	return &file_cloud_gkebackup_v1_data_proto_enumTypes[4]
}

func (x RestoreConfig_NamespacedResourceRestoreMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RestoreConfig_NamespacedResourceRestoreMode.Descriptor instead.
func (RestoreConfig_NamespacedResourceRestoreMode) EnumDescriptor() ([]byte, []int) {
	return file_cloud_gkebackup_v1_data_proto_rawDescGZIP(), []int{7, 2}
}

// A list of Kubernetes Namespaces
type Namespaces struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of Kubernetes Namespaces
	Namespaces    []string `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Namespaces) Reset() {
	*x = Namespaces{}
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Namespaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespaces) ProtoMessage() {}

func (x *Namespaces) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespaces.ProtoReflect.Descriptor instead.
func (*Namespaces) Descriptor() ([]byte, []int) {
	return file_cloud_gkebackup_v1_data_proto_rawDescGZIP(), []int{0}
}

func (x *Namespaces) GetNamespaces() []string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

// A reference to a namespaced resource in Kubernetes.
type NamespacedName struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Namespace of the Kubernetes resource.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The name of the Kubernetes resource.
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NamespacedName) Reset() {
	*x = NamespacedName{}
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamespacedName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespacedName) ProtoMessage() {}

func (x *NamespacedName) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespacedName.ProtoReflect.Descriptor instead.
func (*NamespacedName) Descriptor() ([]byte, []int) {
	return file_cloud_gkebackup_v1_data_proto_rawDescGZIP(), []int{1}
}

func (x *NamespacedName) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *NamespacedName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// A list of namespaced Kubernetes resources.
type NamespacedNames struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of namespaced Kubernetes resources.
	NamespacedNames []*NamespacedName `protobuf:"bytes,1,rep,name=namespaced_names,json=namespacedNames,proto3" json:"namespaced_names,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NamespacedNames) Reset() {
	*x = NamespacedNames{}
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamespacedNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespacedNames) ProtoMessage() {}

func (x *NamespacedNames) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespacedNames.ProtoReflect.Descriptor instead.
func (*NamespacedNames) Descriptor() ([]byte, []int) {
	return file_cloud_gkebackup_v1_data_proto_rawDescGZIP(), []int{2}
}

func (x *NamespacedNames) GetNamespacedNames() []*NamespacedName {
	if x != nil {
		return x.NamespacedNames
	}
	return nil
}

// Defined a customer managed encryption key that will be used to encrypt Backup
// artifacts.
type EncryptionKey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Google Cloud KMS encryption key. Format:
	// `projects/*/locations/*/keyRings/*/cryptoKeys/*`
	GcpKmsEncryptionKey string `protobuf:"bytes,1,opt,name=gcp_kms_encryption_key,json=gcpKmsEncryptionKey,proto3" json:"gcp_kms_encryption_key,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *EncryptionKey) Reset() {
	*x = EncryptionKey{}
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncryptionKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionKey) ProtoMessage() {}

func (x *EncryptionKey) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionKey.ProtoReflect.Descriptor instead.
func (*EncryptionKey) Descriptor() ([]byte, []int) {
	return file_cloud_gkebackup_v1_data_proto_rawDescGZIP(), []int{3}
}

func (x *EncryptionKey) GetGcpKmsEncryptionKey() string {
	if x != nil {
		return x.GcpKmsEncryptionKey
	}
	return ""
}

// Represents a request to perform a single point-in-time capture of
// some portion of the state of a GKE cluster, the record of the backup
// operation itself, and an anchor for the underlying artifacts that
// comprise the Backup (the config backup and VolumeBackups).
// Next id: 28
type Backup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Output only. The fully qualified name of the Backup.
	// `projects/*/locations/*/backupPlans/*/backups/*`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Server generated global unique identifier of
	// [UUID4](https://en.wikipedia.org/wiki/Universally_unique_identifier)
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// Output only. The timestamp when this Backup resource was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The timestamp when this Backup resource was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. This flag indicates whether this Backup resource was created
	// manually by a user or via a schedule in the BackupPlan. A value of True
	// means that the Backup was created manually.
	Manual bool `protobuf:"varint,5,opt,name=manual,proto3" json:"manual,omitempty"`
	// A set of custom labels supplied by user.
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Minimum age for this Backup (in days). If this field is set to a non-zero
	// value, the Backup will be "locked" against deletion (either manual or
	// automatic deletion) for the number of days provided (measured from the
	// creation time of the Backup).  MUST be an integer value between 0-90
	// (inclusive).
	//
	// Defaults to parent BackupPlan's
	// [backup_delete_lock_days][google.cloud.gkebackup.v1.BackupPlan.RetentionPolicy.backup_delete_lock_days]
	// setting and may only be increased
	// (either at creation time or in a subsequent update).
	DeleteLockDays int32 `protobuf:"varint,7,opt,name=delete_lock_days,json=deleteLockDays,proto3" json:"delete_lock_days,omitempty"`
	// Output only. The time at which an existing delete lock will expire for this
	// backup (calculated from create_time +
	// [delete_lock_days][google.cloud.gkebackup.v1.Backup.delete_lock_days]).
	DeleteLockExpireTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=delete_lock_expire_time,json=deleteLockExpireTime,proto3" json:"delete_lock_expire_time,omitempty"`
	// The age (in days) after which this Backup will be automatically deleted.
	// Must be an integer value >= 0:
	//
	// - If 0, no automatic deletion will occur for this Backup.
	// - If not 0, this must be >=
	// [delete_lock_days][google.cloud.gkebackup.v1.Backup.delete_lock_days] and
	// <= 365.
	//
	// Once a Backup is created, this value may only be increased.
	//
	// Defaults to the parent BackupPlan's
	// [backup_retain_days][google.cloud.gkebackup.v1.BackupPlan.RetentionPolicy.backup_retain_days]
	// value.
	RetainDays int32 `protobuf:"varint,9,opt,name=retain_days,json=retainDays,proto3" json:"retain_days,omitempty"`
	// Output only. The time at which this Backup will be automatically deleted
	// (calculated from create_time +
	// [retain_days][google.cloud.gkebackup.v1.Backup.retain_days]).
	RetainExpireTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=retain_expire_time,json=retainExpireTime,proto3" json:"retain_expire_time,omitempty"`
	// Output only. The customer managed encryption key that was used to encrypt
	// the Backup's artifacts.  Inherited from the parent BackupPlan's
	// [encryption_key][google.cloud.gkebackup.v1.BackupPlan.BackupConfig.encryption_key]
	// value.
	EncryptionKey *EncryptionKey `protobuf:"bytes,11,opt,name=encryption_key,json=encryptionKey,proto3" json:"encryption_key,omitempty"`
	// Defines the "scope" of the Backup - which namespaced resources in the
	// cluster were included in the Backup.  Inherited from the parent
	// BackupPlan's
	// [backup_scope][google.cloud.gkebackup.v1.BackupPlan.BackupConfig.backup_scope]
	// value.
	//
	// Types that are valid to be assigned to BackupScope:
	//
	//	*Backup_AllNamespaces
	//	*Backup_SelectedNamespaces
	//	*Backup_SelectedApplications
	BackupScope isBackup_BackupScope `protobuf_oneof:"backup_scope"`
	// Output only. Whether or not the Backup contains volume data.  Controlled by
	// the parent BackupPlan's
	// [include_volume_data][google.cloud.gkebackup.v1.BackupPlan.BackupConfig.include_volume_data]
	// value.
	ContainsVolumeData bool `protobuf:"varint,15,opt,name=contains_volume_data,json=containsVolumeData,proto3" json:"contains_volume_data,omitempty"`
	// Output only. Whether or not the Backup contains Kubernetes Secrets.
	// Controlled by the parent BackupPlan's
	// [include_secrets][google.cloud.gkebackup.v1.BackupPlan.BackupConfig.include_secrets]
	// value.
	ContainsSecrets bool `protobuf:"varint,16,opt,name=contains_secrets,json=containsSecrets,proto3" json:"contains_secrets,omitempty"`
	// Output only. Information about the GKE cluster from which this Backup was
	// created.
	ClusterMetadata *Backup_ClusterMetadata `protobuf:"bytes,17,opt,name=cluster_metadata,json=clusterMetadata,proto3" json:"cluster_metadata,omitempty"`
	// Output only. Current state of the Backup
	State Backup_State `protobuf:"varint,18,opt,name=state,proto3,enum=google.events.cloud.gkebackup.v1.Backup_State" json:"state,omitempty"`
	// Output only. Human-readable description of why the backup is in the current
	// `state`.
	StateReason string `protobuf:"bytes,19,opt,name=state_reason,json=stateReason,proto3" json:"state_reason,omitempty"`
	// Output only. Completion time of the Backup
	CompleteTime *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=complete_time,json=completeTime,proto3" json:"complete_time,omitempty"`
	// Output only. The total number of Kubernetes resources included in the
	// Backup.
	ResourceCount int32 `protobuf:"varint,21,opt,name=resource_count,json=resourceCount,proto3" json:"resource_count,omitempty"`
	// Output only. The total number of volume backups contained in the Backup.
	VolumeCount int32 `protobuf:"varint,22,opt,name=volume_count,json=volumeCount,proto3" json:"volume_count,omitempty"`
	// Output only. The total size of the Backup in bytes = config backup size +
	// sum(volume backup sizes)
	SizeBytes int64 `protobuf:"varint,23,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	// Output only. `etag` is used for optimistic concurrency control as a way to
	// help prevent simultaneous updates of a backup from overwriting each other.
	// It is strongly suggested that systems make use of the `etag` in the
	// read-modify-write cycle to perform backup updates in order to avoid
	// race conditions: An `etag` is returned in the response to `GetBackup`,
	// and systems are expected to put that etag in the request to
	// `UpdateBackup` or `DeleteBackup` to ensure that their change will be
	// applied to the same version of the resource.
	Etag string `protobuf:"bytes,24,opt,name=etag,proto3" json:"etag,omitempty"`
	// User specified descriptive string for this Backup.
	Description string `protobuf:"bytes,25,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The total number of Kubernetes Pods contained in the Backup.
	PodCount int32 `protobuf:"varint,26,opt,name=pod_count,json=podCount,proto3" json:"pod_count,omitempty"`
	// Output only. The size of the config backup in bytes.
	ConfigBackupSizeBytes int64 `protobuf:"varint,27,opt,name=config_backup_size_bytes,json=configBackupSizeBytes,proto3" json:"config_backup_size_bytes,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Backup) Reset() {
	*x = Backup{}
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Backup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup) ProtoMessage() {}

func (x *Backup) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup.ProtoReflect.Descriptor instead.
func (*Backup) Descriptor() ([]byte, []int) {
	return file_cloud_gkebackup_v1_data_proto_rawDescGZIP(), []int{4}
}

func (x *Backup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Backup) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Backup) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Backup) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Backup) GetManual() bool {
	if x != nil {
		return x.Manual
	}
	return false
}

func (x *Backup) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Backup) GetDeleteLockDays() int32 {
	if x != nil {
		return x.DeleteLockDays
	}
	return 0
}

func (x *Backup) GetDeleteLockExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteLockExpireTime
	}
	return nil
}

func (x *Backup) GetRetainDays() int32 {
	if x != nil {
		return x.RetainDays
	}
	return 0
}

func (x *Backup) GetRetainExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RetainExpireTime
	}
	return nil
}

func (x *Backup) GetEncryptionKey() *EncryptionKey {
	if x != nil {
		return x.EncryptionKey
	}
	return nil
}

func (x *Backup) GetBackupScope() isBackup_BackupScope {
	if x != nil {
		return x.BackupScope
	}
	return nil
}

func (x *Backup) GetAllNamespaces() bool {
	if x != nil {
		if x, ok := x.BackupScope.(*Backup_AllNamespaces); ok {
			return x.AllNamespaces
		}
	}
	return false
}

func (x *Backup) GetSelectedNamespaces() *Namespaces {
	if x != nil {
		if x, ok := x.BackupScope.(*Backup_SelectedNamespaces); ok {
			return x.SelectedNamespaces
		}
	}
	return nil
}

func (x *Backup) GetSelectedApplications() *NamespacedNames {
	if x != nil {
		if x, ok := x.BackupScope.(*Backup_SelectedApplications); ok {
			return x.SelectedApplications
		}
	}
	return nil
}

func (x *Backup) GetContainsVolumeData() bool {
	if x != nil {
		return x.ContainsVolumeData
	}
	return false
}

func (x *Backup) GetContainsSecrets() bool {
	if x != nil {
		return x.ContainsSecrets
	}
	return false
}

func (x *Backup) GetClusterMetadata() *Backup_ClusterMetadata {
	if x != nil {
		return x.ClusterMetadata
	}
	return nil
}

func (x *Backup) GetState() Backup_State {
	if x != nil {
		return x.State
	}
	return Backup_STATE_UNSPECIFIED
}

func (x *Backup) GetStateReason() string {
	if x != nil {
		return x.StateReason
	}
	return ""
}

func (x *Backup) GetCompleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CompleteTime
	}
	return nil
}

func (x *Backup) GetResourceCount() int32 {
	if x != nil {
		return x.ResourceCount
	}
	return 0
}

func (x *Backup) GetVolumeCount() int32 {
	if x != nil {
		return x.VolumeCount
	}
	return 0
}

func (x *Backup) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *Backup) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *Backup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Backup) GetPodCount() int32 {
	if x != nil {
		return x.PodCount
	}
	return 0
}

func (x *Backup) GetConfigBackupSizeBytes() int64 {
	if x != nil {
		return x.ConfigBackupSizeBytes
	}
	return 0
}

type isBackup_BackupScope interface {
	isBackup_BackupScope()
}

type Backup_AllNamespaces struct {
	// Output only. If True, all namespaces were included in the Backup.
	AllNamespaces bool `protobuf:"varint,12,opt,name=all_namespaces,json=allNamespaces,proto3,oneof"`
}

type Backup_SelectedNamespaces struct {
	// Output only. If set, the list of namespaces that were included in the
	// Backup.
	SelectedNamespaces *Namespaces `protobuf:"bytes,13,opt,name=selected_namespaces,json=selectedNamespaces,proto3,oneof"`
}

type Backup_SelectedApplications struct {
	// Output only. If set, the list of ProtectedApplications whose resources
	// were included in the Backup.
	SelectedApplications *NamespacedNames `protobuf:"bytes,14,opt,name=selected_applications,json=selectedApplications,proto3,oneof"`
}

func (*Backup_AllNamespaces) isBackup_BackupScope() {}

func (*Backup_SelectedNamespaces) isBackup_BackupScope() {}

func (*Backup_SelectedApplications) isBackup_BackupScope() {}

// Defines the configuration and scheduling for a "line" of Backups.
type BackupPlan struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Output only. The full name of the BackupPlan resource.
	// Format: `projects/*/locations/*/backupPlans/*`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Server generated global unique identifier of
	// [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// Output only. The timestamp when this BackupPlan resource was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The timestamp when this BackupPlan resource was last
	// updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// User specified descriptive string for this BackupPlan.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Required. Immutable. The source cluster from which Backups will be created
	// via this BackupPlan. Valid formats:
	//
	// - `projects/*/locations/*/clusters/*`
	// - `projects/*/zones/*/clusters/*`
	Cluster string `protobuf:"bytes,6,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// RetentionPolicy governs lifecycle of Backups created under this plan.
	RetentionPolicy *BackupPlan_RetentionPolicy `protobuf:"bytes,7,opt,name=retention_policy,json=retentionPolicy,proto3" json:"retention_policy,omitempty"`
	// A set of custom labels supplied by user.
	Labels map[string]string `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Defines a schedule for automatic Backup creation via this BackupPlan.
	BackupSchedule *BackupPlan_Schedule `protobuf:"bytes,9,opt,name=backup_schedule,json=backupSchedule,proto3" json:"backup_schedule,omitempty"`
	// Output only. `etag` is used for optimistic concurrency control as a way to
	// help prevent simultaneous updates of a backup plan from overwriting each
	// other. It is strongly suggested that systems make use of the 'etag' in the
	// read-modify-write cycle to perform BackupPlan updates in order to avoid
	// race conditions: An `etag` is returned in the response to `GetBackupPlan`,
	// and systems are expected to put that etag in the request to
	// `UpdateBackupPlan` or `DeleteBackupPlan` to ensure that their change
	// will be applied to the same version of the resource.
	Etag string `protobuf:"bytes,10,opt,name=etag,proto3" json:"etag,omitempty"`
	// This flag indicates whether this BackupPlan has been deactivated.
	// Setting this field to True locks the BackupPlan such that no further
	// updates will be allowed (except deletes), including the deactivated field
	// itself. It also prevents any new Backups from being created via this
	// BackupPlan (including scheduled Backups).
	//
	// Default: False
	Deactivated bool `protobuf:"varint,11,opt,name=deactivated,proto3" json:"deactivated,omitempty"`
	// Defines the configuration of Backups created via this BackupPlan.
	BackupConfig *BackupPlan_BackupConfig `protobuf:"bytes,12,opt,name=backup_config,json=backupConfig,proto3" json:"backup_config,omitempty"`
	// Output only. The number of Kubernetes Pods backed up in the
	// last successful Backup created via this BackupPlan.
	ProtectedPodCount int32 `protobuf:"varint,13,opt,name=protected_pod_count,json=protectedPodCount,proto3" json:"protected_pod_count,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *BackupPlan) Reset() {
	*x = BackupPlan{}
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupPlan) ProtoMessage() {}

func (x *BackupPlan) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupPlan.ProtoReflect.Descriptor instead.
func (*BackupPlan) Descriptor() ([]byte, []int) {
	return file_cloud_gkebackup_v1_data_proto_rawDescGZIP(), []int{5}
}

func (x *BackupPlan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BackupPlan) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *BackupPlan) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *BackupPlan) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *BackupPlan) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BackupPlan) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *BackupPlan) GetRetentionPolicy() *BackupPlan_RetentionPolicy {
	if x != nil {
		return x.RetentionPolicy
	}
	return nil
}

func (x *BackupPlan) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *BackupPlan) GetBackupSchedule() *BackupPlan_Schedule {
	if x != nil {
		return x.BackupSchedule
	}
	return nil
}

func (x *BackupPlan) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *BackupPlan) GetDeactivated() bool {
	if x != nil {
		return x.Deactivated
	}
	return false
}

func (x *BackupPlan) GetBackupConfig() *BackupPlan_BackupConfig {
	if x != nil {
		return x.BackupConfig
	}
	return nil
}

func (x *BackupPlan) GetProtectedPodCount() int32 {
	if x != nil {
		return x.ProtectedPodCount
	}
	return 0
}

// Represents both a request to Restore some portion of a Backup into
// a target GKE cluster and a record of the restore operation itself.
// Next id: 18
type Restore struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Output only. The full name of the Restore resource.
	// Format: `projects/*/locations/*/restorePlans/*/restores/*`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Server generated global unique identifier of
	// [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// Output only. The timestamp when this Restore resource was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The timestamp when this Restore resource was last
	// updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// User specified descriptive string for this Restore.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Required. Immutable. A reference to the
	// [Backup][google.cloud.gkebackup.v1.Backup] used as the source from which
	// this Restore will restore. Note that this Backup must be a sub-resource of
	// the RestorePlan's
	// [backup_plan][google.cloud.gkebackup.v1.RestorePlan.backup_plan]. Format:
	// `projects/*/locations/*/backupPlans/*/backups/*`.
	Backup string `protobuf:"bytes,6,opt,name=backup,proto3" json:"backup,omitempty"`
	// Output only. The target cluster into which this Restore will restore data.
	// Valid formats:
	//
	//   - `projects/*/locations/*/clusters/*`
	//   - `projects/*/zones/*/clusters/*`
	//
	// Inherited from parent RestorePlan's
	// [cluster][google.cloud.gkebackup.v1.RestorePlan.cluster] value.
	Cluster string `protobuf:"bytes,7,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Output only. Configuration of the Restore.  Inherited from parent
	// RestorePlan's
	// [restore_config][google.cloud.gkebackup.v1.RestorePlan.restore_config].
	RestoreConfig *RestoreConfig `protobuf:"bytes,8,opt,name=restore_config,json=restoreConfig,proto3" json:"restore_config,omitempty"`
	// A set of custom labels supplied by user.
	Labels map[string]string `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Output only. The current state of the Restore.
	State Restore_State `protobuf:"varint,10,opt,name=state,proto3,enum=google.events.cloud.gkebackup.v1.Restore_State" json:"state,omitempty"`
	// Output only. Human-readable description of why the Restore is in its
	// current state.
	StateReason string `protobuf:"bytes,11,opt,name=state_reason,json=stateReason,proto3" json:"state_reason,omitempty"`
	// Output only. Timestamp of when the restore operation completed.
	CompleteTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=complete_time,json=completeTime,proto3" json:"complete_time,omitempty"`
	// Output only. Number of resources restored during the restore execution.
	ResourcesRestoredCount int32 `protobuf:"varint,13,opt,name=resources_restored_count,json=resourcesRestoredCount,proto3" json:"resources_restored_count,omitempty"`
	// Output only. Number of resources excluded during the restore execution.
	ResourcesExcludedCount int32 `protobuf:"varint,14,opt,name=resources_excluded_count,json=resourcesExcludedCount,proto3" json:"resources_excluded_count,omitempty"`
	// Output only. Number of resources that failed to be restored during the
	// restore execution.
	ResourcesFailedCount int32 `protobuf:"varint,15,opt,name=resources_failed_count,json=resourcesFailedCount,proto3" json:"resources_failed_count,omitempty"`
	// Output only. Number of volumes restored during the restore execution.
	VolumesRestoredCount int32 `protobuf:"varint,16,opt,name=volumes_restored_count,json=volumesRestoredCount,proto3" json:"volumes_restored_count,omitempty"`
	// Output only. `etag` is used for optimistic concurrency control as a way to
	// help prevent simultaneous updates of a restore from overwriting each other.
	// It is strongly suggested that systems make use of the `etag` in the
	// read-modify-write cycle to perform restore updates in order to avoid
	// race conditions: An `etag` is returned in the response to `GetRestore`,
	// and systems are expected to put that etag in the request to
	// `UpdateRestore` or `DeleteRestore` to ensure that their change will be
	// applied to the same version of the resource.
	Etag          string `protobuf:"bytes,17,opt,name=etag,proto3" json:"etag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Restore) Reset() {
	*x = Restore{}
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Restore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Restore) ProtoMessage() {}

func (x *Restore) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Restore.ProtoReflect.Descriptor instead.
func (*Restore) Descriptor() ([]byte, []int) {
	return file_cloud_gkebackup_v1_data_proto_rawDescGZIP(), []int{6}
}

func (x *Restore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Restore) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Restore) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Restore) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Restore) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Restore) GetBackup() string {
	if x != nil {
		return x.Backup
	}
	return ""
}

func (x *Restore) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *Restore) GetRestoreConfig() *RestoreConfig {
	if x != nil {
		return x.RestoreConfig
	}
	return nil
}

func (x *Restore) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Restore) GetState() Restore_State {
	if x != nil {
		return x.State
	}
	return Restore_STATE_UNSPECIFIED
}

func (x *Restore) GetStateReason() string {
	if x != nil {
		return x.StateReason
	}
	return ""
}

func (x *Restore) GetCompleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CompleteTime
	}
	return nil
}

func (x *Restore) GetResourcesRestoredCount() int32 {
	if x != nil {
		return x.ResourcesRestoredCount
	}
	return 0
}

func (x *Restore) GetResourcesExcludedCount() int32 {
	if x != nil {
		return x.ResourcesExcludedCount
	}
	return 0
}

func (x *Restore) GetResourcesFailedCount() int32 {
	if x != nil {
		return x.ResourcesFailedCount
	}
	return 0
}

func (x *Restore) GetVolumesRestoredCount() int32 {
	if x != nil {
		return x.VolumesRestoredCount
	}
	return 0
}

func (x *Restore) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

// Configuration of a restore.
// Next id: 12
type RestoreConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies the mechanism to be used to restore volume data.
	// Default: VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED (will be treated as
	// NO_VOLUME_DATA_RESTORATION).
	VolumeDataRestorePolicy RestoreConfig_VolumeDataRestorePolicy `protobuf:"varint,1,opt,name=volume_data_restore_policy,json=volumeDataRestorePolicy,proto3,enum=google.events.cloud.gkebackup.v1.RestoreConfig_VolumeDataRestorePolicy" json:"volume_data_restore_policy,omitempty"`
	// Defines the behavior for handling the situation where cluster-scoped
	// resources being restored already exist in the target cluster. This MUST be
	// set to a value other than CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED if
	// [cluster_resource_restore_scope][google.cloud.gkebackup.v1.RestoreConfig.cluster_resource_restore_scope]
	// is not empty.
	ClusterResourceConflictPolicy RestoreConfig_ClusterResourceConflictPolicy `protobuf:"varint,2,opt,name=cluster_resource_conflict_policy,json=clusterResourceConflictPolicy,proto3,enum=google.events.cloud.gkebackup.v1.RestoreConfig_ClusterResourceConflictPolicy" json:"cluster_resource_conflict_policy,omitempty"`
	// Defines the behavior for handling the situation where sets of namespaced
	// resources being restored already exist in the target cluster. This MUST be
	// set to a value other than NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED.
	NamespacedResourceRestoreMode RestoreConfig_NamespacedResourceRestoreMode `protobuf:"varint,3,opt,name=namespaced_resource_restore_mode,json=namespacedResourceRestoreMode,proto3,enum=google.events.cloud.gkebackup.v1.RestoreConfig_NamespacedResourceRestoreMode" json:"namespaced_resource_restore_mode,omitempty"`
	// Identifies the cluster-scoped resources to restore from the Backup.
	// Not specifying it means NO cluster resource will be restored.
	ClusterResourceRestoreScope *RestoreConfig_ClusterResourceRestoreScope `protobuf:"bytes,4,opt,name=cluster_resource_restore_scope,json=clusterResourceRestoreScope,proto3" json:"cluster_resource_restore_scope,omitempty"`
	// Specifies the namespaced resources to restore from the Backup.
	// Only one of the entries may be specified. If not specified, NO namespaced
	// resources will be restored.
	//
	// Note: Resources will never be restored into *managed* namespaces such as
	// `kube-system`, `kube-public`, or `kube-node-lease`. These namespaces
	// are silently skipped when
	// [all_namespaces][google.cloud.gkebackup.v1.RestoreConfig.all_namespaces] is
	// selected. Listing them explicitly will result in an error.
	//
	// Types that are valid to be assigned to NamespacedResourceRestoreScope:
	//
	//	*RestoreConfig_AllNamespaces
	//	*RestoreConfig_SelectedNamespaces
	//	*RestoreConfig_SelectedApplications
	NamespacedResourceRestoreScope isRestoreConfig_NamespacedResourceRestoreScope `protobuf_oneof:"namespaced_resource_restore_scope"`
	// A list of transformation rules to be applied against Kubernetes resources
	// as they are selected for restoration from a Backup. Rules are executed in
	// order defined - this order matters, as changes made by a rule may impact
	// the filtering logic of subsequent rules. An empty list means no
	// substitution will occur.
	SubstitutionRules []*RestoreConfig_SubstitutionRule `protobuf:"bytes,8,rep,name=substitution_rules,json=substitutionRules,proto3" json:"substitution_rules,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RestoreConfig) Reset() {
	*x = RestoreConfig{}
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreConfig) ProtoMessage() {}

func (x *RestoreConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreConfig.ProtoReflect.Descriptor instead.
func (*RestoreConfig) Descriptor() ([]byte, []int) {
	return file_cloud_gkebackup_v1_data_proto_rawDescGZIP(), []int{7}
}

func (x *RestoreConfig) GetVolumeDataRestorePolicy() RestoreConfig_VolumeDataRestorePolicy {
	if x != nil {
		return x.VolumeDataRestorePolicy
	}
	return RestoreConfig_VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED
}

func (x *RestoreConfig) GetClusterResourceConflictPolicy() RestoreConfig_ClusterResourceConflictPolicy {
	if x != nil {
		return x.ClusterResourceConflictPolicy
	}
	return RestoreConfig_CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED
}

func (x *RestoreConfig) GetNamespacedResourceRestoreMode() RestoreConfig_NamespacedResourceRestoreMode {
	if x != nil {
		return x.NamespacedResourceRestoreMode
	}
	return RestoreConfig_NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED
}

func (x *RestoreConfig) GetClusterResourceRestoreScope() *RestoreConfig_ClusterResourceRestoreScope {
	if x != nil {
		return x.ClusterResourceRestoreScope
	}
	return nil
}

func (x *RestoreConfig) GetNamespacedResourceRestoreScope() isRestoreConfig_NamespacedResourceRestoreScope {
	if x != nil {
		return x.NamespacedResourceRestoreScope
	}
	return nil
}

func (x *RestoreConfig) GetAllNamespaces() bool {
	if x != nil {
		if x, ok := x.NamespacedResourceRestoreScope.(*RestoreConfig_AllNamespaces); ok {
			return x.AllNamespaces
		}
	}
	return false
}

func (x *RestoreConfig) GetSelectedNamespaces() *Namespaces {
	if x != nil {
		if x, ok := x.NamespacedResourceRestoreScope.(*RestoreConfig_SelectedNamespaces); ok {
			return x.SelectedNamespaces
		}
	}
	return nil
}

func (x *RestoreConfig) GetSelectedApplications() *NamespacedNames {
	if x != nil {
		if x, ok := x.NamespacedResourceRestoreScope.(*RestoreConfig_SelectedApplications); ok {
			return x.SelectedApplications
		}
	}
	return nil
}

func (x *RestoreConfig) GetSubstitutionRules() []*RestoreConfig_SubstitutionRule {
	if x != nil {
		return x.SubstitutionRules
	}
	return nil
}

type isRestoreConfig_NamespacedResourceRestoreScope interface {
	isRestoreConfig_NamespacedResourceRestoreScope()
}

type RestoreConfig_AllNamespaces struct {
	// Restore all namespaced resources in the Backup if set to "True".
	// Specifying this field to "False" is an error.
	AllNamespaces bool `protobuf:"varint,5,opt,name=all_namespaces,json=allNamespaces,proto3,oneof"`
}

type RestoreConfig_SelectedNamespaces struct {
	// A list of selected Namespaces to restore from the Backup. The listed
	// Namespaces and all resources contained in them will be restored.
	SelectedNamespaces *Namespaces `protobuf:"bytes,6,opt,name=selected_namespaces,json=selectedNamespaces,proto3,oneof"`
}

type RestoreConfig_SelectedApplications struct {
	// A list of selected ProtectedApplications to restore. The listed
	// ProtectedApplications and all the resources to which they refer will be
	// restored.
	SelectedApplications *NamespacedNames `protobuf:"bytes,7,opt,name=selected_applications,json=selectedApplications,proto3,oneof"`
}

func (*RestoreConfig_AllNamespaces) isRestoreConfig_NamespacedResourceRestoreScope() {}

func (*RestoreConfig_SelectedNamespaces) isRestoreConfig_NamespacedResourceRestoreScope() {}

func (*RestoreConfig_SelectedApplications) isRestoreConfig_NamespacedResourceRestoreScope() {}

// The configuration of a potential series of Restore operations to be performed
// against Backups belong to a particular BackupPlan.
// Next id: 13
type RestorePlan struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Output only. The full name of the RestorePlan resource.
	// Format: `projects/*/locations/*/restorePlans/*`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Server generated global unique identifier of
	// [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// Output only. The timestamp when this RestorePlan resource was
	// created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The timestamp when this RestorePlan resource was last
	// updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// User specified descriptive string for this RestorePlan.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Required. Immutable. A reference to the
	// [BackupPlan][google.cloud.gkebackup.v1.BackupPlan] from which Backups may
	// be used as the source for Restores created via this RestorePlan. Format:
	// `projects/*/locations/*/backupPlans/*`.
	BackupPlan string `protobuf:"bytes,6,opt,name=backup_plan,json=backupPlan,proto3" json:"backup_plan,omitempty"`
	// Required. Immutable. The target cluster into which Restores created via
	// this RestorePlan will restore data. NOTE: the cluster's region must be the
	// same as the RestorePlan. Valid formats:
	//
	//   - `projects/*/locations/*/clusters/*`
	//   - `projects/*/zones/*/clusters/*`
	Cluster string `protobuf:"bytes,7,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Required. Configuration of Restores created via this RestorePlan.
	RestoreConfig *RestoreConfig `protobuf:"bytes,8,opt,name=restore_config,json=restoreConfig,proto3" json:"restore_config,omitempty"`
	// A set of custom labels supplied by user.
	Labels map[string]string `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Output only. `etag` is used for optimistic concurrency control as a way to
	// help prevent simultaneous updates of a restore from overwriting each other.
	// It is strongly suggested that systems make use of the `etag` in the
	// read-modify-write cycle to perform restore updates in order to avoid
	// race conditions: An `etag` is returned in the response to `GetRestorePlan`,
	// and systems are expected to put that etag in the request to
	// `UpdateRestorePlan` or `DeleteRestorePlan` to ensure that their change
	// will be applied to the same version of the resource.
	Etag          string `protobuf:"bytes,10,opt,name=etag,proto3" json:"etag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestorePlan) Reset() {
	*x = RestorePlan{}
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestorePlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestorePlan) ProtoMessage() {}

func (x *RestorePlan) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestorePlan.ProtoReflect.Descriptor instead.
func (*RestorePlan) Descriptor() ([]byte, []int) {
	return file_cloud_gkebackup_v1_data_proto_rawDescGZIP(), []int{8}
}

func (x *RestorePlan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RestorePlan) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *RestorePlan) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *RestorePlan) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *RestorePlan) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RestorePlan) GetBackupPlan() string {
	if x != nil {
		return x.BackupPlan
	}
	return ""
}

func (x *RestorePlan) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *RestorePlan) GetRestoreConfig() *RestoreConfig {
	if x != nil {
		return x.RestoreConfig
	}
	return nil
}

func (x *RestorePlan) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *RestorePlan) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

// The data within all RestorePlan events.
type RestorePlanEventData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The RestorePlan event payload. Unset for deletion events.
	Payload       *RestorePlan `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestorePlanEventData) Reset() {
	*x = RestorePlanEventData{}
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestorePlanEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestorePlanEventData) ProtoMessage() {}

func (x *RestorePlanEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestorePlanEventData.ProtoReflect.Descriptor instead.
func (*RestorePlanEventData) Descriptor() ([]byte, []int) {
	return file_cloud_gkebackup_v1_data_proto_rawDescGZIP(), []int{9}
}

func (x *RestorePlanEventData) GetPayload() *RestorePlan {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all Backup events.
type BackupEventData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The Backup event payload. Unset for deletion events.
	Payload       *Backup `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackupEventData) Reset() {
	*x = BackupEventData{}
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupEventData) ProtoMessage() {}

func (x *BackupEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupEventData.ProtoReflect.Descriptor instead.
func (*BackupEventData) Descriptor() ([]byte, []int) {
	return file_cloud_gkebackup_v1_data_proto_rawDescGZIP(), []int{10}
}

func (x *BackupEventData) GetPayload() *Backup {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all BackupPlan events.
type BackupPlanEventData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The BackupPlan event payload. Unset for deletion events.
	Payload       *BackupPlan `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackupPlanEventData) Reset() {
	*x = BackupPlanEventData{}
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupPlanEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupPlanEventData) ProtoMessage() {}

func (x *BackupPlanEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupPlanEventData.ProtoReflect.Descriptor instead.
func (*BackupPlanEventData) Descriptor() ([]byte, []int) {
	return file_cloud_gkebackup_v1_data_proto_rawDescGZIP(), []int{11}
}

func (x *BackupPlanEventData) GetPayload() *BackupPlan {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all Restore events.
type RestoreEventData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The Restore event payload. Unset for deletion events.
	Payload       *Restore `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestoreEventData) Reset() {
	*x = RestoreEventData{}
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreEventData) ProtoMessage() {}

func (x *RestoreEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreEventData.ProtoReflect.Descriptor instead.
func (*RestoreEventData) Descriptor() ([]byte, []int) {
	return file_cloud_gkebackup_v1_data_proto_rawDescGZIP(), []int{12}
}

func (x *RestoreEventData) GetPayload() *Restore {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Information about the GKE cluster from which this Backup was created.
type Backup_ClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The source cluster from which this Backup was created.
	// Valid formats:
	//
	//   - `projects/*/locations/*/clusters/*`
	//   - `projects/*/zones/*/clusters/*`
	//
	// This is inherited from the parent BackupPlan's
	// [cluster][google.cloud.gkebackup.v1.BackupPlan.cluster] field.
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// The Kubernetes server version of the source cluster.
	K8SVersion string `protobuf:"bytes,2,opt,name=k8s_version,json=k8sVersion,proto3" json:"k8s_version,omitempty"`
	// A list of the Backup for GKE CRD versions found in the cluster.
	BackupCrdVersions map[string]string `protobuf:"bytes,3,rep,name=backup_crd_versions,json=backupCrdVersions,proto3" json:"backup_crd_versions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Platform-specific version
	//
	// Types that are valid to be assigned to PlatformVersion:
	//
	//	*Backup_ClusterMetadata_GkeVersion
	//	*Backup_ClusterMetadata_AnthosVersion
	PlatformVersion isBackup_ClusterMetadata_PlatformVersion `protobuf_oneof:"platform_version"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Backup_ClusterMetadata) Reset() {
	*x = Backup_ClusterMetadata{}
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Backup_ClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_ClusterMetadata) ProtoMessage() {}

func (x *Backup_ClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_ClusterMetadata.ProtoReflect.Descriptor instead.
func (*Backup_ClusterMetadata) Descriptor() ([]byte, []int) {
	return file_cloud_gkebackup_v1_data_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Backup_ClusterMetadata) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *Backup_ClusterMetadata) GetK8SVersion() string {
	if x != nil {
		return x.K8SVersion
	}
	return ""
}

func (x *Backup_ClusterMetadata) GetBackupCrdVersions() map[string]string {
	if x != nil {
		return x.BackupCrdVersions
	}
	return nil
}

func (x *Backup_ClusterMetadata) GetPlatformVersion() isBackup_ClusterMetadata_PlatformVersion {
	if x != nil {
		return x.PlatformVersion
	}
	return nil
}

func (x *Backup_ClusterMetadata) GetGkeVersion() string {
	if x != nil {
		if x, ok := x.PlatformVersion.(*Backup_ClusterMetadata_GkeVersion); ok {
			return x.GkeVersion
		}
	}
	return ""
}

func (x *Backup_ClusterMetadata) GetAnthosVersion() string {
	if x != nil {
		if x, ok := x.PlatformVersion.(*Backup_ClusterMetadata_AnthosVersion); ok {
			return x.AnthosVersion
		}
	}
	return ""
}

type isBackup_ClusterMetadata_PlatformVersion interface {
	isBackup_ClusterMetadata_PlatformVersion()
}

type Backup_ClusterMetadata_GkeVersion struct {
	// GKE version
	GkeVersion string `protobuf:"bytes,4,opt,name=gke_version,json=gkeVersion,proto3,oneof"`
}

type Backup_ClusterMetadata_AnthosVersion struct {
	// Anthos version
	AnthosVersion string `protobuf:"bytes,5,opt,name=anthos_version,json=anthosVersion,proto3,oneof"`
}

func (*Backup_ClusterMetadata_GkeVersion) isBackup_ClusterMetadata_PlatformVersion() {}

func (*Backup_ClusterMetadata_AnthosVersion) isBackup_ClusterMetadata_PlatformVersion() {}

// RetentionPolicy defines a Backup retention policy for a BackupPlan.
type BackupPlan_RetentionPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Minimum age for Backups created via this BackupPlan (in days).
	// This field MUST be an integer value between 0-90 (inclusive).
	// A Backup created under this BackupPlan will NOT be deletable until it
	// reaches Backup's (create_time + backup_delete_lock_days).
	// Updating this field of a BackupPlan does NOT affect existing Backups
	// under it. Backups created AFTER a successful update will inherit
	// the new value.
	//
	// Default: 0 (no delete blocking)
	BackupDeleteLockDays int32 `protobuf:"varint,1,opt,name=backup_delete_lock_days,json=backupDeleteLockDays,proto3" json:"backup_delete_lock_days,omitempty"`
	// The default maximum age of a Backup created via this BackupPlan.
	// This field MUST be an integer value >= 0 and <= 365.
	// If specified, a Backup created under this BackupPlan will be
	// automatically deleted after its age reaches (create_time +
	// backup_retain_days).
	// If not specified, Backups created under this BackupPlan will NOT be
	// subject to automatic deletion.
	// Updating this field does NOT affect existing Backups under it. Backups
	// created AFTER a successful update will automatically pick up the new
	// value.
	// NOTE: backup_retain_days must be >=
	// [backup_delete_lock_days][google.cloud.gkebackup.v1.BackupPlan.RetentionPolicy.backup_delete_lock_days].
	// If
	// [cron_schedule][google.cloud.gkebackup.v1.BackupPlan.Schedule.cron_schedule]
	// is defined, then this must be
	// <= 360 * the creation interval.
	//
	// Default: 0 (no automatic deletion)
	BackupRetainDays int32 `protobuf:"varint,2,opt,name=backup_retain_days,json=backupRetainDays,proto3" json:"backup_retain_days,omitempty"`
	// This flag denotes whether the retention policy of this BackupPlan is
	// locked.  If set to True, no further update is allowed on this policy,
	// including the `locked` field itself.
	//
	// Default: False
	Locked        bool `protobuf:"varint,3,opt,name=locked,proto3" json:"locked,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackupPlan_RetentionPolicy) Reset() {
	*x = BackupPlan_RetentionPolicy{}
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupPlan_RetentionPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupPlan_RetentionPolicy) ProtoMessage() {}

func (x *BackupPlan_RetentionPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupPlan_RetentionPolicy.ProtoReflect.Descriptor instead.
func (*BackupPlan_RetentionPolicy) Descriptor() ([]byte, []int) {
	return file_cloud_gkebackup_v1_data_proto_rawDescGZIP(), []int{5, 0}
}

func (x *BackupPlan_RetentionPolicy) GetBackupDeleteLockDays() int32 {
	if x != nil {
		return x.BackupDeleteLockDays
	}
	return 0
}

func (x *BackupPlan_RetentionPolicy) GetBackupRetainDays() int32 {
	if x != nil {
		return x.BackupRetainDays
	}
	return 0
}

func (x *BackupPlan_RetentionPolicy) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

// Schedule defines scheduling parameters for automatically creating Backups
// via this BackupPlan.
type BackupPlan_Schedule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A standard [cron](https://wikipedia.com/wiki/cron) string that defines a
	// repeating schedule for creating Backups via this BackupPlan. If this is
	// defined, then
	// [backup_retain_days][google.cloud.gkebackup.v1.BackupPlan.RetentionPolicy.backup_retain_days]
	// must also be defined.
	//
	// Default (empty): no automatic backup creation will occur.
	CronSchedule string `protobuf:"bytes,1,opt,name=cron_schedule,json=cronSchedule,proto3" json:"cron_schedule,omitempty"`
	// This flag denotes whether automatic Backup creation is paused for this
	// BackupPlan.
	//
	// Default: False
	Paused        bool `protobuf:"varint,2,opt,name=paused,proto3" json:"paused,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackupPlan_Schedule) Reset() {
	*x = BackupPlan_Schedule{}
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupPlan_Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupPlan_Schedule) ProtoMessage() {}

func (x *BackupPlan_Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupPlan_Schedule.ProtoReflect.Descriptor instead.
func (*BackupPlan_Schedule) Descriptor() ([]byte, []int) {
	return file_cloud_gkebackup_v1_data_proto_rawDescGZIP(), []int{5, 1}
}

func (x *BackupPlan_Schedule) GetCronSchedule() string {
	if x != nil {
		return x.CronSchedule
	}
	return ""
}

func (x *BackupPlan_Schedule) GetPaused() bool {
	if x != nil {
		return x.Paused
	}
	return false
}

// BackupConfig defines the configuration of Backups created via this
// BackupPlan.
type BackupPlan_BackupConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This defines the "scope" of the Backup - which namespaced
	// resources in the cluster will be included in a Backup.
	// Exactly one of the fields of backup_scope MUST be specified.
	//
	// Types that are valid to be assigned to BackupScope:
	//
	//	*BackupPlan_BackupConfig_AllNamespaces
	//	*BackupPlan_BackupConfig_SelectedNamespaces
	//	*BackupPlan_BackupConfig_SelectedApplications
	BackupScope isBackupPlan_BackupConfig_BackupScope `protobuf_oneof:"backup_scope"`
	// This flag specifies whether volume data should be backed up when
	// PVCs are included in the scope of a Backup.
	//
	// Default: False
	IncludeVolumeData bool `protobuf:"varint,4,opt,name=include_volume_data,json=includeVolumeData,proto3" json:"include_volume_data,omitempty"`
	// This flag specifies whether Kubernetes Secret resources should be
	// included when they fall into the scope of Backups.
	//
	// Default: False
	IncludeSecrets bool `protobuf:"varint,5,opt,name=include_secrets,json=includeSecrets,proto3" json:"include_secrets,omitempty"`
	// This defines a customer managed encryption key that will be used to
	// encrypt the "config" portion (the Kubernetes resources) of Backups
	// created via this plan.
	//
	// Default (empty): Config backup artifacts will not be encrypted.
	EncryptionKey *EncryptionKey `protobuf:"bytes,6,opt,name=encryption_key,json=encryptionKey,proto3" json:"encryption_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackupPlan_BackupConfig) Reset() {
	*x = BackupPlan_BackupConfig{}
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupPlan_BackupConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupPlan_BackupConfig) ProtoMessage() {}

func (x *BackupPlan_BackupConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupPlan_BackupConfig.ProtoReflect.Descriptor instead.
func (*BackupPlan_BackupConfig) Descriptor() ([]byte, []int) {
	return file_cloud_gkebackup_v1_data_proto_rawDescGZIP(), []int{5, 2}
}

func (x *BackupPlan_BackupConfig) GetBackupScope() isBackupPlan_BackupConfig_BackupScope {
	if x != nil {
		return x.BackupScope
	}
	return nil
}

func (x *BackupPlan_BackupConfig) GetAllNamespaces() bool {
	if x != nil {
		if x, ok := x.BackupScope.(*BackupPlan_BackupConfig_AllNamespaces); ok {
			return x.AllNamespaces
		}
	}
	return false
}

func (x *BackupPlan_BackupConfig) GetSelectedNamespaces() *Namespaces {
	if x != nil {
		if x, ok := x.BackupScope.(*BackupPlan_BackupConfig_SelectedNamespaces); ok {
			return x.SelectedNamespaces
		}
	}
	return nil
}

func (x *BackupPlan_BackupConfig) GetSelectedApplications() *NamespacedNames {
	if x != nil {
		if x, ok := x.BackupScope.(*BackupPlan_BackupConfig_SelectedApplications); ok {
			return x.SelectedApplications
		}
	}
	return nil
}

func (x *BackupPlan_BackupConfig) GetIncludeVolumeData() bool {
	if x != nil {
		return x.IncludeVolumeData
	}
	return false
}

func (x *BackupPlan_BackupConfig) GetIncludeSecrets() bool {
	if x != nil {
		return x.IncludeSecrets
	}
	return false
}

func (x *BackupPlan_BackupConfig) GetEncryptionKey() *EncryptionKey {
	if x != nil {
		return x.EncryptionKey
	}
	return nil
}

type isBackupPlan_BackupConfig_BackupScope interface {
	isBackupPlan_BackupConfig_BackupScope()
}

type BackupPlan_BackupConfig_AllNamespaces struct {
	// If True, include all namespaced resources
	AllNamespaces bool `protobuf:"varint,1,opt,name=all_namespaces,json=allNamespaces,proto3,oneof"`
}

type BackupPlan_BackupConfig_SelectedNamespaces struct {
	// If set, include just the resources in the listed namespaces.
	SelectedNamespaces *Namespaces `protobuf:"bytes,2,opt,name=selected_namespaces,json=selectedNamespaces,proto3,oneof"`
}

type BackupPlan_BackupConfig_SelectedApplications struct {
	// If set, include just the resources referenced by the listed
	// ProtectedApplications.
	SelectedApplications *NamespacedNames `protobuf:"bytes,3,opt,name=selected_applications,json=selectedApplications,proto3,oneof"`
}

func (*BackupPlan_BackupConfig_AllNamespaces) isBackupPlan_BackupConfig_BackupScope() {}

func (*BackupPlan_BackupConfig_SelectedNamespaces) isBackupPlan_BackupConfig_BackupScope() {}

func (*BackupPlan_BackupConfig_SelectedApplications) isBackupPlan_BackupConfig_BackupScope() {}

// This is a direct map to the Kubernetes GroupKind type
// [GroupKind](https://godoc.org/k8s.io/apimachinery/pkg/runtime/schema#GroupKind)
// and is used for identifying specific "types" of resources to restore.
type RestoreConfig_GroupKind struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// API group string of a Kubernetes resource, e.g.
	// "apiextensions.k8s.io", "storage.k8s.io", etc.
	// Note: use empty string for core API group
	ResourceGroup string `protobuf:"bytes,1,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	// Kind of a Kubernetes resource, e.g.
	// "CustomResourceDefinition", "StorageClass", etc.
	ResourceKind  string `protobuf:"bytes,2,opt,name=resource_kind,json=resourceKind,proto3" json:"resource_kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestoreConfig_GroupKind) Reset() {
	*x = RestoreConfig_GroupKind{}
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreConfig_GroupKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreConfig_GroupKind) ProtoMessage() {}

func (x *RestoreConfig_GroupKind) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreConfig_GroupKind.ProtoReflect.Descriptor instead.
func (*RestoreConfig_GroupKind) Descriptor() ([]byte, []int) {
	return file_cloud_gkebackup_v1_data_proto_rawDescGZIP(), []int{7, 0}
}

func (x *RestoreConfig_GroupKind) GetResourceGroup() string {
	if x != nil {
		return x.ResourceGroup
	}
	return ""
}

func (x *RestoreConfig_GroupKind) GetResourceKind() string {
	if x != nil {
		return x.ResourceKind
	}
	return ""
}

// Defines the scope of cluster-scoped resources to restore.
//
// Some group kinds are not reasonable choices for a restore, and will cause
// an error if selected here. Any scope selection that would restore
// "all valid" resources automatically excludes these group kinds.
// - gkebackup.gke.io/BackupJob
// - gkebackup.gke.io/RestoreJob
// - metrics.k8s.io/NodeMetrics
// - migration.k8s.io/StorageState
// - migration.k8s.io/StorageVersionMigration
// - Node
// - snapshot.storage.k8s.io/VolumeSnapshotContent
// - storage.k8s.io/CSINode
//
// Some group kinds are driven by restore configuration elsewhere,
// and will cause an error if selected here.
// - Namespace
// - PersistentVolume
type RestoreConfig_ClusterResourceRestoreScope struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of cluster-scoped resource group kinds to restore from the
	// backup. If specified, only the selected resources will be restored.
	// Mutually exclusive to any other field in the message.
	SelectedGroupKinds []*RestoreConfig_GroupKind `protobuf:"bytes,1,rep,name=selected_group_kinds,json=selectedGroupKinds,proto3" json:"selected_group_kinds,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *RestoreConfig_ClusterResourceRestoreScope) Reset() {
	*x = RestoreConfig_ClusterResourceRestoreScope{}
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreConfig_ClusterResourceRestoreScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreConfig_ClusterResourceRestoreScope) ProtoMessage() {}

func (x *RestoreConfig_ClusterResourceRestoreScope) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreConfig_ClusterResourceRestoreScope.ProtoReflect.Descriptor instead.
func (*RestoreConfig_ClusterResourceRestoreScope) Descriptor() ([]byte, []int) {
	return file_cloud_gkebackup_v1_data_proto_rawDescGZIP(), []int{7, 1}
}

func (x *RestoreConfig_ClusterResourceRestoreScope) GetSelectedGroupKinds() []*RestoreConfig_GroupKind {
	if x != nil {
		return x.SelectedGroupKinds
	}
	return nil
}

// A transformation rule to be applied against Kubernetes resources as they
// are selected for restoration from a Backup. A rule contains both filtering
// logic (which resources are subject to substitution) and substitution logic.
type RestoreConfig_SubstitutionRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// (Filtering parameter) Any resource subject to substitution must be
	// contained within one of the listed Kubernetes Namespace in the Backup.
	// If this field is not provided, no namespace filtering will be performed
	// (all resources in all Namespaces, including all cluster-scoped resources,
	// will be candidates for substitution).
	// To mix cluster-scoped and namespaced resources in the same rule, use an
	// empty string ("") as one of the target namespaces.
	TargetNamespaces []string `protobuf:"bytes,1,rep,name=target_namespaces,json=targetNamespaces,proto3" json:"target_namespaces,omitempty"`
	// (Filtering parameter) Any resource subject to substitution must belong to
	// one of the listed "types".
	// If this field is not provided, no type filtering will be performed (all
	// resources of all types matching previous filtering parameters will be
	// candidates for substitution).
	TargetGroupKinds []*RestoreConfig_GroupKind `protobuf:"bytes,2,rep,name=target_group_kinds,json=targetGroupKinds,proto3" json:"target_group_kinds,omitempty"`
	// Required. This is a [JSONPath]
	// (https://kubernetes.io/docs/reference/kubectl/jsonpath/)
	// expression that matches specific fields of candidate
	// resources and it operates as both a filtering parameter (resources that
	// are not matched with this expression will not be candidates for
	// substitution) as well as a field identifier (identifies exactly which
	// fields out of the candidate resources will be modified).
	TargetJsonPath string `protobuf:"bytes,3,opt,name=target_json_path,json=targetJsonPath,proto3" json:"target_json_path,omitempty"`
	// (Filtering parameter) This is a [regular expression]
	// (https://en.wikipedia.org/wiki/Regular_expression)
	// that is compared against the fields matched by the target_json_path
	// expression (and must also have passed the previous filters).
	// Substitution will not be performed against fields whose
	// value does not match this expression. If this field is NOT specified,
	// then ALL fields matched by the target_json_path expression will undergo
	// substitution. Note that an empty (e.g., "", rather than unspecified)
	// value for this field will only match empty fields.
	OriginalValuePattern string `protobuf:"bytes,4,opt,name=original_value_pattern,json=originalValuePattern,proto3" json:"original_value_pattern,omitempty"`
	// This is the new value to set for any fields that pass the filtering and
	// selection criteria. To remove a value from a Kubernetes resource, either
	// leave this field unspecified, or set it to the empty string ("").
	NewValue      string `protobuf:"bytes,5,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestoreConfig_SubstitutionRule) Reset() {
	*x = RestoreConfig_SubstitutionRule{}
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreConfig_SubstitutionRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreConfig_SubstitutionRule) ProtoMessage() {}

func (x *RestoreConfig_SubstitutionRule) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_gkebackup_v1_data_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreConfig_SubstitutionRule.ProtoReflect.Descriptor instead.
func (*RestoreConfig_SubstitutionRule) Descriptor() ([]byte, []int) {
	return file_cloud_gkebackup_v1_data_proto_rawDescGZIP(), []int{7, 2}
}

func (x *RestoreConfig_SubstitutionRule) GetTargetNamespaces() []string {
	if x != nil {
		return x.TargetNamespaces
	}
	return nil
}

func (x *RestoreConfig_SubstitutionRule) GetTargetGroupKinds() []*RestoreConfig_GroupKind {
	if x != nil {
		return x.TargetGroupKinds
	}
	return nil
}

func (x *RestoreConfig_SubstitutionRule) GetTargetJsonPath() string {
	if x != nil {
		return x.TargetJsonPath
	}
	return ""
}

func (x *RestoreConfig_SubstitutionRule) GetOriginalValuePattern() string {
	if x != nil {
		return x.OriginalValuePattern
	}
	return ""
}

func (x *RestoreConfig_SubstitutionRule) GetNewValue() string {
	if x != nil {
		return x.NewValue
	}
	return ""
}

var File_cloud_gkebackup_v1_data_proto protoreflect.FileDescriptor

const file_cloud_gkebackup_v1_data_proto_rawDesc = "" +
	"\n" +
	"\x1dcloud/gkebackup/v1/data.proto\x12 google.events.cloud.gkebackup.v1\x1a\x1fgoogle/protobuf/timestamp.proto\",\n" +
	"\n" +
	"Namespaces\x12\x1e\n" +
	"\n" +
	"namespaces\x18\x01 \x03(\tR\n" +
	"namespaces\"B\n" +
	"\x0eNamespacedName\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"n\n" +
	"\x0fNamespacedNames\x12[\n" +
	"\x10namespaced_names\x18\x01 \x03(\v20.google.events.cloud.gkebackup.v1.NamespacedNameR\x0fnamespacedNames\"D\n" +
	"\rEncryptionKey\x123\n" +
	"\x16gcp_kms_encryption_key\x18\x01 \x01(\tR\x13gcpKmsEncryptionKey\"\xcc\x0f\n" +
	"\x06Backup\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x10\n" +
	"\x03uid\x18\x02 \x01(\tR\x03uid\x12;\n" +
	"\vcreate_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12\x16\n" +
	"\x06manual\x18\x05 \x01(\bR\x06manual\x12L\n" +
	"\x06labels\x18\x06 \x03(\v24.google.events.cloud.gkebackup.v1.Backup.LabelsEntryR\x06labels\x12(\n" +
	"\x10delete_lock_days\x18\a \x01(\x05R\x0edeleteLockDays\x12Q\n" +
	"\x17delete_lock_expire_time\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\x14deleteLockExpireTime\x12\x1f\n" +
	"\vretain_days\x18\t \x01(\x05R\n" +
	"retainDays\x12H\n" +
	"\x12retain_expire_time\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\x10retainExpireTime\x12V\n" +
	"\x0eencryption_key\x18\v \x01(\v2/.google.events.cloud.gkebackup.v1.EncryptionKeyR\rencryptionKey\x12'\n" +
	"\x0eall_namespaces\x18\f \x01(\bH\x00R\rallNamespaces\x12_\n" +
	"\x13selected_namespaces\x18\r \x01(\v2,.google.events.cloud.gkebackup.v1.NamespacesH\x00R\x12selectedNamespaces\x12h\n" +
	"\x15selected_applications\x18\x0e \x01(\v21.google.events.cloud.gkebackup.v1.NamespacedNamesH\x00R\x14selectedApplications\x120\n" +
	"\x14contains_volume_data\x18\x0f \x01(\bR\x12containsVolumeData\x12)\n" +
	"\x10contains_secrets\x18\x10 \x01(\bR\x0fcontainsSecrets\x12c\n" +
	"\x10cluster_metadata\x18\x11 \x01(\v28.google.events.cloud.gkebackup.v1.Backup.ClusterMetadataR\x0fclusterMetadata\x12D\n" +
	"\x05state\x18\x12 \x01(\x0e2..google.events.cloud.gkebackup.v1.Backup.StateR\x05state\x12!\n" +
	"\fstate_reason\x18\x13 \x01(\tR\vstateReason\x12?\n" +
	"\rcomplete_time\x18\x14 \x01(\v2\x1a.google.protobuf.TimestampR\fcompleteTime\x12%\n" +
	"\x0eresource_count\x18\x15 \x01(\x05R\rresourceCount\x12!\n" +
	"\fvolume_count\x18\x16 \x01(\x05R\vvolumeCount\x12\x1d\n" +
	"\n" +
	"size_bytes\x18\x17 \x01(\x03R\tsizeBytes\x12\x12\n" +
	"\x04etag\x18\x18 \x01(\tR\x04etag\x12 \n" +
	"\vdescription\x18\x19 \x01(\tR\vdescription\x12\x1b\n" +
	"\tpod_count\x18\x1a \x01(\x05R\bpodCount\x127\n" +
	"\x18config_backup_size_bytes\x18\x1b \x01(\x03R\x15configBackupSizeBytes\x1a\xf3\x02\n" +
	"\x0fClusterMetadata\x12\x18\n" +
	"\acluster\x18\x01 \x01(\tR\acluster\x12\x1f\n" +
	"\vk8s_version\x18\x02 \x01(\tR\n" +
	"k8sVersion\x12\x7f\n" +
	"\x13backup_crd_versions\x18\x03 \x03(\v2O.google.events.cloud.gkebackup.v1.Backup.ClusterMetadata.BackupCrdVersionsEntryR\x11backupCrdVersions\x12!\n" +
	"\vgke_version\x18\x04 \x01(\tH\x00R\n" +
	"gkeVersion\x12'\n" +
	"\x0eanthos_version\x18\x05 \x01(\tH\x00R\ranthosVersion\x1aD\n" +
	"\x16BackupCrdVersionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x12\n" +
	"\x10platform_version\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"f\n" +
	"\x05State\x12\x15\n" +
	"\x11STATE_UNSPECIFIED\x10\x00\x12\f\n" +
	"\bCREATING\x10\x01\x12\x0f\n" +
	"\vIN_PROGRESS\x10\x02\x12\r\n" +
	"\tSUCCEEDED\x10\x03\x12\n" +
	"\n" +
	"\x06FAILED\x10\x04\x12\f\n" +
	"\bDELETING\x10\x05B\x0e\n" +
	"\fbackup_scope\"\xa4\v\n" +
	"\n" +
	"BackupPlan\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x10\n" +
	"\x03uid\x18\x02 \x01(\tR\x03uid\x12;\n" +
	"\vcreate_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12\x18\n" +
	"\acluster\x18\x06 \x01(\tR\acluster\x12g\n" +
	"\x10retention_policy\x18\a \x01(\v2<.google.events.cloud.gkebackup.v1.BackupPlan.RetentionPolicyR\x0fretentionPolicy\x12P\n" +
	"\x06labels\x18\b \x03(\v28.google.events.cloud.gkebackup.v1.BackupPlan.LabelsEntryR\x06labels\x12^\n" +
	"\x0fbackup_schedule\x18\t \x01(\v25.google.events.cloud.gkebackup.v1.BackupPlan.ScheduleR\x0ebackupSchedule\x12\x12\n" +
	"\x04etag\x18\n" +
	" \x01(\tR\x04etag\x12 \n" +
	"\vdeactivated\x18\v \x01(\bR\vdeactivated\x12^\n" +
	"\rbackup_config\x18\f \x01(\v29.google.events.cloud.gkebackup.v1.BackupPlan.BackupConfigR\fbackupConfig\x12.\n" +
	"\x13protected_pod_count\x18\r \x01(\x05R\x11protectedPodCount\x1a\x8e\x01\n" +
	"\x0fRetentionPolicy\x125\n" +
	"\x17backup_delete_lock_days\x18\x01 \x01(\x05R\x14backupDeleteLockDays\x12,\n" +
	"\x12backup_retain_days\x18\x02 \x01(\x05R\x10backupRetainDays\x12\x16\n" +
	"\x06locked\x18\x03 \x01(\bR\x06locked\x1aG\n" +
	"\bSchedule\x12#\n" +
	"\rcron_schedule\x18\x01 \x01(\tR\fcronSchedule\x12\x16\n" +
	"\x06paused\x18\x02 \x01(\bR\x06paused\x1a\xc3\x03\n" +
	"\fBackupConfig\x12'\n" +
	"\x0eall_namespaces\x18\x01 \x01(\bH\x00R\rallNamespaces\x12_\n" +
	"\x13selected_namespaces\x18\x02 \x01(\v2,.google.events.cloud.gkebackup.v1.NamespacesH\x00R\x12selectedNamespaces\x12h\n" +
	"\x15selected_applications\x18\x03 \x01(\v21.google.events.cloud.gkebackup.v1.NamespacedNamesH\x00R\x14selectedApplications\x12.\n" +
	"\x13include_volume_data\x18\x04 \x01(\bR\x11includeVolumeData\x12'\n" +
	"\x0finclude_secrets\x18\x05 \x01(\bR\x0eincludeSecrets\x12V\n" +
	"\x0eencryption_key\x18\x06 \x01(\v2/.google.events.cloud.gkebackup.v1.EncryptionKeyR\rencryptionKeyB\x0e\n" +
	"\fbackup_scope\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xe6\a\n" +
	"\aRestore\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x10\n" +
	"\x03uid\x18\x02 \x01(\tR\x03uid\x12;\n" +
	"\vcreate_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12\x16\n" +
	"\x06backup\x18\x06 \x01(\tR\x06backup\x12\x18\n" +
	"\acluster\x18\a \x01(\tR\acluster\x12V\n" +
	"\x0erestore_config\x18\b \x01(\v2/.google.events.cloud.gkebackup.v1.RestoreConfigR\rrestoreConfig\x12M\n" +
	"\x06labels\x18\t \x03(\v25.google.events.cloud.gkebackup.v1.Restore.LabelsEntryR\x06labels\x12E\n" +
	"\x05state\x18\n" +
	" \x01(\x0e2/.google.events.cloud.gkebackup.v1.Restore.StateR\x05state\x12!\n" +
	"\fstate_reason\x18\v \x01(\tR\vstateReason\x12?\n" +
	"\rcomplete_time\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\fcompleteTime\x128\n" +
	"\x18resources_restored_count\x18\r \x01(\x05R\x16resourcesRestoredCount\x128\n" +
	"\x18resources_excluded_count\x18\x0e \x01(\x05R\x16resourcesExcludedCount\x124\n" +
	"\x16resources_failed_count\x18\x0f \x01(\x05R\x14resourcesFailedCount\x124\n" +
	"\x16volumes_restored_count\x18\x10 \x01(\x05R\x14volumesRestoredCount\x12\x12\n" +
	"\x04etag\x18\x11 \x01(\tR\x04etag\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"f\n" +
	"\x05State\x12\x15\n" +
	"\x11STATE_UNSPECIFIED\x10\x00\x12\f\n" +
	"\bCREATING\x10\x01\x12\x0f\n" +
	"\vIN_PROGRESS\x10\x02\x12\r\n" +
	"\tSUCCEEDED\x10\x03\x12\n" +
	"\n" +
	"\x06FAILED\x10\x04\x12\f\n" +
	"\bDELETING\x10\x05\"\xac\x0f\n" +
	"\rRestoreConfig\x12\x84\x01\n" +
	"\x1avolume_data_restore_policy\x18\x01 \x01(\x0e2G.google.events.cloud.gkebackup.v1.RestoreConfig.VolumeDataRestorePolicyR\x17volumeDataRestorePolicy\x12\x96\x01\n" +
	" cluster_resource_conflict_policy\x18\x02 \x01(\x0e2M.google.events.cloud.gkebackup.v1.RestoreConfig.ClusterResourceConflictPolicyR\x1dclusterResourceConflictPolicy\x12\x96\x01\n" +
	" namespaced_resource_restore_mode\x18\x03 \x01(\x0e2M.google.events.cloud.gkebackup.v1.RestoreConfig.NamespacedResourceRestoreModeR\x1dnamespacedResourceRestoreMode\x12\x90\x01\n" +
	"\x1ecluster_resource_restore_scope\x18\x04 \x01(\v2K.google.events.cloud.gkebackup.v1.RestoreConfig.ClusterResourceRestoreScopeR\x1bclusterResourceRestoreScope\x12'\n" +
	"\x0eall_namespaces\x18\x05 \x01(\bH\x00R\rallNamespaces\x12_\n" +
	"\x13selected_namespaces\x18\x06 \x01(\v2,.google.events.cloud.gkebackup.v1.NamespacesH\x00R\x12selectedNamespaces\x12h\n" +
	"\x15selected_applications\x18\a \x01(\v21.google.events.cloud.gkebackup.v1.NamespacedNamesH\x00R\x14selectedApplications\x12o\n" +
	"\x12substitution_rules\x18\b \x03(\v2@.google.events.cloud.gkebackup.v1.RestoreConfig.SubstitutionRuleR\x11substitutionRules\x1aW\n" +
	"\tGroupKind\x12%\n" +
	"\x0eresource_group\x18\x01 \x01(\tR\rresourceGroup\x12#\n" +
	"\rresource_kind\x18\x02 \x01(\tR\fresourceKind\x1a\x8a\x01\n" +
	"\x1bClusterResourceRestoreScope\x12k\n" +
	"\x14selected_group_kinds\x18\x01 \x03(\v29.google.events.cloud.gkebackup.v1.RestoreConfig.GroupKindR\x12selectedGroupKinds\x1a\xa5\x02\n" +
	"\x10SubstitutionRule\x12+\n" +
	"\x11target_namespaces\x18\x01 \x03(\tR\x10targetNamespaces\x12g\n" +
	"\x12target_group_kinds\x18\x02 \x03(\v29.google.events.cloud.gkebackup.v1.RestoreConfig.GroupKindR\x10targetGroupKinds\x12(\n" +
	"\x10target_json_path\x18\x03 \x01(\tR\x0etargetJsonPath\x124\n" +
	"\x16original_value_pattern\x18\x04 \x01(\tR\x14originalValuePattern\x12\x1b\n" +
	"\tnew_value\x18\x05 \x01(\tR\bnewValue\"\xaf\x01\n" +
	"\x17VolumeDataRestorePolicy\x12*\n" +
	"&VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED\x10\x00\x12#\n" +
	"\x1fRESTORE_VOLUME_DATA_FROM_BACKUP\x10\x01\x12#\n" +
	"\x1fREUSE_VOLUME_HANDLE_FROM_BACKUP\x10\x02\x12\x1e\n" +
	"\x1aNO_VOLUME_DATA_RESTORATION\x10\x03\"\x83\x01\n" +
	"\x1dClusterResourceConflictPolicy\x120\n" +
	",CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14USE_EXISTING_VERSION\x10\x01\x12\x16\n" +
	"\x12USE_BACKUP_VERSION\x10\x02\"\x7f\n" +
	"\x1dNamespacedResourceRestoreMode\x120\n" +
	",NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12DELETE_AND_RESTORE\x10\x01\x12\x14\n" +
	"\x10FAIL_ON_CONFLICT\x10\x02B#\n" +
	"!namespaced_resource_restore_scope\"\x84\x04\n" +
	"\vRestorePlan\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x10\n" +
	"\x03uid\x18\x02 \x01(\tR\x03uid\x12;\n" +
	"\vcreate_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12\x1f\n" +
	"\vbackup_plan\x18\x06 \x01(\tR\n" +
	"backupPlan\x12\x18\n" +
	"\acluster\x18\a \x01(\tR\acluster\x12V\n" +
	"\x0erestore_config\x18\b \x01(\v2/.google.events.cloud.gkebackup.v1.RestoreConfigR\rrestoreConfig\x12Q\n" +
	"\x06labels\x18\t \x03(\v29.google.events.cloud.gkebackup.v1.RestorePlan.LabelsEntryR\x06labels\x12\x12\n" +
	"\x04etag\x18\n" +
	" \x01(\tR\x04etag\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"p\n" +
	"\x14RestorePlanEventData\x12L\n" +
	"\apayload\x18\x01 \x01(\v2-.google.events.cloud.gkebackup.v1.RestorePlanH\x00R\apayload\x88\x01\x01B\n" +
	"\n" +
	"\b_payload\"f\n" +
	"\x0fBackupEventData\x12G\n" +
	"\apayload\x18\x01 \x01(\v2(.google.events.cloud.gkebackup.v1.BackupH\x00R\apayload\x88\x01\x01B\n" +
	"\n" +
	"\b_payload\"n\n" +
	"\x13BackupPlanEventData\x12K\n" +
	"\apayload\x18\x01 \x01(\v2,.google.events.cloud.gkebackup.v1.BackupPlanH\x00R\apayload\x88\x01\x01B\n" +
	"\n" +
	"\b_payload\"h\n" +
	"\x10RestoreEventData\x12H\n" +
	"\apayload\x18\x01 \x01(\v2).google.events.cloud.gkebackup.v1.RestoreH\x00R\apayload\x88\x01\x01B\n" +
	"\n" +
	"\b_payloadBv\xaa\x02)Google.Events.Protobuf.Cloud.GkeBackup.V1\xca\x02 Google\\Events\\Cloud\\GkeBackup\\V1\xea\x02$Google::Events::Cloud::GkeBackup::V1b\x06proto3"

var (
	file_cloud_gkebackup_v1_data_proto_rawDescOnce sync.Once
	file_cloud_gkebackup_v1_data_proto_rawDescData []byte
)

func file_cloud_gkebackup_v1_data_proto_rawDescGZIP() []byte {
	file_cloud_gkebackup_v1_data_proto_rawDescOnce.Do(func() {
		file_cloud_gkebackup_v1_data_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cloud_gkebackup_v1_data_proto_rawDesc), len(file_cloud_gkebackup_v1_data_proto_rawDesc)))
	})
	return file_cloud_gkebackup_v1_data_proto_rawDescData
}

var file_cloud_gkebackup_v1_data_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_cloud_gkebackup_v1_data_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_cloud_gkebackup_v1_data_proto_goTypes = []any{
	(Backup_State)(0),                                // 0: google.events.cloud.gkebackup.v1.Backup.State
	(Restore_State)(0),                               // 1: google.events.cloud.gkebackup.v1.Restore.State
	(RestoreConfig_VolumeDataRestorePolicy)(0),       // 2: google.events.cloud.gkebackup.v1.RestoreConfig.VolumeDataRestorePolicy
	(RestoreConfig_ClusterResourceConflictPolicy)(0), // 3: google.events.cloud.gkebackup.v1.RestoreConfig.ClusterResourceConflictPolicy
	(RestoreConfig_NamespacedResourceRestoreMode)(0), // 4: google.events.cloud.gkebackup.v1.RestoreConfig.NamespacedResourceRestoreMode
	(*Namespaces)(nil),                               // 5: google.events.cloud.gkebackup.v1.Namespaces
	(*NamespacedName)(nil),                           // 6: google.events.cloud.gkebackup.v1.NamespacedName
	(*NamespacedNames)(nil),                          // 7: google.events.cloud.gkebackup.v1.NamespacedNames
	(*EncryptionKey)(nil),                            // 8: google.events.cloud.gkebackup.v1.EncryptionKey
	(*Backup)(nil),                                   // 9: google.events.cloud.gkebackup.v1.Backup
	(*BackupPlan)(nil),                               // 10: google.events.cloud.gkebackup.v1.BackupPlan
	(*Restore)(nil),                                  // 11: google.events.cloud.gkebackup.v1.Restore
	(*RestoreConfig)(nil),                            // 12: google.events.cloud.gkebackup.v1.RestoreConfig
	(*RestorePlan)(nil),                              // 13: google.events.cloud.gkebackup.v1.RestorePlan
	(*RestorePlanEventData)(nil),                     // 14: google.events.cloud.gkebackup.v1.RestorePlanEventData
	(*BackupEventData)(nil),                          // 15: google.events.cloud.gkebackup.v1.BackupEventData
	(*BackupPlanEventData)(nil),                      // 16: google.events.cloud.gkebackup.v1.BackupPlanEventData
	(*RestoreEventData)(nil),                         // 17: google.events.cloud.gkebackup.v1.RestoreEventData
	(*Backup_ClusterMetadata)(nil),                   // 18: google.events.cloud.gkebackup.v1.Backup.ClusterMetadata
	nil,                                              // 19: google.events.cloud.gkebackup.v1.Backup.LabelsEntry
	nil,                                              // 20: google.events.cloud.gkebackup.v1.Backup.ClusterMetadata.BackupCrdVersionsEntry
	(*BackupPlan_RetentionPolicy)(nil),               // 21: google.events.cloud.gkebackup.v1.BackupPlan.RetentionPolicy
	(*BackupPlan_Schedule)(nil),                      // 22: google.events.cloud.gkebackup.v1.BackupPlan.Schedule
	(*BackupPlan_BackupConfig)(nil),                  // 23: google.events.cloud.gkebackup.v1.BackupPlan.BackupConfig
	nil,                                              // 24: google.events.cloud.gkebackup.v1.BackupPlan.LabelsEntry
	nil,                                              // 25: google.events.cloud.gkebackup.v1.Restore.LabelsEntry
	(*RestoreConfig_GroupKind)(nil),                  // 26: google.events.cloud.gkebackup.v1.RestoreConfig.GroupKind
	(*RestoreConfig_ClusterResourceRestoreScope)(nil), // 27: google.events.cloud.gkebackup.v1.RestoreConfig.ClusterResourceRestoreScope
	(*RestoreConfig_SubstitutionRule)(nil),            // 28: google.events.cloud.gkebackup.v1.RestoreConfig.SubstitutionRule
	nil,                                               // 29: google.events.cloud.gkebackup.v1.RestorePlan.LabelsEntry
	(*timestamppb.Timestamp)(nil),                     // 30: google.protobuf.Timestamp
}
var file_cloud_gkebackup_v1_data_proto_depIdxs = []int32{
	6,  // 0: google.events.cloud.gkebackup.v1.NamespacedNames.namespaced_names:type_name -> google.events.cloud.gkebackup.v1.NamespacedName
	30, // 1: google.events.cloud.gkebackup.v1.Backup.create_time:type_name -> google.protobuf.Timestamp
	30, // 2: google.events.cloud.gkebackup.v1.Backup.update_time:type_name -> google.protobuf.Timestamp
	19, // 3: google.events.cloud.gkebackup.v1.Backup.labels:type_name -> google.events.cloud.gkebackup.v1.Backup.LabelsEntry
	30, // 4: google.events.cloud.gkebackup.v1.Backup.delete_lock_expire_time:type_name -> google.protobuf.Timestamp
	30, // 5: google.events.cloud.gkebackup.v1.Backup.retain_expire_time:type_name -> google.protobuf.Timestamp
	8,  // 6: google.events.cloud.gkebackup.v1.Backup.encryption_key:type_name -> google.events.cloud.gkebackup.v1.EncryptionKey
	5,  // 7: google.events.cloud.gkebackup.v1.Backup.selected_namespaces:type_name -> google.events.cloud.gkebackup.v1.Namespaces
	7,  // 8: google.events.cloud.gkebackup.v1.Backup.selected_applications:type_name -> google.events.cloud.gkebackup.v1.NamespacedNames
	18, // 9: google.events.cloud.gkebackup.v1.Backup.cluster_metadata:type_name -> google.events.cloud.gkebackup.v1.Backup.ClusterMetadata
	0,  // 10: google.events.cloud.gkebackup.v1.Backup.state:type_name -> google.events.cloud.gkebackup.v1.Backup.State
	30, // 11: google.events.cloud.gkebackup.v1.Backup.complete_time:type_name -> google.protobuf.Timestamp
	30, // 12: google.events.cloud.gkebackup.v1.BackupPlan.create_time:type_name -> google.protobuf.Timestamp
	30, // 13: google.events.cloud.gkebackup.v1.BackupPlan.update_time:type_name -> google.protobuf.Timestamp
	21, // 14: google.events.cloud.gkebackup.v1.BackupPlan.retention_policy:type_name -> google.events.cloud.gkebackup.v1.BackupPlan.RetentionPolicy
	24, // 15: google.events.cloud.gkebackup.v1.BackupPlan.labels:type_name -> google.events.cloud.gkebackup.v1.BackupPlan.LabelsEntry
	22, // 16: google.events.cloud.gkebackup.v1.BackupPlan.backup_schedule:type_name -> google.events.cloud.gkebackup.v1.BackupPlan.Schedule
	23, // 17: google.events.cloud.gkebackup.v1.BackupPlan.backup_config:type_name -> google.events.cloud.gkebackup.v1.BackupPlan.BackupConfig
	30, // 18: google.events.cloud.gkebackup.v1.Restore.create_time:type_name -> google.protobuf.Timestamp
	30, // 19: google.events.cloud.gkebackup.v1.Restore.update_time:type_name -> google.protobuf.Timestamp
	12, // 20: google.events.cloud.gkebackup.v1.Restore.restore_config:type_name -> google.events.cloud.gkebackup.v1.RestoreConfig
	25, // 21: google.events.cloud.gkebackup.v1.Restore.labels:type_name -> google.events.cloud.gkebackup.v1.Restore.LabelsEntry
	1,  // 22: google.events.cloud.gkebackup.v1.Restore.state:type_name -> google.events.cloud.gkebackup.v1.Restore.State
	30, // 23: google.events.cloud.gkebackup.v1.Restore.complete_time:type_name -> google.protobuf.Timestamp
	2,  // 24: google.events.cloud.gkebackup.v1.RestoreConfig.volume_data_restore_policy:type_name -> google.events.cloud.gkebackup.v1.RestoreConfig.VolumeDataRestorePolicy
	3,  // 25: google.events.cloud.gkebackup.v1.RestoreConfig.cluster_resource_conflict_policy:type_name -> google.events.cloud.gkebackup.v1.RestoreConfig.ClusterResourceConflictPolicy
	4,  // 26: google.events.cloud.gkebackup.v1.RestoreConfig.namespaced_resource_restore_mode:type_name -> google.events.cloud.gkebackup.v1.RestoreConfig.NamespacedResourceRestoreMode
	27, // 27: google.events.cloud.gkebackup.v1.RestoreConfig.cluster_resource_restore_scope:type_name -> google.events.cloud.gkebackup.v1.RestoreConfig.ClusterResourceRestoreScope
	5,  // 28: google.events.cloud.gkebackup.v1.RestoreConfig.selected_namespaces:type_name -> google.events.cloud.gkebackup.v1.Namespaces
	7,  // 29: google.events.cloud.gkebackup.v1.RestoreConfig.selected_applications:type_name -> google.events.cloud.gkebackup.v1.NamespacedNames
	28, // 30: google.events.cloud.gkebackup.v1.RestoreConfig.substitution_rules:type_name -> google.events.cloud.gkebackup.v1.RestoreConfig.SubstitutionRule
	30, // 31: google.events.cloud.gkebackup.v1.RestorePlan.create_time:type_name -> google.protobuf.Timestamp
	30, // 32: google.events.cloud.gkebackup.v1.RestorePlan.update_time:type_name -> google.protobuf.Timestamp
	12, // 33: google.events.cloud.gkebackup.v1.RestorePlan.restore_config:type_name -> google.events.cloud.gkebackup.v1.RestoreConfig
	29, // 34: google.events.cloud.gkebackup.v1.RestorePlan.labels:type_name -> google.events.cloud.gkebackup.v1.RestorePlan.LabelsEntry
	13, // 35: google.events.cloud.gkebackup.v1.RestorePlanEventData.payload:type_name -> google.events.cloud.gkebackup.v1.RestorePlan
	9,  // 36: google.events.cloud.gkebackup.v1.BackupEventData.payload:type_name -> google.events.cloud.gkebackup.v1.Backup
	10, // 37: google.events.cloud.gkebackup.v1.BackupPlanEventData.payload:type_name -> google.events.cloud.gkebackup.v1.BackupPlan
	11, // 38: google.events.cloud.gkebackup.v1.RestoreEventData.payload:type_name -> google.events.cloud.gkebackup.v1.Restore
	20, // 39: google.events.cloud.gkebackup.v1.Backup.ClusterMetadata.backup_crd_versions:type_name -> google.events.cloud.gkebackup.v1.Backup.ClusterMetadata.BackupCrdVersionsEntry
	5,  // 40: google.events.cloud.gkebackup.v1.BackupPlan.BackupConfig.selected_namespaces:type_name -> google.events.cloud.gkebackup.v1.Namespaces
	7,  // 41: google.events.cloud.gkebackup.v1.BackupPlan.BackupConfig.selected_applications:type_name -> google.events.cloud.gkebackup.v1.NamespacedNames
	8,  // 42: google.events.cloud.gkebackup.v1.BackupPlan.BackupConfig.encryption_key:type_name -> google.events.cloud.gkebackup.v1.EncryptionKey
	26, // 43: google.events.cloud.gkebackup.v1.RestoreConfig.ClusterResourceRestoreScope.selected_group_kinds:type_name -> google.events.cloud.gkebackup.v1.RestoreConfig.GroupKind
	26, // 44: google.events.cloud.gkebackup.v1.RestoreConfig.SubstitutionRule.target_group_kinds:type_name -> google.events.cloud.gkebackup.v1.RestoreConfig.GroupKind
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_cloud_gkebackup_v1_data_proto_init() }
func file_cloud_gkebackup_v1_data_proto_init() {
	if File_cloud_gkebackup_v1_data_proto != nil {
		return
	}
	file_cloud_gkebackup_v1_data_proto_msgTypes[4].OneofWrappers = []any{
		(*Backup_AllNamespaces)(nil),
		(*Backup_SelectedNamespaces)(nil),
		(*Backup_SelectedApplications)(nil),
	}
	file_cloud_gkebackup_v1_data_proto_msgTypes[7].OneofWrappers = []any{
		(*RestoreConfig_AllNamespaces)(nil),
		(*RestoreConfig_SelectedNamespaces)(nil),
		(*RestoreConfig_SelectedApplications)(nil),
	}
	file_cloud_gkebackup_v1_data_proto_msgTypes[9].OneofWrappers = []any{}
	file_cloud_gkebackup_v1_data_proto_msgTypes[10].OneofWrappers = []any{}
	file_cloud_gkebackup_v1_data_proto_msgTypes[11].OneofWrappers = []any{}
	file_cloud_gkebackup_v1_data_proto_msgTypes[12].OneofWrappers = []any{}
	file_cloud_gkebackup_v1_data_proto_msgTypes[13].OneofWrappers = []any{
		(*Backup_ClusterMetadata_GkeVersion)(nil),
		(*Backup_ClusterMetadata_AnthosVersion)(nil),
	}
	file_cloud_gkebackup_v1_data_proto_msgTypes[18].OneofWrappers = []any{
		(*BackupPlan_BackupConfig_AllNamespaces)(nil),
		(*BackupPlan_BackupConfig_SelectedNamespaces)(nil),
		(*BackupPlan_BackupConfig_SelectedApplications)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cloud_gkebackup_v1_data_proto_rawDesc), len(file_cloud_gkebackup_v1_data_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_gkebackup_v1_data_proto_goTypes,
		DependencyIndexes: file_cloud_gkebackup_v1_data_proto_depIdxs,
		EnumInfos:         file_cloud_gkebackup_v1_data_proto_enumTypes,
		MessageInfos:      file_cloud_gkebackup_v1_data_proto_msgTypes,
	}.Build()
	File_cloud_gkebackup_v1_data_proto = out.File
	file_cloud_gkebackup_v1_data_proto_goTypes = nil
	file_cloud_gkebackup_v1_data_proto_depIdxs = nil
}
