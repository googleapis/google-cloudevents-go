// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v3.21.6
// source: cloud/networkservices/v1/data.proto

package networkservicesdata

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Possible criteria values that define logic of how matching is made.
type EndpointMatcher_MetadataLabelMatcher_MetadataLabelMatchCriteria int32

const (
	// Default value. Should not be used.
	EndpointMatcher_MetadataLabelMatcher_METADATA_LABEL_MATCH_CRITERIA_UNSPECIFIED EndpointMatcher_MetadataLabelMatcher_MetadataLabelMatchCriteria = 0
	// At least one of the Labels specified in the matcher should match the
	// metadata presented by xDS client.
	EndpointMatcher_MetadataLabelMatcher_MATCH_ANY EndpointMatcher_MetadataLabelMatcher_MetadataLabelMatchCriteria = 1
	// The metadata presented by the xDS client should contain all of the
	// labels specified here.
	EndpointMatcher_MetadataLabelMatcher_MATCH_ALL EndpointMatcher_MetadataLabelMatcher_MetadataLabelMatchCriteria = 2
)

// Enum value maps for EndpointMatcher_MetadataLabelMatcher_MetadataLabelMatchCriteria.
var (
	EndpointMatcher_MetadataLabelMatcher_MetadataLabelMatchCriteria_name = map[int32]string{
		0: "METADATA_LABEL_MATCH_CRITERIA_UNSPECIFIED",
		1: "MATCH_ANY",
		2: "MATCH_ALL",
	}
	EndpointMatcher_MetadataLabelMatcher_MetadataLabelMatchCriteria_value = map[string]int32{
		"METADATA_LABEL_MATCH_CRITERIA_UNSPECIFIED": 0,
		"MATCH_ANY": 1,
		"MATCH_ALL": 2,
	}
)

func (x EndpointMatcher_MetadataLabelMatcher_MetadataLabelMatchCriteria) Enum() *EndpointMatcher_MetadataLabelMatcher_MetadataLabelMatchCriteria {
	p := new(EndpointMatcher_MetadataLabelMatcher_MetadataLabelMatchCriteria)
	*p = x
	return p
}

func (x EndpointMatcher_MetadataLabelMatcher_MetadataLabelMatchCriteria) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EndpointMatcher_MetadataLabelMatcher_MetadataLabelMatchCriteria) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_networkservices_v1_data_proto_enumTypes[0].Descriptor()
}

func (EndpointMatcher_MetadataLabelMatcher_MetadataLabelMatchCriteria) Type() protoreflect.EnumType {
	return &file_cloud_networkservices_v1_data_proto_enumTypes[0]
}

func (x EndpointMatcher_MetadataLabelMatcher_MetadataLabelMatchCriteria) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EndpointMatcher_MetadataLabelMatcher_MetadataLabelMatchCriteria.Descriptor instead.
func (EndpointMatcher_MetadataLabelMatcher_MetadataLabelMatchCriteria) EnumDescriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{1, 0, 0}
}

// The type of endpoint policy.
type EndpointPolicy_EndpointPolicyType int32

const (
	// Default value. Must not be used.
	EndpointPolicy_ENDPOINT_POLICY_TYPE_UNSPECIFIED EndpointPolicy_EndpointPolicyType = 0
	// Represents a proxy deployed as a sidecar.
	EndpointPolicy_SIDECAR_PROXY EndpointPolicy_EndpointPolicyType = 1
	// Represents a proxyless gRPC backend.
	EndpointPolicy_GRPC_SERVER EndpointPolicy_EndpointPolicyType = 2
)

// Enum value maps for EndpointPolicy_EndpointPolicyType.
var (
	EndpointPolicy_EndpointPolicyType_name = map[int32]string{
		0: "ENDPOINT_POLICY_TYPE_UNSPECIFIED",
		1: "SIDECAR_PROXY",
		2: "GRPC_SERVER",
	}
	EndpointPolicy_EndpointPolicyType_value = map[string]int32{
		"ENDPOINT_POLICY_TYPE_UNSPECIFIED": 0,
		"SIDECAR_PROXY":                    1,
		"GRPC_SERVER":                      2,
	}
)

func (x EndpointPolicy_EndpointPolicyType) Enum() *EndpointPolicy_EndpointPolicyType {
	p := new(EndpointPolicy_EndpointPolicyType)
	*p = x
	return p
}

func (x EndpointPolicy_EndpointPolicyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EndpointPolicy_EndpointPolicyType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_networkservices_v1_data_proto_enumTypes[1].Descriptor()
}

func (EndpointPolicy_EndpointPolicyType) Type() protoreflect.EnumType {
	return &file_cloud_networkservices_v1_data_proto_enumTypes[1]
}

func (x EndpointPolicy_EndpointPolicyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EndpointPolicy_EndpointPolicyType.Descriptor instead.
func (EndpointPolicy_EndpointPolicyType) EnumDescriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{2, 0}
}

// The type of the customer-managed gateway.
// Possible values are:
// * OPEN_MESH
// * SECURE_WEB_GATEWAY
type Gateway_Type int32

const (
	// The type of the customer managed gateway is unspecified.
	Gateway_TYPE_UNSPECIFIED Gateway_Type = 0
	// The type of the customer managed gateway is TrafficDirector Open
	// Mesh.
	Gateway_OPEN_MESH Gateway_Type = 1
	// The type of the customer managed gateway is SecureWebGateway (SWG).
	Gateway_SECURE_WEB_GATEWAY Gateway_Type = 2
)

// Enum value maps for Gateway_Type.
var (
	Gateway_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "OPEN_MESH",
		2: "SECURE_WEB_GATEWAY",
	}
	Gateway_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":   0,
		"OPEN_MESH":          1,
		"SECURE_WEB_GATEWAY": 2,
	}
)

func (x Gateway_Type) Enum() *Gateway_Type {
	p := new(Gateway_Type)
	*p = x
	return p
}

func (x Gateway_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gateway_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_networkservices_v1_data_proto_enumTypes[2].Descriptor()
}

func (Gateway_Type) Type() protoreflect.EnumType {
	return &file_cloud_networkservices_v1_data_proto_enumTypes[2]
}

func (x Gateway_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gateway_Type.Descriptor instead.
func (Gateway_Type) EnumDescriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{3, 0}
}

// The type of the match.
type GrpcRoute_MethodMatch_Type int32

const (
	// Unspecified.
	GrpcRoute_MethodMatch_TYPE_UNSPECIFIED GrpcRoute_MethodMatch_Type = 0
	// Will only match the exact name provided.
	GrpcRoute_MethodMatch_EXACT GrpcRoute_MethodMatch_Type = 1
	// Will interpret grpc_method and grpc_service as regexes. RE2 syntax is
	// supported.
	GrpcRoute_MethodMatch_REGULAR_EXPRESSION GrpcRoute_MethodMatch_Type = 2
)

// Enum value maps for GrpcRoute_MethodMatch_Type.
var (
	GrpcRoute_MethodMatch_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "EXACT",
		2: "REGULAR_EXPRESSION",
	}
	GrpcRoute_MethodMatch_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":   0,
		"EXACT":              1,
		"REGULAR_EXPRESSION": 2,
	}
)

func (x GrpcRoute_MethodMatch_Type) Enum() *GrpcRoute_MethodMatch_Type {
	p := new(GrpcRoute_MethodMatch_Type)
	*p = x
	return p
}

func (x GrpcRoute_MethodMatch_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrpcRoute_MethodMatch_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_networkservices_v1_data_proto_enumTypes[3].Descriptor()
}

func (GrpcRoute_MethodMatch_Type) Type() protoreflect.EnumType {
	return &file_cloud_networkservices_v1_data_proto_enumTypes[3]
}

func (x GrpcRoute_MethodMatch_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrpcRoute_MethodMatch_Type.Descriptor instead.
func (GrpcRoute_MethodMatch_Type) EnumDescriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{4, 0, 0}
}

// The type of match.
type GrpcRoute_HeaderMatch_Type int32

const (
	// Unspecified.
	GrpcRoute_HeaderMatch_TYPE_UNSPECIFIED GrpcRoute_HeaderMatch_Type = 0
	// Will only match the exact value provided.
	GrpcRoute_HeaderMatch_EXACT GrpcRoute_HeaderMatch_Type = 1
	// Will match paths conforming to the prefix specified by value. RE2
	// syntax is supported.
	GrpcRoute_HeaderMatch_REGULAR_EXPRESSION GrpcRoute_HeaderMatch_Type = 2
)

// Enum value maps for GrpcRoute_HeaderMatch_Type.
var (
	GrpcRoute_HeaderMatch_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "EXACT",
		2: "REGULAR_EXPRESSION",
	}
	GrpcRoute_HeaderMatch_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":   0,
		"EXACT":              1,
		"REGULAR_EXPRESSION": 2,
	}
)

func (x GrpcRoute_HeaderMatch_Type) Enum() *GrpcRoute_HeaderMatch_Type {
	p := new(GrpcRoute_HeaderMatch_Type)
	*p = x
	return p
}

func (x GrpcRoute_HeaderMatch_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrpcRoute_HeaderMatch_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_networkservices_v1_data_proto_enumTypes[4].Descriptor()
}

func (GrpcRoute_HeaderMatch_Type) Type() protoreflect.EnumType {
	return &file_cloud_networkservices_v1_data_proto_enumTypes[4]
}

func (x GrpcRoute_HeaderMatch_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrpcRoute_HeaderMatch_Type.Descriptor instead.
func (GrpcRoute_HeaderMatch_Type) EnumDescriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{4, 1, 0}
}

// Supported HTTP response code.
type HttpRoute_Redirect_ResponseCode int32

const (
	// Default value
	HttpRoute_Redirect_RESPONSE_CODE_UNSPECIFIED HttpRoute_Redirect_ResponseCode = 0
	// Corresponds to 301.
	HttpRoute_Redirect_MOVED_PERMANENTLY_DEFAULT HttpRoute_Redirect_ResponseCode = 1
	// Corresponds to 302.
	HttpRoute_Redirect_FOUND HttpRoute_Redirect_ResponseCode = 2
	// Corresponds to 303.
	HttpRoute_Redirect_SEE_OTHER HttpRoute_Redirect_ResponseCode = 3
	// Corresponds to 307. In this case, the request method will be retained.
	HttpRoute_Redirect_TEMPORARY_REDIRECT HttpRoute_Redirect_ResponseCode = 4
	// Corresponds to 308. In this case, the request method will be retained.
	HttpRoute_Redirect_PERMANENT_REDIRECT HttpRoute_Redirect_ResponseCode = 5
)

// Enum value maps for HttpRoute_Redirect_ResponseCode.
var (
	HttpRoute_Redirect_ResponseCode_name = map[int32]string{
		0: "RESPONSE_CODE_UNSPECIFIED",
		1: "MOVED_PERMANENTLY_DEFAULT",
		2: "FOUND",
		3: "SEE_OTHER",
		4: "TEMPORARY_REDIRECT",
		5: "PERMANENT_REDIRECT",
	}
	HttpRoute_Redirect_ResponseCode_value = map[string]int32{
		"RESPONSE_CODE_UNSPECIFIED": 0,
		"MOVED_PERMANENTLY_DEFAULT": 1,
		"FOUND":                     2,
		"SEE_OTHER":                 3,
		"TEMPORARY_REDIRECT":        4,
		"PERMANENT_REDIRECT":        5,
	}
)

func (x HttpRoute_Redirect_ResponseCode) Enum() *HttpRoute_Redirect_ResponseCode {
	p := new(HttpRoute_Redirect_ResponseCode)
	*p = x
	return p
}

func (x HttpRoute_Redirect_ResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpRoute_Redirect_ResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_networkservices_v1_data_proto_enumTypes[5].Descriptor()
}

func (HttpRoute_Redirect_ResponseCode) Type() protoreflect.EnumType {
	return &file_cloud_networkservices_v1_data_proto_enumTypes[5]
}

func (x HttpRoute_Redirect_ResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HttpRoute_Redirect_ResponseCode.Descriptor instead.
func (HttpRoute_Redirect_ResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{5, 4, 0}
}

// Specification of a port-based selector.
type TrafficPortSelector struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. A list of ports. Can be port numbers or port range
	// (example, [80-90] specifies all ports from 80 to 90, including
	// 80 and 90) or named ports or * to specify all ports. If the
	// list is empty, all ports are selected.
	Ports         []string `protobuf:"bytes,1,rep,name=ports,proto3" json:"ports,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrafficPortSelector) Reset() {
	*x = TrafficPortSelector{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrafficPortSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPortSelector) ProtoMessage() {}

func (x *TrafficPortSelector) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPortSelector.ProtoReflect.Descriptor instead.
func (*TrafficPortSelector) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{0}
}

func (x *TrafficPortSelector) GetPorts() []string {
	if x != nil {
		return x.Ports
	}
	return nil
}

// A definition of a matcher that selects endpoints to which the policies
// should be applied.
type EndpointMatcher struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies type of the matcher used for this endpoint matcher.
	//
	// Types that are valid to be assigned to MatcherType:
	//
	//	*EndpointMatcher_MetadataLabelMatcher_
	MatcherType   isEndpointMatcher_MatcherType `protobuf_oneof:"matcher_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndpointMatcher) Reset() {
	*x = EndpointMatcher{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndpointMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointMatcher) ProtoMessage() {}

func (x *EndpointMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointMatcher.ProtoReflect.Descriptor instead.
func (*EndpointMatcher) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{1}
}

func (x *EndpointMatcher) GetMatcherType() isEndpointMatcher_MatcherType {
	if x != nil {
		return x.MatcherType
	}
	return nil
}

func (x *EndpointMatcher) GetMetadataLabelMatcher() *EndpointMatcher_MetadataLabelMatcher {
	if x != nil {
		if x, ok := x.MatcherType.(*EndpointMatcher_MetadataLabelMatcher_); ok {
			return x.MetadataLabelMatcher
		}
	}
	return nil
}

type isEndpointMatcher_MatcherType interface {
	isEndpointMatcher_MatcherType()
}

type EndpointMatcher_MetadataLabelMatcher_ struct {
	// The matcher is based on node metadata presented by xDS clients.
	MetadataLabelMatcher *EndpointMatcher_MetadataLabelMatcher `protobuf:"bytes,1,opt,name=metadata_label_matcher,json=metadataLabelMatcher,proto3,oneof"`
}

func (*EndpointMatcher_MetadataLabelMatcher_) isEndpointMatcher_MatcherType() {}

// EndpointPolicy is a resource that helps apply desired configuration
// on the endpoints that match specific criteria.
// For example, this resource can be used to apply "authentication config"
// an all endpoints that serve on port 8080.
type EndpointPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. Name of the EndpointPolicy resource. It matches pattern
	// `projects/{project}/locations/global/endpointPolicies/{endpoint_policy}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The timestamp when the resource was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The timestamp when the resource was updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional. Set of label tags associated with the EndpointPolicy resource.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Required. The type of endpoint policy. This is primarily used to validate
	// the configuration.
	Type EndpointPolicy_EndpointPolicyType `protobuf:"varint,5,opt,name=type,proto3,enum=google.events.cloud.networkservices.v1.EndpointPolicy_EndpointPolicyType" json:"type,omitempty"`
	// Optional. This field specifies the URL of AuthorizationPolicy resource that
	// applies authorization policies to the inbound traffic at the
	// matched endpoints. Refer to Authorization. If this field is not
	// specified, authorization is disabled(no authz checks) for this
	// endpoint.
	AuthorizationPolicy string `protobuf:"bytes,7,opt,name=authorization_policy,json=authorizationPolicy,proto3" json:"authorization_policy,omitempty"`
	// Required. A matcher that selects endpoints to which the policies should be
	// applied.
	EndpointMatcher *EndpointMatcher `protobuf:"bytes,9,opt,name=endpoint_matcher,json=endpointMatcher,proto3" json:"endpoint_matcher,omitempty"`
	// Optional. Port selector for the (matched) endpoints. If no port selector is
	// provided, the matched config is applied to all ports.
	TrafficPortSelector *TrafficPortSelector `protobuf:"bytes,10,opt,name=traffic_port_selector,json=trafficPortSelector,proto3" json:"traffic_port_selector,omitempty"`
	// Optional. A free-text description of the resource. Max length 1024
	// characters.
	Description string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	// Optional. A URL referring to ServerTlsPolicy resource. ServerTlsPolicy is
	// used to determine the authentication policy to be applied to terminate the
	// inbound traffic at the identified backends. If this field is not set,
	// authentication is disabled(open) for this endpoint.
	ServerTlsPolicy string `protobuf:"bytes,12,opt,name=server_tls_policy,json=serverTlsPolicy,proto3" json:"server_tls_policy,omitempty"`
	// Optional. A URL referring to a ClientTlsPolicy resource. ClientTlsPolicy
	// can be set to specify the authentication for traffic from the proxy to the
	// actual endpoints. More specifically, it is applied to the outgoing traffic
	// from the proxy to the endpoint. This is typically used for sidecar model
	// where the proxy identifies itself as endpoint to the control plane, with
	// the connection between sidecar and endpoint requiring authentication. If
	// this field is not set, authentication is disabled(open). Applicable only
	// when EndpointPolicyType is SIDECAR_PROXY.
	ClientTlsPolicy string `protobuf:"bytes,13,opt,name=client_tls_policy,json=clientTlsPolicy,proto3" json:"client_tls_policy,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EndpointPolicy) Reset() {
	*x = EndpointPolicy{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndpointPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointPolicy) ProtoMessage() {}

func (x *EndpointPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointPolicy.ProtoReflect.Descriptor instead.
func (*EndpointPolicy) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{2}
}

func (x *EndpointPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EndpointPolicy) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *EndpointPolicy) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *EndpointPolicy) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *EndpointPolicy) GetType() EndpointPolicy_EndpointPolicyType {
	if x != nil {
		return x.Type
	}
	return EndpointPolicy_ENDPOINT_POLICY_TYPE_UNSPECIFIED
}

func (x *EndpointPolicy) GetAuthorizationPolicy() string {
	if x != nil {
		return x.AuthorizationPolicy
	}
	return ""
}

func (x *EndpointPolicy) GetEndpointMatcher() *EndpointMatcher {
	if x != nil {
		return x.EndpointMatcher
	}
	return nil
}

func (x *EndpointPolicy) GetTrafficPortSelector() *TrafficPortSelector {
	if x != nil {
		return x.TrafficPortSelector
	}
	return nil
}

func (x *EndpointPolicy) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EndpointPolicy) GetServerTlsPolicy() string {
	if x != nil {
		return x.ServerTlsPolicy
	}
	return ""
}

func (x *EndpointPolicy) GetClientTlsPolicy() string {
	if x != nil {
		return x.ClientTlsPolicy
	}
	return ""
}

// Gateway represents the configuration for a proxy, typically a load balancer.
// It captures the ip:port over which the services are exposed by the proxy,
// along with any policy configurations. Routes have reference to to Gateways to
// dictate how requests should be routed by this Gateway.
type Gateway struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. Name of the Gateway resource. It matches pattern
	// `projects/*/locations/*/gateways/<gateway_name>`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Server-defined URL of this resource
	SelfLink string `protobuf:"bytes,13,opt,name=self_link,json=selfLink,proto3" json:"self_link,omitempty"`
	// Output only. The timestamp when the resource was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The timestamp when the resource was updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional. Set of label tags associated with the Gateway resource.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Optional. A free-text description of the resource. Max length 1024
	// characters.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Immutable. The type of the customer managed gateway.
	// This field is required. If unspecified, an error is returned.
	Type Gateway_Type `protobuf:"varint,6,opt,name=type,proto3,enum=google.events.cloud.networkservices.v1.Gateway_Type" json:"type,omitempty"`
	// Optional. Zero or one IPv4 or IPv6 address on which the Gateway will
	// receive the traffic. When no address is provided, an IP from the subnetwork
	// is allocated
	//
	// This field only applies to gateways of type 'SECURE_WEB_GATEWAY'.
	// Gateways of type 'OPEN_MESH' listen on 0.0.0.0 for IPv4 and :: for IPv6.
	Addresses []string `protobuf:"bytes,7,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// Required. One or more port numbers (1-65535), on which the Gateway will
	// receive traffic. The proxy binds to the specified ports.
	// Gateways of type 'SECURE_WEB_GATEWAY' are limited to 1 port.
	// Gateways of type 'OPEN_MESH' listen on 0.0.0.0 for IPv4 and :: for IPv6 and
	// support multiple ports.
	Ports []int32 `protobuf:"varint,11,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	// Optional. Scope determines how configuration across multiple Gateway
	// instances are merged. The configuration for multiple Gateway instances with
	// the same scope will be merged as presented as a single coniguration to the
	// proxy/load balancer.
	//
	// Max length 64 characters.
	// Scope should start with a letter and can only have letters, numbers,
	// hyphens.
	Scope string `protobuf:"bytes,8,opt,name=scope,proto3" json:"scope,omitempty"`
	// Optional. A fully-qualified ServerTLSPolicy URL reference. Specifies how
	// TLS traffic is terminated. If empty, TLS termination is disabled.
	ServerTlsPolicy string `protobuf:"bytes,9,opt,name=server_tls_policy,json=serverTlsPolicy,proto3" json:"server_tls_policy,omitempty"`
	// Optional. A fully-qualified Certificates URL reference. The proxy presents
	// a Certificate (selected based on SNI) when establishing a TLS connection.
	// This feature only applies to gateways of type 'SECURE_WEB_GATEWAY'.
	CertificateUrls []string `protobuf:"bytes,14,rep,name=certificate_urls,json=certificateUrls,proto3" json:"certificate_urls,omitempty"`
	// Optional. A fully-qualified GatewaySecurityPolicy URL reference.
	// Defines how a server should apply security policy to inbound
	// (VM to Proxy) initiated connections.
	//
	// For example:
	// `projects/*/locations/*/gatewaySecurityPolicies/swg-policy`.
	//
	// This policy is specific to gateways of type 'SECURE_WEB_GATEWAY'.
	GatewaySecurityPolicy string `protobuf:"bytes,18,opt,name=gateway_security_policy,json=gatewaySecurityPolicy,proto3" json:"gateway_security_policy,omitempty"`
	// Optional. The relative resource name identifying the VPC network that is
	// using this configuration. For example:
	// `projects/*/global/networks/network-1`.
	//
	// Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY'.
	Network string `protobuf:"bytes,16,opt,name=network,proto3" json:"network,omitempty"`
	// Optional. The relative resource name identifying  the subnetwork in which
	// this SWG is allocated. For example:
	// `projects/*/regions/us-central1/subnetworks/network-1`
	//
	// Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY".
	Subnetwork    string `protobuf:"bytes,17,opt,name=subnetwork,proto3" json:"subnetwork,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Gateway) Reset() {
	*x = Gateway{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Gateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gateway) ProtoMessage() {}

func (x *Gateway) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gateway.ProtoReflect.Descriptor instead.
func (*Gateway) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{3}
}

func (x *Gateway) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Gateway) GetSelfLink() string {
	if x != nil {
		return x.SelfLink
	}
	return ""
}

func (x *Gateway) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Gateway) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Gateway) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Gateway) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Gateway) GetType() Gateway_Type {
	if x != nil {
		return x.Type
	}
	return Gateway_TYPE_UNSPECIFIED
}

func (x *Gateway) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Gateway) GetPorts() []int32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Gateway) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *Gateway) GetServerTlsPolicy() string {
	if x != nil {
		return x.ServerTlsPolicy
	}
	return ""
}

func (x *Gateway) GetCertificateUrls() []string {
	if x != nil {
		return x.CertificateUrls
	}
	return nil
}

func (x *Gateway) GetGatewaySecurityPolicy() string {
	if x != nil {
		return x.GatewaySecurityPolicy
	}
	return ""
}

func (x *Gateway) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Gateway) GetSubnetwork() string {
	if x != nil {
		return x.Subnetwork
	}
	return ""
}

// GrpcRoute is the resource defining how gRPC traffic routed by a Mesh
// or Gateway resource is routed.
type GrpcRoute struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. Name of the GrpcRoute resource. It matches pattern
	// `projects/*/locations/global/grpcRoutes/<grpc_route_name>`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Server-defined URL of this resource
	SelfLink string `protobuf:"bytes,12,opt,name=self_link,json=selfLink,proto3" json:"self_link,omitempty"`
	// Output only. The timestamp when the resource was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The timestamp when the resource was updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional. Set of label tags associated with the GrpcRoute resource.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Optional. A free-text description of the resource. Max length 1024
	// characters.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Required. Service hostnames with an optional port for which this route
	// describes traffic.
	//
	// Format: <hostname>[:<port>]
	//
	// Hostname is the fully qualified domain name of a network host. This matches
	// the RFC 1123 definition of a hostname with 2 notable exceptions:
	//   - IPs are not allowed.
	//   - A hostname may be prefixed with a wildcard label (`*.`). The wildcard
	//     label must appear by itself as the first label.
	//
	// Hostname can be "precise" which is a domain name without the terminating
	// dot of a network host (e.g. `foo.example.com`) or "wildcard", which is a
	// domain name prefixed with a single wildcard label (e.g. `*.example.com`).
	//
	// Note that as per RFC1035 and RFC1123, a label must consist of lower case
	// alphanumeric characters or '-', and must start and end with an alphanumeric
	// character. No other punctuation is allowed.
	//
	// The routes associated with a Mesh or Gateway must have unique hostnames. If
	// you attempt to attach multiple routes with conflicting hostnames, the
	// configuration will be rejected.
	//
	// For example, while it is acceptable for routes for the hostnames
	// `*.foo.bar.com` and `*.bar.com` to be associated with the same route, it is
	// not possible to associate two routes both with `*.bar.com` or both with
	// `bar.com`.
	//
	// If a port is specified, then gRPC clients must use the channel URI with the
	// port to match this rule (i.e. "xds:///service:123"), otherwise they must
	// supply the URI without a port (i.e. "xds:///service").
	Hostnames []string `protobuf:"bytes,6,rep,name=hostnames,proto3" json:"hostnames,omitempty"`
	// Optional. Meshes defines a list of meshes this GrpcRoute is attached to, as
	// one of the routing rules to route the requests served by the mesh.
	//
	// Each mesh reference should match the pattern:
	// `projects/*/locations/global/meshes/<mesh_name>`
	Meshes []string `protobuf:"bytes,9,rep,name=meshes,proto3" json:"meshes,omitempty"`
	// Optional. Gateways defines a list of gateways this GrpcRoute is attached
	// to, as one of the routing rules to route the requests served by the
	// gateway.
	//
	// Each gateway reference should match the pattern:
	// `projects/*/locations/global/gateways/<gateway_name>`
	Gateways []string `protobuf:"bytes,10,rep,name=gateways,proto3" json:"gateways,omitempty"`
	// Required. A list of detailed rules defining how to route traffic.
	//
	// Within a single GrpcRoute, the GrpcRoute.RouteAction associated with the
	// first matching GrpcRoute.RouteRule will be executed. At least one rule
	// must be supplied.
	Rules         []*GrpcRoute_RouteRule `protobuf:"bytes,7,rep,name=rules,proto3" json:"rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcRoute) Reset() {
	*x = GrpcRoute{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcRoute) ProtoMessage() {}

func (x *GrpcRoute) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcRoute.ProtoReflect.Descriptor instead.
func (*GrpcRoute) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{4}
}

func (x *GrpcRoute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GrpcRoute) GetSelfLink() string {
	if x != nil {
		return x.SelfLink
	}
	return ""
}

func (x *GrpcRoute) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *GrpcRoute) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *GrpcRoute) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GrpcRoute) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GrpcRoute) GetHostnames() []string {
	if x != nil {
		return x.Hostnames
	}
	return nil
}

func (x *GrpcRoute) GetMeshes() []string {
	if x != nil {
		return x.Meshes
	}
	return nil
}

func (x *GrpcRoute) GetGateways() []string {
	if x != nil {
		return x.Gateways
	}
	return nil
}

func (x *GrpcRoute) GetRules() []*GrpcRoute_RouteRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// HttpRoute is the resource defining how HTTP traffic should be routed by a
// Mesh or Gateway resource.
type HttpRoute struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. Name of the HttpRoute resource. It matches pattern
	// `projects/*/locations/global/httpRoutes/http_route_name>`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Server-defined URL of this resource
	SelfLink string `protobuf:"bytes,11,opt,name=self_link,json=selfLink,proto3" json:"self_link,omitempty"`
	// Optional. A free-text description of the resource. Max length 1024
	// characters.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The timestamp when the resource was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The timestamp when the resource was updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Required. Hostnames define a set of hosts that should match against the
	// HTTP host header to select a HttpRoute to process the request. Hostname is
	// the fully qualified domain name of a network host, as defined by RFC 1123
	// with the exception that:
	//   - IPs are not allowed.
	//   - A hostname may be prefixed with a wildcard label (`*.`). The wildcard
	//     label must appear by itself as the first label.
	//
	// Hostname can be "precise" which is a domain name without the terminating
	// dot of a network host (e.g. `foo.example.com`) or "wildcard", which is a
	// domain name prefixed with a single wildcard label (e.g. `*.example.com`).
	//
	// Note that as per RFC1035 and RFC1123, a label must consist of lower case
	// alphanumeric characters or '-', and must start and end with an alphanumeric
	// character. No other punctuation is allowed.
	//
	// The routes associated with a Mesh or Gateways  must have unique hostnames.
	// If you attempt to attach multiple routes with conflicting hostnames,
	// the configuration will be rejected.
	//
	// For example, while it is acceptable for routes for the hostnames
	// `*.foo.bar.com` and `*.bar.com` to be associated with the same Mesh (or
	// Gateways under the same scope), it is not possible to associate two routes
	// both with `*.bar.com` or both with `bar.com`.
	Hostnames []string `protobuf:"bytes,5,rep,name=hostnames,proto3" json:"hostnames,omitempty"`
	// Optional. Meshes defines a list of meshes this HttpRoute is attached to, as
	// one of the routing rules to route the requests served by the mesh.
	//
	// Each mesh reference should match the pattern:
	// `projects/*/locations/global/meshes/<mesh_name>`
	//
	// The attached Mesh should be of a type SIDECAR
	Meshes []string `protobuf:"bytes,8,rep,name=meshes,proto3" json:"meshes,omitempty"`
	// Optional. Gateways defines a list of gateways this HttpRoute is attached
	// to, as one of the routing rules to route the requests served by the
	// gateway.
	//
	// Each gateway reference should match the pattern:
	// `projects/*/locations/global/gateways/<gateway_name>`
	Gateways []string `protobuf:"bytes,9,rep,name=gateways,proto3" json:"gateways,omitempty"`
	// Optional. Set of label tags associated with the HttpRoute resource.
	Labels map[string]string `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Required. Rules that define how traffic is routed and handled.
	// Rules will be matched sequentially based on the RouteMatch specified for
	// the rule.
	Rules         []*HttpRoute_RouteRule `protobuf:"bytes,6,rep,name=rules,proto3" json:"rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpRoute) Reset() {
	*x = HttpRoute{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRoute) ProtoMessage() {}

func (x *HttpRoute) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRoute.ProtoReflect.Descriptor instead.
func (*HttpRoute) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{5}
}

func (x *HttpRoute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HttpRoute) GetSelfLink() string {
	if x != nil {
		return x.SelfLink
	}
	return ""
}

func (x *HttpRoute) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *HttpRoute) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *HttpRoute) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *HttpRoute) GetHostnames() []string {
	if x != nil {
		return x.Hostnames
	}
	return nil
}

func (x *HttpRoute) GetMeshes() []string {
	if x != nil {
		return x.Meshes
	}
	return nil
}

func (x *HttpRoute) GetGateways() []string {
	if x != nil {
		return x.Gateways
	}
	return nil
}

func (x *HttpRoute) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *HttpRoute) GetRules() []*HttpRoute_RouteRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// Mesh represents a logical configuration grouping for workload to workload
// communication within a service mesh. Routes that point to mesh dictate how
// requests are routed within this logical mesh boundary.
type Mesh struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. Name of the Mesh resource. It matches pattern
	// `projects/*/locations/global/meshes/<mesh_name>`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Server-defined URL of this resource
	SelfLink string `protobuf:"bytes,9,opt,name=self_link,json=selfLink,proto3" json:"self_link,omitempty"`
	// Output only. The timestamp when the resource was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The timestamp when the resource was updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional. Set of label tags associated with the Mesh resource.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Optional. A free-text description of the resource. Max length 1024
	// characters.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Optional. If set to a valid TCP port (1-65535), instructs the SIDECAR proxy
	// to listen on the specified port of localhost (127.0.0.1) address. The
	// SIDECAR proxy will expect all traffic to be redirected to this port
	// regardless of its actual ip:port destination. If unset, a port '15001' is
	// used as the interception port. This is applicable only for sidecar proxy
	// deployments.
	InterceptionPort int32 `protobuf:"varint,8,opt,name=interception_port,json=interceptionPort,proto3" json:"interception_port,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Mesh) Reset() {
	*x = Mesh{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mesh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mesh) ProtoMessage() {}

func (x *Mesh) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mesh.ProtoReflect.Descriptor instead.
func (*Mesh) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{6}
}

func (x *Mesh) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Mesh) GetSelfLink() string {
	if x != nil {
		return x.SelfLink
	}
	return ""
}

func (x *Mesh) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Mesh) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Mesh) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Mesh) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Mesh) GetInterceptionPort() int32 {
	if x != nil {
		return x.InterceptionPort
	}
	return 0
}

// ServiceBinding is the resource that defines a Service Directory Service to
// be used in a BackendService resource.
type ServiceBinding struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. Name of the ServiceBinding resource. It matches pattern
	// `projects/*/locations/global/serviceBindings/service_binding_name`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. A free-text description of the resource. Max length 1024
	// characters.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The timestamp when the resource was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The timestamp when the resource was updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Required. The full Service Directory Service name of the format
	// projects/*/locations/*/namespaces/*/services/*
	Service string `protobuf:"bytes,5,opt,name=service,proto3" json:"service,omitempty"`
	// Output only. The unique identifier of the Service Directory Service against
	// which the Service Binding resource is validated. This is populated when the
	// Service Binding resource is used in another resource (like Backend
	// Service). This is of the UUID4 format.
	ServiceId string `protobuf:"bytes,8,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Optional. Set of label tags associated with the ServiceBinding resource.
	Labels        map[string]string `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceBinding) Reset() {
	*x = ServiceBinding{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceBinding) ProtoMessage() {}

func (x *ServiceBinding) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceBinding.ProtoReflect.Descriptor instead.
func (*ServiceBinding) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{7}
}

func (x *ServiceBinding) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceBinding) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ServiceBinding) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ServiceBinding) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ServiceBinding) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *ServiceBinding) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ServiceBinding) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// TcpRoute is the resource defining how TCP traffic should be routed by a
// Mesh/Gateway resource.
type TcpRoute struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. Name of the TcpRoute resource. It matches pattern
	// `projects/*/locations/global/tcpRoutes/tcp_route_name>`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Server-defined URL of this resource
	SelfLink string `protobuf:"bytes,11,opt,name=self_link,json=selfLink,proto3" json:"self_link,omitempty"`
	// Output only. The timestamp when the resource was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The timestamp when the resource was updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional. A free-text description of the resource. Max length 1024
	// characters.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Required. Rules that define how traffic is routed and handled. At least one
	// RouteRule must be supplied. If there are multiple rules then the action
	// taken will be the first rule to match.
	Rules []*TcpRoute_RouteRule `protobuf:"bytes,5,rep,name=rules,proto3" json:"rules,omitempty"`
	// Optional. Meshes defines a list of meshes this TcpRoute is attached to, as
	// one of the routing rules to route the requests served by the mesh.
	//
	// Each mesh reference should match the pattern:
	// `projects/*/locations/global/meshes/<mesh_name>`
	//
	// The attached Mesh should be of a type SIDECAR
	Meshes []string `protobuf:"bytes,8,rep,name=meshes,proto3" json:"meshes,omitempty"`
	// Optional. Gateways defines a list of gateways this TcpRoute is attached to,
	// as one of the routing rules to route the requests served by the gateway.
	//
	// Each gateway reference should match the pattern:
	// `projects/*/locations/global/gateways/<gateway_name>`
	Gateways []string `protobuf:"bytes,9,rep,name=gateways,proto3" json:"gateways,omitempty"`
	// Optional. Set of label tags associated with the TcpRoute resource.
	Labels        map[string]string `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TcpRoute) Reset() {
	*x = TcpRoute{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TcpRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpRoute) ProtoMessage() {}

func (x *TcpRoute) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpRoute.ProtoReflect.Descriptor instead.
func (*TcpRoute) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{8}
}

func (x *TcpRoute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TcpRoute) GetSelfLink() string {
	if x != nil {
		return x.SelfLink
	}
	return ""
}

func (x *TcpRoute) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *TcpRoute) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *TcpRoute) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TcpRoute) GetRules() []*TcpRoute_RouteRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *TcpRoute) GetMeshes() []string {
	if x != nil {
		return x.Meshes
	}
	return nil
}

func (x *TcpRoute) GetGateways() []string {
	if x != nil {
		return x.Gateways
	}
	return nil
}

func (x *TcpRoute) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// TlsRoute defines how traffic should be routed based on SNI and other matching
// L3 attributes.
type TlsRoute struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. Name of the TlsRoute resource. It matches pattern
	// `projects/*/locations/global/tlsRoutes/tls_route_name>`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Server-defined URL of this resource
	SelfLink string `protobuf:"bytes,8,opt,name=self_link,json=selfLink,proto3" json:"self_link,omitempty"`
	// Output only. The timestamp when the resource was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The timestamp when the resource was updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional. A free-text description of the resource. Max length 1024
	// characters.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Required. Rules that define how traffic is routed and handled. At least one
	// RouteRule must be supplied. If there are multiple rules then the action
	// taken will be the first rule to match.
	Rules []*TlsRoute_RouteRule `protobuf:"bytes,5,rep,name=rules,proto3" json:"rules,omitempty"`
	// Optional. Meshes defines a list of meshes this TlsRoute is attached to, as
	// one of the routing rules to route the requests served by the mesh.
	//
	// Each mesh reference should match the pattern:
	// `projects/*/locations/global/meshes/<mesh_name>`
	//
	// The attached Mesh should be of a type SIDECAR
	Meshes []string `protobuf:"bytes,6,rep,name=meshes,proto3" json:"meshes,omitempty"`
	// Optional. Gateways defines a list of gateways this TlsRoute is attached to,
	// as one of the routing rules to route the requests served by the gateway.
	//
	// Each gateway reference should match the pattern:
	// `projects/*/locations/global/gateways/<gateway_name>`
	Gateways      []string `protobuf:"bytes,7,rep,name=gateways,proto3" json:"gateways,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TlsRoute) Reset() {
	*x = TlsRoute{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TlsRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TlsRoute) ProtoMessage() {}

func (x *TlsRoute) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TlsRoute.ProtoReflect.Descriptor instead.
func (*TlsRoute) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{9}
}

func (x *TlsRoute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TlsRoute) GetSelfLink() string {
	if x != nil {
		return x.SelfLink
	}
	return ""
}

func (x *TlsRoute) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *TlsRoute) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *TlsRoute) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TlsRoute) GetRules() []*TlsRoute_RouteRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *TlsRoute) GetMeshes() []string {
	if x != nil {
		return x.Meshes
	}
	return nil
}

func (x *TlsRoute) GetGateways() []string {
	if x != nil {
		return x.Gateways
	}
	return nil
}

// The data within all EndpointPolicy events.
type EndpointPolicyEventData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The EndpointPolicy event payload. Unset for deletion events.
	Payload       *EndpointPolicy `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndpointPolicyEventData) Reset() {
	*x = EndpointPolicyEventData{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndpointPolicyEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointPolicyEventData) ProtoMessage() {}

func (x *EndpointPolicyEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointPolicyEventData.ProtoReflect.Descriptor instead.
func (*EndpointPolicyEventData) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{10}
}

func (x *EndpointPolicyEventData) GetPayload() *EndpointPolicy {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all HttpRoute events.
type HttpRouteEventData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The HttpRoute event payload. Unset for deletion events.
	Payload       *HttpRoute `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpRouteEventData) Reset() {
	*x = HttpRouteEventData{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRouteEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRouteEventData) ProtoMessage() {}

func (x *HttpRouteEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRouteEventData.ProtoReflect.Descriptor instead.
func (*HttpRouteEventData) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{11}
}

func (x *HttpRouteEventData) GetPayload() *HttpRoute {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all ServiceBinding events.
type ServiceBindingEventData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The ServiceBinding event payload. Unset for deletion events.
	Payload       *ServiceBinding `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceBindingEventData) Reset() {
	*x = ServiceBindingEventData{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceBindingEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceBindingEventData) ProtoMessage() {}

func (x *ServiceBindingEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceBindingEventData.ProtoReflect.Descriptor instead.
func (*ServiceBindingEventData) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{12}
}

func (x *ServiceBindingEventData) GetPayload() *ServiceBinding {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all Gateway events.
type GatewayEventData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The Gateway event payload. Unset for deletion events.
	Payload       *Gateway `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GatewayEventData) Reset() {
	*x = GatewayEventData{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GatewayEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayEventData) ProtoMessage() {}

func (x *GatewayEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayEventData.ProtoReflect.Descriptor instead.
func (*GatewayEventData) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{13}
}

func (x *GatewayEventData) GetPayload() *Gateway {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all TlsRoute events.
type TlsRouteEventData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The TlsRoute event payload. Unset for deletion events.
	Payload       *TlsRoute `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TlsRouteEventData) Reset() {
	*x = TlsRouteEventData{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TlsRouteEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TlsRouteEventData) ProtoMessage() {}

func (x *TlsRouteEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TlsRouteEventData.ProtoReflect.Descriptor instead.
func (*TlsRouteEventData) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{14}
}

func (x *TlsRouteEventData) GetPayload() *TlsRoute {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all GrpcRoute events.
type GrpcRouteEventData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The GrpcRoute event payload. Unset for deletion events.
	Payload       *GrpcRoute `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcRouteEventData) Reset() {
	*x = GrpcRouteEventData{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcRouteEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcRouteEventData) ProtoMessage() {}

func (x *GrpcRouteEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcRouteEventData.ProtoReflect.Descriptor instead.
func (*GrpcRouteEventData) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{15}
}

func (x *GrpcRouteEventData) GetPayload() *GrpcRoute {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all Mesh events.
type MeshEventData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The Mesh event payload. Unset for deletion events.
	Payload       *Mesh `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeshEventData) Reset() {
	*x = MeshEventData{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeshEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshEventData) ProtoMessage() {}

func (x *MeshEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshEventData.ProtoReflect.Descriptor instead.
func (*MeshEventData) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{16}
}

func (x *MeshEventData) GetPayload() *Mesh {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all TcpRoute events.
type TcpRouteEventData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The TcpRoute event payload. Unset for deletion events.
	Payload       *TcpRoute `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TcpRouteEventData) Reset() {
	*x = TcpRouteEventData{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TcpRouteEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpRouteEventData) ProtoMessage() {}

func (x *TcpRouteEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpRouteEventData.ProtoReflect.Descriptor instead.
func (*TcpRouteEventData) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{17}
}

func (x *TcpRouteEventData) GetPayload() *TcpRoute {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The matcher that is based on node metadata presented by xDS clients.
type EndpointMatcher_MetadataLabelMatcher struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies how matching should be done.
	//
	// Supported values are:
	// MATCH_ANY: At least one of the Labels specified in the
	//
	//	matcher should match the metadata presented by xDS client.
	//
	// MATCH_ALL: The metadata presented by the xDS client should
	//
	//	contain all of the labels specified here.
	//
	// The selection is determined based on the best match. For
	// example, suppose there are three EndpointPolicy
	// resources P1, P2 and P3 and if P1 has a the matcher as
	// MATCH_ANY <A:1, B:1>, P2 has MATCH_ALL <A:1,B:1>, and P3 has
	// MATCH_ALL <A:1,B:1,C:1>.
	//
	// If a client with label <A:1> connects, the config from P1
	// will be selected.
	//
	// If a client with label <A:1,B:1> connects, the config from P2
	// will be selected.
	//
	// If a client with label <A:1,B:1,C:1> connects, the config
	// from P3 will be selected.
	//
	// If there is more than one best match, (for example, if a
	// config P4 with selector <A:1,D:1> exists and if a client with
	// label <A:1,B:1,D:1> connects), an error will be thrown.
	MetadataLabelMatchCriteria EndpointMatcher_MetadataLabelMatcher_MetadataLabelMatchCriteria `protobuf:"varint,1,opt,name=metadata_label_match_criteria,json=metadataLabelMatchCriteria,proto3,enum=google.events.cloud.networkservices.v1.EndpointMatcher_MetadataLabelMatcher_MetadataLabelMatchCriteria" json:"metadata_label_match_criteria,omitempty"`
	// The list of label value pairs that must match labels in the
	// provided metadata based on filterMatchCriteria This list can
	// have at most 64 entries. The list can be empty if the match
	// criteria is MATCH_ANY, to specify a wildcard match (i.e this
	// matches any client).
	MetadataLabels []*EndpointMatcher_MetadataLabelMatcher_MetadataLabels `protobuf:"bytes,2,rep,name=metadata_labels,json=metadataLabels,proto3" json:"metadata_labels,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EndpointMatcher_MetadataLabelMatcher) Reset() {
	*x = EndpointMatcher_MetadataLabelMatcher{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndpointMatcher_MetadataLabelMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointMatcher_MetadataLabelMatcher) ProtoMessage() {}

func (x *EndpointMatcher_MetadataLabelMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointMatcher_MetadataLabelMatcher.ProtoReflect.Descriptor instead.
func (*EndpointMatcher_MetadataLabelMatcher) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{1, 0}
}

func (x *EndpointMatcher_MetadataLabelMatcher) GetMetadataLabelMatchCriteria() EndpointMatcher_MetadataLabelMatcher_MetadataLabelMatchCriteria {
	if x != nil {
		return x.MetadataLabelMatchCriteria
	}
	return EndpointMatcher_MetadataLabelMatcher_METADATA_LABEL_MATCH_CRITERIA_UNSPECIFIED
}

func (x *EndpointMatcher_MetadataLabelMatcher) GetMetadataLabels() []*EndpointMatcher_MetadataLabelMatcher_MetadataLabels {
	if x != nil {
		return x.MetadataLabels
	}
	return nil
}

// Defines a name-pair value for a single label.
type EndpointMatcher_MetadataLabelMatcher_MetadataLabels struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. Label name presented as key in xDS Node Metadata.
	LabelName string `protobuf:"bytes,1,opt,name=label_name,json=labelName,proto3" json:"label_name,omitempty"`
	// Required. Label value presented as value corresponding to the above
	// key, in xDS Node Metadata.
	LabelValue    string `protobuf:"bytes,2,opt,name=label_value,json=labelValue,proto3" json:"label_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndpointMatcher_MetadataLabelMatcher_MetadataLabels) Reset() {
	*x = EndpointMatcher_MetadataLabelMatcher_MetadataLabels{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndpointMatcher_MetadataLabelMatcher_MetadataLabels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointMatcher_MetadataLabelMatcher_MetadataLabels) ProtoMessage() {}

func (x *EndpointMatcher_MetadataLabelMatcher_MetadataLabels) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointMatcher_MetadataLabelMatcher_MetadataLabels.ProtoReflect.Descriptor instead.
func (*EndpointMatcher_MetadataLabelMatcher_MetadataLabels) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *EndpointMatcher_MetadataLabelMatcher_MetadataLabels) GetLabelName() string {
	if x != nil {
		return x.LabelName
	}
	return ""
}

func (x *EndpointMatcher_MetadataLabelMatcher_MetadataLabels) GetLabelValue() string {
	if x != nil {
		return x.LabelValue
	}
	return ""
}

// Specifies a match against a method.
type GrpcRoute_MethodMatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Specifies how to match against the name. If not specified, a
	// default value of "EXACT" is used.
	Type GrpcRoute_MethodMatch_Type `protobuf:"varint,1,opt,name=type,proto3,enum=google.events.cloud.networkservices.v1.GrpcRoute_MethodMatch_Type" json:"type,omitempty"`
	// Required. Name of the service to match against. If unspecified, will
	// match all services.
	GrpcService string `protobuf:"bytes,2,opt,name=grpc_service,json=grpcService,proto3" json:"grpc_service,omitempty"`
	// Required. Name of the method to match against. If unspecified, will match
	// all methods.
	GrpcMethod string `protobuf:"bytes,3,opt,name=grpc_method,json=grpcMethod,proto3" json:"grpc_method,omitempty"`
	// Optional. Specifies that matches are case sensitive.  The default value
	// is true. case_sensitive must not be used with a type of
	// REGULAR_EXPRESSION.
	CaseSensitive *bool `protobuf:"varint,4,opt,name=case_sensitive,json=caseSensitive,proto3,oneof" json:"case_sensitive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcRoute_MethodMatch) Reset() {
	*x = GrpcRoute_MethodMatch{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcRoute_MethodMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcRoute_MethodMatch) ProtoMessage() {}

func (x *GrpcRoute_MethodMatch) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcRoute_MethodMatch.ProtoReflect.Descriptor instead.
func (*GrpcRoute_MethodMatch) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{4, 0}
}

func (x *GrpcRoute_MethodMatch) GetType() GrpcRoute_MethodMatch_Type {
	if x != nil {
		return x.Type
	}
	return GrpcRoute_MethodMatch_TYPE_UNSPECIFIED
}

func (x *GrpcRoute_MethodMatch) GetGrpcService() string {
	if x != nil {
		return x.GrpcService
	}
	return ""
}

func (x *GrpcRoute_MethodMatch) GetGrpcMethod() string {
	if x != nil {
		return x.GrpcMethod
	}
	return ""
}

func (x *GrpcRoute_MethodMatch) GetCaseSensitive() bool {
	if x != nil && x.CaseSensitive != nil {
		return *x.CaseSensitive
	}
	return false
}

// A match against a collection of headers.
type GrpcRoute_HeaderMatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Specifies how to match against the value of the header. If not
	// specified, a default value of EXACT is used.
	Type GrpcRoute_HeaderMatch_Type `protobuf:"varint,1,opt,name=type,proto3,enum=google.events.cloud.networkservices.v1.GrpcRoute_HeaderMatch_Type" json:"type,omitempty"`
	// Required. The key of the header.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Required. The value of the header.
	Value         string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcRoute_HeaderMatch) Reset() {
	*x = GrpcRoute_HeaderMatch{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcRoute_HeaderMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcRoute_HeaderMatch) ProtoMessage() {}

func (x *GrpcRoute_HeaderMatch) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcRoute_HeaderMatch.ProtoReflect.Descriptor instead.
func (*GrpcRoute_HeaderMatch) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{4, 1}
}

func (x *GrpcRoute_HeaderMatch) GetType() GrpcRoute_HeaderMatch_Type {
	if x != nil {
		return x.Type
	}
	return GrpcRoute_HeaderMatch_TYPE_UNSPECIFIED
}

func (x *GrpcRoute_HeaderMatch) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GrpcRoute_HeaderMatch) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Criteria for matching traffic. A RouteMatch will be considered to match
// when all supplied fields match.
type GrpcRoute_RouteMatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. A gRPC method to match against. If this field is empty or
	// omitted, will match all methods.
	Method *GrpcRoute_MethodMatch `protobuf:"bytes,1,opt,name=method,proto3,oneof" json:"method,omitempty"`
	// Optional. Specifies a collection of headers to match.
	Headers       []*GrpcRoute_HeaderMatch `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcRoute_RouteMatch) Reset() {
	*x = GrpcRoute_RouteMatch{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcRoute_RouteMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcRoute_RouteMatch) ProtoMessage() {}

func (x *GrpcRoute_RouteMatch) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcRoute_RouteMatch.ProtoReflect.Descriptor instead.
func (*GrpcRoute_RouteMatch) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{4, 2}
}

func (x *GrpcRoute_RouteMatch) GetMethod() *GrpcRoute_MethodMatch {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *GrpcRoute_RouteMatch) GetHeaders() []*GrpcRoute_HeaderMatch {
	if x != nil {
		return x.Headers
	}
	return nil
}

// The destination to which traffic will be routed.
type GrpcRoute_Destination struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies the kind of destination to which traffic will be routed.
	//
	// Types that are valid to be assigned to DestinationType:
	//
	//	*GrpcRoute_Destination_ServiceName
	DestinationType isGrpcRoute_Destination_DestinationType `protobuf_oneof:"destination_type"`
	// Optional. Specifies the proportion of requests forwarded to the backend
	// referenced by the serviceName field. This is computed as:
	//
	//	weight/Sum(weights in this destination list).
	//
	// For non-zero values, there may be some epsilon from the exact proportion
	// defined here depending on the precision an implementation supports.
	//
	// If only one serviceName is specified and it has a weight greater than 0,
	// 100% of the traffic is forwarded to that backend.
	//
	// If weights are specified for any one service name, they need to be
	// specified for all of them.
	//
	// If weights are unspecified for all services, then, traffic is distributed
	// in equal proportions to all of them.
	Weight        *int32 `protobuf:"varint,2,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcRoute_Destination) Reset() {
	*x = GrpcRoute_Destination{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcRoute_Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcRoute_Destination) ProtoMessage() {}

func (x *GrpcRoute_Destination) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcRoute_Destination.ProtoReflect.Descriptor instead.
func (*GrpcRoute_Destination) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{4, 3}
}

func (x *GrpcRoute_Destination) GetDestinationType() isGrpcRoute_Destination_DestinationType {
	if x != nil {
		return x.DestinationType
	}
	return nil
}

func (x *GrpcRoute_Destination) GetServiceName() string {
	if x != nil {
		if x, ok := x.DestinationType.(*GrpcRoute_Destination_ServiceName); ok {
			return x.ServiceName
		}
	}
	return ""
}

func (x *GrpcRoute_Destination) GetWeight() int32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

type isGrpcRoute_Destination_DestinationType interface {
	isGrpcRoute_Destination_DestinationType()
}

type GrpcRoute_Destination_ServiceName struct {
	// Required. The URL of a destination service to which to route traffic.
	// Must refer to either a BackendService or ServiceDirectoryService.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3,oneof"`
}

func (*GrpcRoute_Destination_ServiceName) isGrpcRoute_Destination_DestinationType() {}

// The specification for fault injection introduced into traffic to test the
// resiliency of clients to destination service failure. As part of fault
// injection, when clients send requests to a destination, delays can be
// introduced on a percentage of requests before sending those requests to the
// destination service. Similarly requests from clients can be aborted by for
// a percentage of requests.
type GrpcRoute_FaultInjectionPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The specification for injecting delay to client requests.
	Delay *GrpcRoute_FaultInjectionPolicy_Delay `protobuf:"bytes,1,opt,name=delay,proto3,oneof" json:"delay,omitempty"`
	// The specification for aborting to client requests.
	Abort         *GrpcRoute_FaultInjectionPolicy_Abort `protobuf:"bytes,2,opt,name=abort,proto3,oneof" json:"abort,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcRoute_FaultInjectionPolicy) Reset() {
	*x = GrpcRoute_FaultInjectionPolicy{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcRoute_FaultInjectionPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcRoute_FaultInjectionPolicy) ProtoMessage() {}

func (x *GrpcRoute_FaultInjectionPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcRoute_FaultInjectionPolicy.ProtoReflect.Descriptor instead.
func (*GrpcRoute_FaultInjectionPolicy) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{4, 4}
}

func (x *GrpcRoute_FaultInjectionPolicy) GetDelay() *GrpcRoute_FaultInjectionPolicy_Delay {
	if x != nil {
		return x.Delay
	}
	return nil
}

func (x *GrpcRoute_FaultInjectionPolicy) GetAbort() *GrpcRoute_FaultInjectionPolicy_Abort {
	if x != nil {
		return x.Abort
	}
	return nil
}

// The specifications for retries.
type GrpcRoute_RetryPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	//   - connect-failure: Router will retry on failures connecting to Backend
	//     Services, for example due to connection timeouts.
	//   - refused-stream: Router will retry if the backend service resets the
	//
	// stream
	//
	//	with a REFUSED_STREAM error code. This reset type indicates that it is
	//	safe to retry.
	//
	// - cancelled: Router will retry if the gRPC status code in the response
	// header
	//
	//	is set to cancelled
	//
	// - deadline-exceeded: Router will retry if the gRPC status code in the
	// response
	//
	//	header is set to deadline-exceeded
	//   - resource-exhausted: Router will retry if the gRPC status code in the
	//     response header is set to resource-exhausted
	//   - unavailable: Router will retry if the gRPC status code in the response
	//     header is set to unavailable
	RetryConditions []string `protobuf:"bytes,1,rep,name=retry_conditions,json=retryConditions,proto3" json:"retry_conditions,omitempty"`
	// Specifies the allowed number of retries. This number must be > 0. If not
	// specified, default to 1.
	NumRetries    uint32 `protobuf:"varint,2,opt,name=num_retries,json=numRetries,proto3" json:"num_retries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcRoute_RetryPolicy) Reset() {
	*x = GrpcRoute_RetryPolicy{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcRoute_RetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcRoute_RetryPolicy) ProtoMessage() {}

func (x *GrpcRoute_RetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcRoute_RetryPolicy.ProtoReflect.Descriptor instead.
func (*GrpcRoute_RetryPolicy) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{4, 5}
}

func (x *GrpcRoute_RetryPolicy) GetRetryConditions() []string {
	if x != nil {
		return x.RetryConditions
	}
	return nil
}

func (x *GrpcRoute_RetryPolicy) GetNumRetries() uint32 {
	if x != nil {
		return x.NumRetries
	}
	return 0
}

// Specifies how to route matched traffic.
type GrpcRoute_RouteAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The destination services to which traffic should be forwarded.
	// If multiple destinations are specified, traffic will be split between
	// Backend Service(s) according to the weight field of these destinations.
	Destinations []*GrpcRoute_Destination `protobuf:"bytes,1,rep,name=destinations,proto3" json:"destinations,omitempty"`
	// Optional. The specification for fault injection introduced into traffic
	// to test the resiliency of clients to destination service failure. As part
	// of fault injection, when clients send requests to a destination, delays
	// can be introduced on a percentage of requests before sending those
	// requests to the destination service. Similarly requests from clients can
	// be aborted by for a percentage of requests.
	//
	// timeout and retry_policy will be ignored by clients that are configured
	// with a fault_injection_policy
	FaultInjectionPolicy *GrpcRoute_FaultInjectionPolicy `protobuf:"bytes,3,opt,name=fault_injection_policy,json=faultInjectionPolicy,proto3" json:"fault_injection_policy,omitempty"`
	// Optional. Specifies the timeout for selected route. Timeout is computed
	// from the time the request has been fully processed (i.e. end of stream)
	// up until the response has been completely processed. Timeout includes all
	// retries.
	Timeout *durationpb.Duration `protobuf:"bytes,7,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Optional. Specifies the retry policy associated with this route.
	RetryPolicy   *GrpcRoute_RetryPolicy `protobuf:"bytes,8,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcRoute_RouteAction) Reset() {
	*x = GrpcRoute_RouteAction{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcRoute_RouteAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcRoute_RouteAction) ProtoMessage() {}

func (x *GrpcRoute_RouteAction) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcRoute_RouteAction.ProtoReflect.Descriptor instead.
func (*GrpcRoute_RouteAction) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{4, 6}
}

func (x *GrpcRoute_RouteAction) GetDestinations() []*GrpcRoute_Destination {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *GrpcRoute_RouteAction) GetFaultInjectionPolicy() *GrpcRoute_FaultInjectionPolicy {
	if x != nil {
		return x.FaultInjectionPolicy
	}
	return nil
}

func (x *GrpcRoute_RouteAction) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *GrpcRoute_RouteAction) GetRetryPolicy() *GrpcRoute_RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

// Describes how to route traffic.
type GrpcRoute_RouteRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Matches define conditions used for matching the rule against
	// incoming gRPC requests. Each match is independent, i.e. this rule will be
	// matched if ANY one of the matches is satisfied.  If no matches field is
	// specified, this rule will unconditionally match traffic.
	Matches []*GrpcRoute_RouteMatch `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
	// Required. A detailed rule defining how to route traffic. This field is
	// required.
	Action        *GrpcRoute_RouteAction `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcRoute_RouteRule) Reset() {
	*x = GrpcRoute_RouteRule{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcRoute_RouteRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcRoute_RouteRule) ProtoMessage() {}

func (x *GrpcRoute_RouteRule) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcRoute_RouteRule.ProtoReflect.Descriptor instead.
func (*GrpcRoute_RouteRule) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{4, 7}
}

func (x *GrpcRoute_RouteRule) GetMatches() []*GrpcRoute_RouteMatch {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *GrpcRoute_RouteRule) GetAction() *GrpcRoute_RouteAction {
	if x != nil {
		return x.Action
	}
	return nil
}

// Specification of how client requests are delayed as part of fault
// injection before being sent to a destination.
type GrpcRoute_FaultInjectionPolicy_Delay struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specify a fixed delay before forwarding the request.
	FixedDelay *durationpb.Duration `protobuf:"bytes,1,opt,name=fixed_delay,json=fixedDelay,proto3,oneof" json:"fixed_delay,omitempty"`
	// The percentage of traffic on which delay will be injected.
	//
	// The value must be between [0, 100]
	Percentage    *int32 `protobuf:"varint,2,opt,name=percentage,proto3,oneof" json:"percentage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcRoute_FaultInjectionPolicy_Delay) Reset() {
	*x = GrpcRoute_FaultInjectionPolicy_Delay{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcRoute_FaultInjectionPolicy_Delay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcRoute_FaultInjectionPolicy_Delay) ProtoMessage() {}

func (x *GrpcRoute_FaultInjectionPolicy_Delay) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcRoute_FaultInjectionPolicy_Delay.ProtoReflect.Descriptor instead.
func (*GrpcRoute_FaultInjectionPolicy_Delay) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{4, 4, 0}
}

func (x *GrpcRoute_FaultInjectionPolicy_Delay) GetFixedDelay() *durationpb.Duration {
	if x != nil {
		return x.FixedDelay
	}
	return nil
}

func (x *GrpcRoute_FaultInjectionPolicy_Delay) GetPercentage() int32 {
	if x != nil && x.Percentage != nil {
		return *x.Percentage
	}
	return 0
}

// Specification of how client requests are aborted as part of fault
// injection before being sent to a destination.
type GrpcRoute_FaultInjectionPolicy_Abort struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The HTTP status code used to abort the request.
	//
	// The value must be between 200 and 599 inclusive.
	HttpStatus *int32 `protobuf:"varint,1,opt,name=http_status,json=httpStatus,proto3,oneof" json:"http_status,omitempty"`
	// The percentage of traffic which will be aborted.
	//
	// The value must be between [0, 100]
	Percentage    *int32 `protobuf:"varint,2,opt,name=percentage,proto3,oneof" json:"percentage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcRoute_FaultInjectionPolicy_Abort) Reset() {
	*x = GrpcRoute_FaultInjectionPolicy_Abort{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcRoute_FaultInjectionPolicy_Abort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcRoute_FaultInjectionPolicy_Abort) ProtoMessage() {}

func (x *GrpcRoute_FaultInjectionPolicy_Abort) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcRoute_FaultInjectionPolicy_Abort.ProtoReflect.Descriptor instead.
func (*GrpcRoute_FaultInjectionPolicy_Abort) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{4, 4, 1}
}

func (x *GrpcRoute_FaultInjectionPolicy_Abort) GetHttpStatus() int32 {
	if x != nil && x.HttpStatus != nil {
		return *x.HttpStatus
	}
	return 0
}

func (x *GrpcRoute_FaultInjectionPolicy_Abort) GetPercentage() int32 {
	if x != nil && x.Percentage != nil {
		return *x.Percentage
	}
	return 0
}

// Specifies how to select a route rule based on HTTP request headers.
type HttpRoute_HeaderMatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to MatchType:
	//
	//	*HttpRoute_HeaderMatch_ExactMatch
	//	*HttpRoute_HeaderMatch_RegexMatch
	//	*HttpRoute_HeaderMatch_PrefixMatch
	//	*HttpRoute_HeaderMatch_PresentMatch
	//	*HttpRoute_HeaderMatch_SuffixMatch
	//	*HttpRoute_HeaderMatch_RangeMatch
	MatchType isHttpRoute_HeaderMatch_MatchType `protobuf_oneof:"MatchType"`
	// The name of the HTTP header to match against.
	Header string `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// If specified, the match result will be inverted before checking. Default
	// value is set to false.
	InvertMatch   bool `protobuf:"varint,8,opt,name=invert_match,json=invertMatch,proto3" json:"invert_match,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpRoute_HeaderMatch) Reset() {
	*x = HttpRoute_HeaderMatch{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRoute_HeaderMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRoute_HeaderMatch) ProtoMessage() {}

func (x *HttpRoute_HeaderMatch) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRoute_HeaderMatch.ProtoReflect.Descriptor instead.
func (*HttpRoute_HeaderMatch) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{5, 0}
}

func (x *HttpRoute_HeaderMatch) GetMatchType() isHttpRoute_HeaderMatch_MatchType {
	if x != nil {
		return x.MatchType
	}
	return nil
}

func (x *HttpRoute_HeaderMatch) GetExactMatch() string {
	if x != nil {
		if x, ok := x.MatchType.(*HttpRoute_HeaderMatch_ExactMatch); ok {
			return x.ExactMatch
		}
	}
	return ""
}

func (x *HttpRoute_HeaderMatch) GetRegexMatch() string {
	if x != nil {
		if x, ok := x.MatchType.(*HttpRoute_HeaderMatch_RegexMatch); ok {
			return x.RegexMatch
		}
	}
	return ""
}

func (x *HttpRoute_HeaderMatch) GetPrefixMatch() string {
	if x != nil {
		if x, ok := x.MatchType.(*HttpRoute_HeaderMatch_PrefixMatch); ok {
			return x.PrefixMatch
		}
	}
	return ""
}

func (x *HttpRoute_HeaderMatch) GetPresentMatch() bool {
	if x != nil {
		if x, ok := x.MatchType.(*HttpRoute_HeaderMatch_PresentMatch); ok {
			return x.PresentMatch
		}
	}
	return false
}

func (x *HttpRoute_HeaderMatch) GetSuffixMatch() string {
	if x != nil {
		if x, ok := x.MatchType.(*HttpRoute_HeaderMatch_SuffixMatch); ok {
			return x.SuffixMatch
		}
	}
	return ""
}

func (x *HttpRoute_HeaderMatch) GetRangeMatch() *HttpRoute_HeaderMatch_IntegerRange {
	if x != nil {
		if x, ok := x.MatchType.(*HttpRoute_HeaderMatch_RangeMatch); ok {
			return x.RangeMatch
		}
	}
	return nil
}

func (x *HttpRoute_HeaderMatch) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

func (x *HttpRoute_HeaderMatch) GetInvertMatch() bool {
	if x != nil {
		return x.InvertMatch
	}
	return false
}

type isHttpRoute_HeaderMatch_MatchType interface {
	isHttpRoute_HeaderMatch_MatchType()
}

type HttpRoute_HeaderMatch_ExactMatch struct {
	// The value of the header should match exactly the content of
	// exact_match.
	ExactMatch string `protobuf:"bytes,2,opt,name=exact_match,json=exactMatch,proto3,oneof"`
}

type HttpRoute_HeaderMatch_RegexMatch struct {
	// The value of the header must match the regular expression specified in
	// regex_match. For regular expression grammar, please see:
	// https://github.com/google/re2/wiki/Syntax
	RegexMatch string `protobuf:"bytes,3,opt,name=regex_match,json=regexMatch,proto3,oneof"`
}

type HttpRoute_HeaderMatch_PrefixMatch struct {
	// The value of the header must start with the contents of prefix_match.
	PrefixMatch string `protobuf:"bytes,4,opt,name=prefix_match,json=prefixMatch,proto3,oneof"`
}

type HttpRoute_HeaderMatch_PresentMatch struct {
	// A header with header_name must exist. The match takes place whether or
	// not the header has a value.
	PresentMatch bool `protobuf:"varint,5,opt,name=present_match,json=presentMatch,proto3,oneof"`
}

type HttpRoute_HeaderMatch_SuffixMatch struct {
	// The value of the header must end with the contents of suffix_match.
	SuffixMatch string `protobuf:"bytes,6,opt,name=suffix_match,json=suffixMatch,proto3,oneof"`
}

type HttpRoute_HeaderMatch_RangeMatch struct {
	// If specified, the rule will match if the request header value is within
	// the range.
	RangeMatch *HttpRoute_HeaderMatch_IntegerRange `protobuf:"bytes,7,opt,name=range_match,json=rangeMatch,proto3,oneof"`
}

func (*HttpRoute_HeaderMatch_ExactMatch) isHttpRoute_HeaderMatch_MatchType() {}

func (*HttpRoute_HeaderMatch_RegexMatch) isHttpRoute_HeaderMatch_MatchType() {}

func (*HttpRoute_HeaderMatch_PrefixMatch) isHttpRoute_HeaderMatch_MatchType() {}

func (*HttpRoute_HeaderMatch_PresentMatch) isHttpRoute_HeaderMatch_MatchType() {}

func (*HttpRoute_HeaderMatch_SuffixMatch) isHttpRoute_HeaderMatch_MatchType() {}

func (*HttpRoute_HeaderMatch_RangeMatch) isHttpRoute_HeaderMatch_MatchType() {}

// Specifications to match a query parameter in the request.
type HttpRoute_QueryParameterMatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to MatchType:
	//
	//	*HttpRoute_QueryParameterMatch_ExactMatch
	//	*HttpRoute_QueryParameterMatch_RegexMatch
	//	*HttpRoute_QueryParameterMatch_PresentMatch
	MatchType isHttpRoute_QueryParameterMatch_MatchType `protobuf_oneof:"MatchType"`
	// The name of the query parameter to match.
	QueryParameter string `protobuf:"bytes,1,opt,name=query_parameter,json=queryParameter,proto3" json:"query_parameter,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HttpRoute_QueryParameterMatch) Reset() {
	*x = HttpRoute_QueryParameterMatch{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRoute_QueryParameterMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRoute_QueryParameterMatch) ProtoMessage() {}

func (x *HttpRoute_QueryParameterMatch) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRoute_QueryParameterMatch.ProtoReflect.Descriptor instead.
func (*HttpRoute_QueryParameterMatch) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{5, 1}
}

func (x *HttpRoute_QueryParameterMatch) GetMatchType() isHttpRoute_QueryParameterMatch_MatchType {
	if x != nil {
		return x.MatchType
	}
	return nil
}

func (x *HttpRoute_QueryParameterMatch) GetExactMatch() string {
	if x != nil {
		if x, ok := x.MatchType.(*HttpRoute_QueryParameterMatch_ExactMatch); ok {
			return x.ExactMatch
		}
	}
	return ""
}

func (x *HttpRoute_QueryParameterMatch) GetRegexMatch() string {
	if x != nil {
		if x, ok := x.MatchType.(*HttpRoute_QueryParameterMatch_RegexMatch); ok {
			return x.RegexMatch
		}
	}
	return ""
}

func (x *HttpRoute_QueryParameterMatch) GetPresentMatch() bool {
	if x != nil {
		if x, ok := x.MatchType.(*HttpRoute_QueryParameterMatch_PresentMatch); ok {
			return x.PresentMatch
		}
	}
	return false
}

func (x *HttpRoute_QueryParameterMatch) GetQueryParameter() string {
	if x != nil {
		return x.QueryParameter
	}
	return ""
}

type isHttpRoute_QueryParameterMatch_MatchType interface {
	isHttpRoute_QueryParameterMatch_MatchType()
}

type HttpRoute_QueryParameterMatch_ExactMatch struct {
	// The value of the query parameter must exactly match the contents of
	// exact_match.
	//
	// Only one of exact_match, regex_match, or present_match must be set.
	ExactMatch string `protobuf:"bytes,2,opt,name=exact_match,json=exactMatch,proto3,oneof"`
}

type HttpRoute_QueryParameterMatch_RegexMatch struct {
	// The value of the query parameter must match the regular expression
	// specified by regex_match. For regular expression grammar, please see
	// https://github.com/google/re2/wiki/Syntax
	//
	// Only one of exact_match, regex_match, or present_match must be set.
	RegexMatch string `protobuf:"bytes,3,opt,name=regex_match,json=regexMatch,proto3,oneof"`
}

type HttpRoute_QueryParameterMatch_PresentMatch struct {
	// Specifies that the QueryParameterMatcher matches if request contains
	// query parameter, irrespective of whether the parameter has a value or
	// not.
	//
	// Only one of exact_match, regex_match, or present_match must be set.
	PresentMatch bool `protobuf:"varint,4,opt,name=present_match,json=presentMatch,proto3,oneof"`
}

func (*HttpRoute_QueryParameterMatch_ExactMatch) isHttpRoute_QueryParameterMatch_MatchType() {}

func (*HttpRoute_QueryParameterMatch_RegexMatch) isHttpRoute_QueryParameterMatch_MatchType() {}

func (*HttpRoute_QueryParameterMatch_PresentMatch) isHttpRoute_QueryParameterMatch_MatchType() {}

// RouteMatch defines specifications used to match requests. If multiple match
// types are set, this RouteMatch will match if ALL type of matches are
// matched.
type HttpRoute_RouteMatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to PathMatch:
	//
	//	*HttpRoute_RouteMatch_FullPathMatch
	//	*HttpRoute_RouteMatch_PrefixMatch
	//	*HttpRoute_RouteMatch_RegexMatch
	PathMatch isHttpRoute_RouteMatch_PathMatch `protobuf_oneof:"PathMatch"`
	// Specifies if prefix_match and full_path_match matches are case sensitive.
	// The default value is false.
	IgnoreCase bool `protobuf:"varint,4,opt,name=ignore_case,json=ignoreCase,proto3" json:"ignore_case,omitempty"`
	// Specifies a list of HTTP request headers to match against. ALL of the
	// supplied headers must be matched.
	Headers []*HttpRoute_HeaderMatch `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty"`
	// Specifies a list of query parameters to match against. ALL of the query
	// parameters must be matched.
	QueryParameters []*HttpRoute_QueryParameterMatch `protobuf:"bytes,6,rep,name=query_parameters,json=queryParameters,proto3" json:"query_parameters,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *HttpRoute_RouteMatch) Reset() {
	*x = HttpRoute_RouteMatch{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRoute_RouteMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRoute_RouteMatch) ProtoMessage() {}

func (x *HttpRoute_RouteMatch) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRoute_RouteMatch.ProtoReflect.Descriptor instead.
func (*HttpRoute_RouteMatch) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{5, 2}
}

func (x *HttpRoute_RouteMatch) GetPathMatch() isHttpRoute_RouteMatch_PathMatch {
	if x != nil {
		return x.PathMatch
	}
	return nil
}

func (x *HttpRoute_RouteMatch) GetFullPathMatch() string {
	if x != nil {
		if x, ok := x.PathMatch.(*HttpRoute_RouteMatch_FullPathMatch); ok {
			return x.FullPathMatch
		}
	}
	return ""
}

func (x *HttpRoute_RouteMatch) GetPrefixMatch() string {
	if x != nil {
		if x, ok := x.PathMatch.(*HttpRoute_RouteMatch_PrefixMatch); ok {
			return x.PrefixMatch
		}
	}
	return ""
}

func (x *HttpRoute_RouteMatch) GetRegexMatch() string {
	if x != nil {
		if x, ok := x.PathMatch.(*HttpRoute_RouteMatch_RegexMatch); ok {
			return x.RegexMatch
		}
	}
	return ""
}

func (x *HttpRoute_RouteMatch) GetIgnoreCase() bool {
	if x != nil {
		return x.IgnoreCase
	}
	return false
}

func (x *HttpRoute_RouteMatch) GetHeaders() []*HttpRoute_HeaderMatch {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HttpRoute_RouteMatch) GetQueryParameters() []*HttpRoute_QueryParameterMatch {
	if x != nil {
		return x.QueryParameters
	}
	return nil
}

type isHttpRoute_RouteMatch_PathMatch interface {
	isHttpRoute_RouteMatch_PathMatch()
}

type HttpRoute_RouteMatch_FullPathMatch struct {
	// The HTTP request path value should exactly match this value.
	//
	// Only one of full_path_match, prefix_match, or regex_match should be
	// used.
	FullPathMatch string `protobuf:"bytes,1,opt,name=full_path_match,json=fullPathMatch,proto3,oneof"`
}

type HttpRoute_RouteMatch_PrefixMatch struct {
	// The HTTP request path value must begin with specified prefix_match.
	// prefix_match must begin with a /.
	//
	// Only one of full_path_match, prefix_match, or regex_match should be
	// used.
	PrefixMatch string `protobuf:"bytes,2,opt,name=prefix_match,json=prefixMatch,proto3,oneof"`
}

type HttpRoute_RouteMatch_RegexMatch struct {
	// The HTTP request path value must satisfy the regular expression
	// specified by regex_match after removing any query parameters and anchor
	// supplied with the original URL. For regular expression grammar, please
	// see https://github.com/google/re2/wiki/Syntax
	//
	// Only one of full_path_match, prefix_match, or regex_match should be
	// used.
	RegexMatch string `protobuf:"bytes,3,opt,name=regex_match,json=regexMatch,proto3,oneof"`
}

func (*HttpRoute_RouteMatch_FullPathMatch) isHttpRoute_RouteMatch_PathMatch() {}

func (*HttpRoute_RouteMatch_PrefixMatch) isHttpRoute_RouteMatch_PathMatch() {}

func (*HttpRoute_RouteMatch_RegexMatch) isHttpRoute_RouteMatch_PathMatch() {}

// Specifications of a destination to which the request should be routed to.
type HttpRoute_Destination struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The URL of a BackendService to route traffic to.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Specifies the proportion of requests forwarded to the backend referenced
	// by the serviceName field. This is computed as:
	//
	//	weight/Sum(weights in this destination list).
	//
	// For non-zero values, there may be some epsilon from the exact proportion
	// defined here depending on the precision an implementation supports.
	//
	// If only one serviceName is specified and it has a weight greater than 0,
	// 100% of the traffic is forwarded to that backend.
	//
	// If weights are specified for any one service name, they need to be
	// specified for all of them.
	//
	// If weights are unspecified for all services, then, traffic is distributed
	// in equal proportions to all of them.
	Weight        int32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpRoute_Destination) Reset() {
	*x = HttpRoute_Destination{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRoute_Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRoute_Destination) ProtoMessage() {}

func (x *HttpRoute_Destination) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRoute_Destination.ProtoReflect.Descriptor instead.
func (*HttpRoute_Destination) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{5, 3}
}

func (x *HttpRoute_Destination) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *HttpRoute_Destination) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

// The specification for redirecting traffic.
type HttpRoute_Redirect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The host that will be used in the redirect response instead of the one
	// that was supplied in the request.
	HostRedirect string `protobuf:"bytes,1,opt,name=host_redirect,json=hostRedirect,proto3" json:"host_redirect,omitempty"`
	// The path that will be used in the redirect response instead of the one
	// that was supplied in the request.
	// path_redirect can not be supplied together with prefix_redirect. Supply
	// one alone or neither. If neither is supplied, the path of the original
	// request will be used for the redirect.
	PathRedirect string `protobuf:"bytes,2,opt,name=path_redirect,json=pathRedirect,proto3" json:"path_redirect,omitempty"`
	// Indicates that during redirection, the matched prefix (or path) should be
	// swapped with this value. This option allows URLs be dynamically created
	// based on the request.
	PrefixRewrite string `protobuf:"bytes,3,opt,name=prefix_rewrite,json=prefixRewrite,proto3" json:"prefix_rewrite,omitempty"`
	// The HTTP Status code to use for the redirect.
	ResponseCode HttpRoute_Redirect_ResponseCode `protobuf:"varint,4,opt,name=response_code,json=responseCode,proto3,enum=google.events.cloud.networkservices.v1.HttpRoute_Redirect_ResponseCode" json:"response_code,omitempty"`
	// If set to true, the URL scheme in the redirected request is set to https.
	// If set to false, the URL scheme of the redirected request will remain the
	// same as that of the request.
	//
	// The default is set to false.
	HttpsRedirect bool `protobuf:"varint,5,opt,name=https_redirect,json=httpsRedirect,proto3" json:"https_redirect,omitempty"`
	// if set to true, any accompanying query portion of the original URL is
	// removed prior to redirecting the request. If set to false, the query
	// portion of the original URL is retained.
	//
	// The default is set to false.
	StripQuery bool `protobuf:"varint,6,opt,name=strip_query,json=stripQuery,proto3" json:"strip_query,omitempty"`
	// The port that will be used in the redirected request instead of the one
	// that was supplied in the request.
	PortRedirect  int32 `protobuf:"varint,7,opt,name=port_redirect,json=portRedirect,proto3" json:"port_redirect,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpRoute_Redirect) Reset() {
	*x = HttpRoute_Redirect{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRoute_Redirect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRoute_Redirect) ProtoMessage() {}

func (x *HttpRoute_Redirect) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRoute_Redirect.ProtoReflect.Descriptor instead.
func (*HttpRoute_Redirect) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{5, 4}
}

func (x *HttpRoute_Redirect) GetHostRedirect() string {
	if x != nil {
		return x.HostRedirect
	}
	return ""
}

func (x *HttpRoute_Redirect) GetPathRedirect() string {
	if x != nil {
		return x.PathRedirect
	}
	return ""
}

func (x *HttpRoute_Redirect) GetPrefixRewrite() string {
	if x != nil {
		return x.PrefixRewrite
	}
	return ""
}

func (x *HttpRoute_Redirect) GetResponseCode() HttpRoute_Redirect_ResponseCode {
	if x != nil {
		return x.ResponseCode
	}
	return HttpRoute_Redirect_RESPONSE_CODE_UNSPECIFIED
}

func (x *HttpRoute_Redirect) GetHttpsRedirect() bool {
	if x != nil {
		return x.HttpsRedirect
	}
	return false
}

func (x *HttpRoute_Redirect) GetStripQuery() bool {
	if x != nil {
		return x.StripQuery
	}
	return false
}

func (x *HttpRoute_Redirect) GetPortRedirect() int32 {
	if x != nil {
		return x.PortRedirect
	}
	return 0
}

// The specification for fault injection introduced into traffic to test the
// resiliency of clients to destination service failure. As part of fault
// injection, when clients send requests to a destination, delays can be
// introduced by client proxy on a percentage of requests before sending those
// requests to the destination service. Similarly requests can be aborted by
// client proxy for a percentage of requests.
type HttpRoute_FaultInjectionPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The specification for injecting delay to client requests.
	Delay *HttpRoute_FaultInjectionPolicy_Delay `protobuf:"bytes,1,opt,name=delay,proto3" json:"delay,omitempty"`
	// The specification for aborting to client requests.
	Abort         *HttpRoute_FaultInjectionPolicy_Abort `protobuf:"bytes,2,opt,name=abort,proto3" json:"abort,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpRoute_FaultInjectionPolicy) Reset() {
	*x = HttpRoute_FaultInjectionPolicy{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRoute_FaultInjectionPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRoute_FaultInjectionPolicy) ProtoMessage() {}

func (x *HttpRoute_FaultInjectionPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRoute_FaultInjectionPolicy.ProtoReflect.Descriptor instead.
func (*HttpRoute_FaultInjectionPolicy) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{5, 5}
}

func (x *HttpRoute_FaultInjectionPolicy) GetDelay() *HttpRoute_FaultInjectionPolicy_Delay {
	if x != nil {
		return x.Delay
	}
	return nil
}

func (x *HttpRoute_FaultInjectionPolicy) GetAbort() *HttpRoute_FaultInjectionPolicy_Abort {
	if x != nil {
		return x.Abort
	}
	return nil
}

// The specification for modifying HTTP header in HTTP request and HTTP
// response.
type HttpRoute_HeaderModifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Completely overwrite/replace the headers with given map where key is the
	// name of the header, value is the value of the header.
	Set map[string]string `protobuf:"bytes,1,rep,name=set,proto3" json:"set,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Add the headers with given map where key is the name of the header, value
	// is the value of the header.
	Add map[string]string `protobuf:"bytes,2,rep,name=add,proto3" json:"add,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Remove headers (matching by header names) specified in the list.
	Remove        []string `protobuf:"bytes,3,rep,name=remove,proto3" json:"remove,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpRoute_HeaderModifier) Reset() {
	*x = HttpRoute_HeaderModifier{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRoute_HeaderModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRoute_HeaderModifier) ProtoMessage() {}

func (x *HttpRoute_HeaderModifier) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRoute_HeaderModifier.ProtoReflect.Descriptor instead.
func (*HttpRoute_HeaderModifier) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{5, 6}
}

func (x *HttpRoute_HeaderModifier) GetSet() map[string]string {
	if x != nil {
		return x.Set
	}
	return nil
}

func (x *HttpRoute_HeaderModifier) GetAdd() map[string]string {
	if x != nil {
		return x.Add
	}
	return nil
}

func (x *HttpRoute_HeaderModifier) GetRemove() []string {
	if x != nil {
		return x.Remove
	}
	return nil
}

// The specification for modifying the URL of the request, prior to forwarding
// the request to the destination.
type HttpRoute_URLRewrite struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Prior to forwarding the request to the selected destination, the matching
	// portion of the requests path is replaced by this value.
	PathPrefixRewrite string `protobuf:"bytes,1,opt,name=path_prefix_rewrite,json=pathPrefixRewrite,proto3" json:"path_prefix_rewrite,omitempty"`
	// Prior to forwarding the request to the selected destination, the requests
	// host header is replaced by this value.
	HostRewrite   string `protobuf:"bytes,2,opt,name=host_rewrite,json=hostRewrite,proto3" json:"host_rewrite,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpRoute_URLRewrite) Reset() {
	*x = HttpRoute_URLRewrite{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRoute_URLRewrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRoute_URLRewrite) ProtoMessage() {}

func (x *HttpRoute_URLRewrite) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRoute_URLRewrite.ProtoReflect.Descriptor instead.
func (*HttpRoute_URLRewrite) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{5, 7}
}

func (x *HttpRoute_URLRewrite) GetPathPrefixRewrite() string {
	if x != nil {
		return x.PathPrefixRewrite
	}
	return ""
}

func (x *HttpRoute_URLRewrite) GetHostRewrite() string {
	if x != nil {
		return x.HostRewrite
	}
	return ""
}

// The specifications for retries.
type HttpRoute_RetryPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies one or more conditions when this retry policy applies. Valid
	// values are:
	//
	//	5xx: Proxy will attempt a retry if the destination service responds
	//	  with any 5xx response code, of if the destination service does not
	//	  respond at all, example: disconnect, reset, read timeout, connection
	//	  failure and refused streams.
	//
	//	gateway-error: Similar to 5xx, but only applies to response codes 502,
	//	  503, 504.
	//
	//	reset: Proxy will attempt a retry if the destination service does not
	//	  respond at all (disconnect/reset/read timeout)
	//
	//	connect-failure: Proxy will retry on failures connecting to destination
	//	  for example due to connection timeouts.
	//
	//	retriable-4xx: Proxy will retry fro retriable 4xx response codes.
	//	  Currently the only retriable error supported is 409.
	//
	//	refused-stream: Proxy will retry if the destination resets the stream
	//	  with a REFUSED_STREAM error code. This reset type indicates that it
	//	  is safe to retry.
	RetryConditions []string `protobuf:"bytes,1,rep,name=retry_conditions,json=retryConditions,proto3" json:"retry_conditions,omitempty"`
	// Specifies the allowed number of retries. This number must be > 0. If not
	// specified, default to 1.
	NumRetries int32 `protobuf:"varint,2,opt,name=num_retries,json=numRetries,proto3" json:"num_retries,omitempty"`
	// Specifies a non-zero timeout per retry attempt.
	PerTryTimeout *durationpb.Duration `protobuf:"bytes,3,opt,name=per_try_timeout,json=perTryTimeout,proto3" json:"per_try_timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpRoute_RetryPolicy) Reset() {
	*x = HttpRoute_RetryPolicy{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRoute_RetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRoute_RetryPolicy) ProtoMessage() {}

func (x *HttpRoute_RetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRoute_RetryPolicy.ProtoReflect.Descriptor instead.
func (*HttpRoute_RetryPolicy) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{5, 8}
}

func (x *HttpRoute_RetryPolicy) GetRetryConditions() []string {
	if x != nil {
		return x.RetryConditions
	}
	return nil
}

func (x *HttpRoute_RetryPolicy) GetNumRetries() int32 {
	if x != nil {
		return x.NumRetries
	}
	return 0
}

func (x *HttpRoute_RetryPolicy) GetPerTryTimeout() *durationpb.Duration {
	if x != nil {
		return x.PerTryTimeout
	}
	return nil
}

// Specifies the policy on how requests are shadowed to a separate mirrored
// destination service. The proxy does not wait for responses from the
// shadow service. Prior to sending traffic to the shadow service, the
// host/authority header is suffixed with -shadow.
type HttpRoute_RequestMirrorPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The destination the requests will be mirrored to. The weight of the
	// destination will be ignored.
	Destination   *HttpRoute_Destination `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpRoute_RequestMirrorPolicy) Reset() {
	*x = HttpRoute_RequestMirrorPolicy{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRoute_RequestMirrorPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRoute_RequestMirrorPolicy) ProtoMessage() {}

func (x *HttpRoute_RequestMirrorPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRoute_RequestMirrorPolicy.ProtoReflect.Descriptor instead.
func (*HttpRoute_RequestMirrorPolicy) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{5, 9}
}

func (x *HttpRoute_RequestMirrorPolicy) GetDestination() *HttpRoute_Destination {
	if x != nil {
		return x.Destination
	}
	return nil
}

// The Specification for allowing client side cross-origin requests.
type HttpRoute_CorsPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies the list of origins that will be allowed to do CORS requests.
	// An origin is allowed if it matches either an item in allow_origins or
	// an item in allow_origin_regexes.
	AllowOrigins []string `protobuf:"bytes,1,rep,name=allow_origins,json=allowOrigins,proto3" json:"allow_origins,omitempty"`
	// Specifies the regular expression patterns that match allowed origins. For
	// regular expression grammar, please see
	// https://github.com/google/re2/wiki/Syntax.
	AllowOriginRegexes []string `protobuf:"bytes,2,rep,name=allow_origin_regexes,json=allowOriginRegexes,proto3" json:"allow_origin_regexes,omitempty"`
	// Specifies the content for Access-Control-Allow-Methods header.
	AllowMethods []string `protobuf:"bytes,3,rep,name=allow_methods,json=allowMethods,proto3" json:"allow_methods,omitempty"`
	// Specifies the content for Access-Control-Allow-Headers header.
	AllowHeaders []string `protobuf:"bytes,4,rep,name=allow_headers,json=allowHeaders,proto3" json:"allow_headers,omitempty"`
	// Specifies the content for Access-Control-Expose-Headers header.
	ExposeHeaders []string `protobuf:"bytes,5,rep,name=expose_headers,json=exposeHeaders,proto3" json:"expose_headers,omitempty"`
	// Specifies how long result of a preflight request can be cached in
	// seconds. This translates to the Access-Control-Max-Age header.
	MaxAge string `protobuf:"bytes,6,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	// In response to a preflight request, setting this to true indicates that
	// the actual request can include user credentials. This translates to the
	// Access-Control-Allow-Credentials header.
	//
	// Default value is false.
	AllowCredentials bool `protobuf:"varint,7,opt,name=allow_credentials,json=allowCredentials,proto3" json:"allow_credentials,omitempty"`
	// If true, the CORS policy is disabled. The default value is false, which
	// indicates that the CORS policy is in effect.
	Disabled      bool `protobuf:"varint,8,opt,name=disabled,proto3" json:"disabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpRoute_CorsPolicy) Reset() {
	*x = HttpRoute_CorsPolicy{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRoute_CorsPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRoute_CorsPolicy) ProtoMessage() {}

func (x *HttpRoute_CorsPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRoute_CorsPolicy.ProtoReflect.Descriptor instead.
func (*HttpRoute_CorsPolicy) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{5, 10}
}

func (x *HttpRoute_CorsPolicy) GetAllowOrigins() []string {
	if x != nil {
		return x.AllowOrigins
	}
	return nil
}

func (x *HttpRoute_CorsPolicy) GetAllowOriginRegexes() []string {
	if x != nil {
		return x.AllowOriginRegexes
	}
	return nil
}

func (x *HttpRoute_CorsPolicy) GetAllowMethods() []string {
	if x != nil {
		return x.AllowMethods
	}
	return nil
}

func (x *HttpRoute_CorsPolicy) GetAllowHeaders() []string {
	if x != nil {
		return x.AllowHeaders
	}
	return nil
}

func (x *HttpRoute_CorsPolicy) GetExposeHeaders() []string {
	if x != nil {
		return x.ExposeHeaders
	}
	return nil
}

func (x *HttpRoute_CorsPolicy) GetMaxAge() string {
	if x != nil {
		return x.MaxAge
	}
	return ""
}

func (x *HttpRoute_CorsPolicy) GetAllowCredentials() bool {
	if x != nil {
		return x.AllowCredentials
	}
	return false
}

func (x *HttpRoute_CorsPolicy) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

// The specifications for routing traffic and applying associated policies.
type HttpRoute_RouteAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The destination to which traffic should be forwarded.
	Destinations []*HttpRoute_Destination `protobuf:"bytes,1,rep,name=destinations,proto3" json:"destinations,omitempty"`
	// If set, the request is directed as configured by this field.
	Redirect *HttpRoute_Redirect `protobuf:"bytes,2,opt,name=redirect,proto3" json:"redirect,omitempty"`
	// The specification for fault injection introduced into traffic to test the
	// resiliency of clients to backend service failure. As part of fault
	// injection, when clients send requests to a backend service, delays can be
	// introduced  on a percentage of requests before sending those requests to
	// the backend service. Similarly requests from clients can be aborted for a
	// percentage of requests.
	//
	// timeout and retry_policy will be ignored by clients that are configured
	// with a fault_injection_policy
	FaultInjectionPolicy *HttpRoute_FaultInjectionPolicy `protobuf:"bytes,4,opt,name=fault_injection_policy,json=faultInjectionPolicy,proto3" json:"fault_injection_policy,omitempty"`
	// The specification for modifying the headers of a matching request prior
	// to delivery of the request to the destination.
	RequestHeaderModifier *HttpRoute_HeaderModifier `protobuf:"bytes,5,opt,name=request_header_modifier,json=requestHeaderModifier,proto3" json:"request_header_modifier,omitempty"`
	// The specification for modifying the headers of a response prior to
	// sending the response back to the client.
	ResponseHeaderModifier *HttpRoute_HeaderModifier `protobuf:"bytes,6,opt,name=response_header_modifier,json=responseHeaderModifier,proto3" json:"response_header_modifier,omitempty"`
	// The specification for rewrite URL before forwarding requests to the
	// destination.
	UrlRewrite *HttpRoute_URLRewrite `protobuf:"bytes,7,opt,name=url_rewrite,json=urlRewrite,proto3" json:"url_rewrite,omitempty"`
	// Specifies the timeout for selected route. Timeout is computed from the
	// time the request has been fully processed (i.e. end of stream) up until
	// the response has been completely processed. Timeout includes all retries.
	Timeout *durationpb.Duration `protobuf:"bytes,8,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Specifies the retry policy associated with this route.
	RetryPolicy *HttpRoute_RetryPolicy `protobuf:"bytes,9,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	// Specifies the policy on how requests intended for the routes destination
	// are shadowed to a separate mirrored destination. Proxy will not wait for
	// the shadow destination to respond before returning the response. Prior to
	// sending traffic to the shadow service, the host/authority header is
	// suffixed with -shadow.
	RequestMirrorPolicy *HttpRoute_RequestMirrorPolicy `protobuf:"bytes,10,opt,name=request_mirror_policy,json=requestMirrorPolicy,proto3" json:"request_mirror_policy,omitempty"`
	// The specification for allowing client side cross-origin requests.
	CorsPolicy    *HttpRoute_CorsPolicy `protobuf:"bytes,11,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpRoute_RouteAction) Reset() {
	*x = HttpRoute_RouteAction{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRoute_RouteAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRoute_RouteAction) ProtoMessage() {}

func (x *HttpRoute_RouteAction) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRoute_RouteAction.ProtoReflect.Descriptor instead.
func (*HttpRoute_RouteAction) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{5, 11}
}

func (x *HttpRoute_RouteAction) GetDestinations() []*HttpRoute_Destination {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *HttpRoute_RouteAction) GetRedirect() *HttpRoute_Redirect {
	if x != nil {
		return x.Redirect
	}
	return nil
}

func (x *HttpRoute_RouteAction) GetFaultInjectionPolicy() *HttpRoute_FaultInjectionPolicy {
	if x != nil {
		return x.FaultInjectionPolicy
	}
	return nil
}

func (x *HttpRoute_RouteAction) GetRequestHeaderModifier() *HttpRoute_HeaderModifier {
	if x != nil {
		return x.RequestHeaderModifier
	}
	return nil
}

func (x *HttpRoute_RouteAction) GetResponseHeaderModifier() *HttpRoute_HeaderModifier {
	if x != nil {
		return x.ResponseHeaderModifier
	}
	return nil
}

func (x *HttpRoute_RouteAction) GetUrlRewrite() *HttpRoute_URLRewrite {
	if x != nil {
		return x.UrlRewrite
	}
	return nil
}

func (x *HttpRoute_RouteAction) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *HttpRoute_RouteAction) GetRetryPolicy() *HttpRoute_RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *HttpRoute_RouteAction) GetRequestMirrorPolicy() *HttpRoute_RequestMirrorPolicy {
	if x != nil {
		return x.RequestMirrorPolicy
	}
	return nil
}

func (x *HttpRoute_RouteAction) GetCorsPolicy() *HttpRoute_CorsPolicy {
	if x != nil {
		return x.CorsPolicy
	}
	return nil
}

// Specifies how to match traffic and how to route traffic when traffic is
// matched.
type HttpRoute_RouteRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of matches define conditions used for matching the rule against
	// incoming HTTP requests. Each match is independent, i.e. this rule will be
	// matched if ANY one of the matches is satisfied.
	//
	// If no matches field is specified, this rule will unconditionally match
	// traffic.
	//
	// If a default rule is desired to be configured, add a rule with no matches
	// specified to the end of the rules list.
	Matches []*HttpRoute_RouteMatch `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
	// The detailed rule defining how to route matched traffic.
	Action        *HttpRoute_RouteAction `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpRoute_RouteRule) Reset() {
	*x = HttpRoute_RouteRule{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRoute_RouteRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRoute_RouteRule) ProtoMessage() {}

func (x *HttpRoute_RouteRule) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRoute_RouteRule.ProtoReflect.Descriptor instead.
func (*HttpRoute_RouteRule) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{5, 12}
}

func (x *HttpRoute_RouteRule) GetMatches() []*HttpRoute_RouteMatch {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *HttpRoute_RouteRule) GetAction() *HttpRoute_RouteAction {
	if x != nil {
		return x.Action
	}
	return nil
}

// Represents an integer value range.
type HttpRoute_HeaderMatch_IntegerRange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Start of the range (inclusive)
	Start int32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// End of the range (exclusive)
	End           int32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpRoute_HeaderMatch_IntegerRange) Reset() {
	*x = HttpRoute_HeaderMatch_IntegerRange{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRoute_HeaderMatch_IntegerRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRoute_HeaderMatch_IntegerRange) ProtoMessage() {}

func (x *HttpRoute_HeaderMatch_IntegerRange) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRoute_HeaderMatch_IntegerRange.ProtoReflect.Descriptor instead.
func (*HttpRoute_HeaderMatch_IntegerRange) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{5, 0, 0}
}

func (x *HttpRoute_HeaderMatch_IntegerRange) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *HttpRoute_HeaderMatch_IntegerRange) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

// Specification of how client requests are delayed as part of fault
// injection before being sent to a destination.
type HttpRoute_FaultInjectionPolicy_Delay struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specify a fixed delay before forwarding the request.
	FixedDelay *durationpb.Duration `protobuf:"bytes,1,opt,name=fixed_delay,json=fixedDelay,proto3" json:"fixed_delay,omitempty"`
	// The percentage of traffic on which delay will be injected.
	//
	// The value must be between [0, 100]
	Percentage    int32 `protobuf:"varint,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpRoute_FaultInjectionPolicy_Delay) Reset() {
	*x = HttpRoute_FaultInjectionPolicy_Delay{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRoute_FaultInjectionPolicy_Delay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRoute_FaultInjectionPolicy_Delay) ProtoMessage() {}

func (x *HttpRoute_FaultInjectionPolicy_Delay) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRoute_FaultInjectionPolicy_Delay.ProtoReflect.Descriptor instead.
func (*HttpRoute_FaultInjectionPolicy_Delay) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{5, 5, 0}
}

func (x *HttpRoute_FaultInjectionPolicy_Delay) GetFixedDelay() *durationpb.Duration {
	if x != nil {
		return x.FixedDelay
	}
	return nil
}

func (x *HttpRoute_FaultInjectionPolicy_Delay) GetPercentage() int32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

// Specification of how client requests are aborted as part of fault
// injection before being sent to a destination.
type HttpRoute_FaultInjectionPolicy_Abort struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The HTTP status code used to abort the request.
	//
	// The value must be between 200 and 599 inclusive.
	HttpStatus int32 `protobuf:"varint,1,opt,name=http_status,json=httpStatus,proto3" json:"http_status,omitempty"`
	// The percentage of traffic which will be aborted.
	//
	// The value must be between [0, 100]
	Percentage    int32 `protobuf:"varint,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpRoute_FaultInjectionPolicy_Abort) Reset() {
	*x = HttpRoute_FaultInjectionPolicy_Abort{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRoute_FaultInjectionPolicy_Abort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRoute_FaultInjectionPolicy_Abort) ProtoMessage() {}

func (x *HttpRoute_FaultInjectionPolicy_Abort) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRoute_FaultInjectionPolicy_Abort.ProtoReflect.Descriptor instead.
func (*HttpRoute_FaultInjectionPolicy_Abort) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{5, 5, 1}
}

func (x *HttpRoute_FaultInjectionPolicy_Abort) GetHttpStatus() int32 {
	if x != nil {
		return x.HttpStatus
	}
	return 0
}

func (x *HttpRoute_FaultInjectionPolicy_Abort) GetPercentage() int32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

// Specifies how to match traffic and how to route traffic when traffic is
// matched.
type TcpRoute_RouteRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. RouteMatch defines the predicate used to match requests to a
	// given action. Multiple match types are "OR"ed for evaluation. If no
	// routeMatch field is specified, this rule will unconditionally match
	// traffic.
	Matches []*TcpRoute_RouteMatch `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
	// Required. The detailed rule defining how to route matched traffic.
	Action        *TcpRoute_RouteAction `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TcpRoute_RouteRule) Reset() {
	*x = TcpRoute_RouteRule{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TcpRoute_RouteRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpRoute_RouteRule) ProtoMessage() {}

func (x *TcpRoute_RouteRule) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpRoute_RouteRule.ProtoReflect.Descriptor instead.
func (*TcpRoute_RouteRule) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{8, 0}
}

func (x *TcpRoute_RouteRule) GetMatches() []*TcpRoute_RouteMatch {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *TcpRoute_RouteRule) GetAction() *TcpRoute_RouteAction {
	if x != nil {
		return x.Action
	}
	return nil
}

// RouteMatch defines the predicate used to match requests to a given action.
// Multiple match types are "OR"ed for evaluation.
// If no routeMatch field is specified, this rule will unconditionally match
// traffic.
type TcpRoute_RouteMatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. Must be specified in the CIDR range format. A CIDR range
	// consists of an IP Address and a prefix length to construct the subnet
	// mask. By default, the prefix length is 32 (i.e. matches a single IP
	// address). Only IPV4 addresses are supported. Examples: "10.0.0.1" -
	// matches against this exact IP address. "10.0.0.0/8" - matches against any
	// IP address within the 10.0.0.0 subnet and 255.255.255.0 mask. "0.0.0.0/0"
	// - matches against any IP address'.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Required. Specifies the destination port to match against.
	Port          string `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TcpRoute_RouteMatch) Reset() {
	*x = TcpRoute_RouteMatch{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TcpRoute_RouteMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpRoute_RouteMatch) ProtoMessage() {}

func (x *TcpRoute_RouteMatch) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpRoute_RouteMatch.ProtoReflect.Descriptor instead.
func (*TcpRoute_RouteMatch) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{8, 1}
}

func (x *TcpRoute_RouteMatch) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TcpRoute_RouteMatch) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

// The specifications for routing traffic and applying associated policies.
type TcpRoute_RouteAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The destination services to which traffic should be forwarded.
	// At least one destination service is required. Only one of route
	// destination or original destination can be set.
	Destinations []*TcpRoute_RouteDestination `protobuf:"bytes,1,rep,name=destinations,proto3" json:"destinations,omitempty"`
	// Optional. If true, Router will use the destination IP and port of the
	// original connection as the destination of the request. Default is false.
	// Only one of route destinations or original destination can be set.
	OriginalDestination bool `protobuf:"varint,3,opt,name=original_destination,json=originalDestination,proto3" json:"original_destination,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TcpRoute_RouteAction) Reset() {
	*x = TcpRoute_RouteAction{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TcpRoute_RouteAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpRoute_RouteAction) ProtoMessage() {}

func (x *TcpRoute_RouteAction) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpRoute_RouteAction.ProtoReflect.Descriptor instead.
func (*TcpRoute_RouteAction) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{8, 2}
}

func (x *TcpRoute_RouteAction) GetDestinations() []*TcpRoute_RouteDestination {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *TcpRoute_RouteAction) GetOriginalDestination() bool {
	if x != nil {
		return x.OriginalDestination
	}
	return false
}

// Describe the destination for traffic to be routed to.
type TcpRoute_RouteDestination struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The URL of a BackendService to route traffic to.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Optional. Specifies the proportion of requests forwarded to the backend
	// referenced by the serviceName field. This is computed as:
	//
	//	weight/Sum(weights in this destination list).
	//
	// For non-zero values, there may be some epsilon from the exact proportion
	// defined here depending on the precision an implementation supports.
	//
	// If only one serviceName is specified and it has a weight greater than 0,
	// 100% of the traffic is forwarded to that backend.
	//
	// If weights are specified for any one service name, they need to be
	// specified for all of them.
	//
	// If weights are unspecified for all services, then, traffic is distributed
	// in equal proportions to all of them.
	Weight        int32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TcpRoute_RouteDestination) Reset() {
	*x = TcpRoute_RouteDestination{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TcpRoute_RouteDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpRoute_RouteDestination) ProtoMessage() {}

func (x *TcpRoute_RouteDestination) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpRoute_RouteDestination.ProtoReflect.Descriptor instead.
func (*TcpRoute_RouteDestination) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{8, 3}
}

func (x *TcpRoute_RouteDestination) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *TcpRoute_RouteDestination) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

// Specifies how to match traffic and how to route traffic when traffic is
// matched.
type TlsRoute_RouteRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. RouteMatch defines the predicate used to match requests to a
	// given action. Multiple match types are "OR"ed for evaluation.
	Matches []*TlsRoute_RouteMatch `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
	// Required. The detailed rule defining how to route matched traffic.
	Action        *TlsRoute_RouteAction `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TlsRoute_RouteRule) Reset() {
	*x = TlsRoute_RouteRule{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TlsRoute_RouteRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TlsRoute_RouteRule) ProtoMessage() {}

func (x *TlsRoute_RouteRule) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TlsRoute_RouteRule.ProtoReflect.Descriptor instead.
func (*TlsRoute_RouteRule) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{9, 0}
}

func (x *TlsRoute_RouteRule) GetMatches() []*TlsRoute_RouteMatch {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *TlsRoute_RouteRule) GetAction() *TlsRoute_RouteAction {
	if x != nil {
		return x.Action
	}
	return nil
}

// RouteMatch defines the predicate used to match requests to a given action.
// Multiple match types are "AND"ed for evaluation.
// If no routeMatch field is specified, this rule will unconditionally match
// traffic.
type TlsRoute_RouteMatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. SNI (server name indicator) to match against.
	// SNI will be matched against all wildcard domains, i.e. `www.example.com`
	// will be first matched against `www.example.com`, then `*.example.com`,
	// then `*.com.`
	// Partial wildcards are not supported, and values like *w.example.com are
	// invalid.
	// At least one of sni_host and alpn is required.
	// Up to 5 sni hosts across all matches can be set.
	SniHost []string `protobuf:"bytes,1,rep,name=sni_host,json=sniHost,proto3" json:"sni_host,omitempty"`
	// Optional. ALPN (Application-Layer Protocol Negotiation) to match against.
	// Examples: "http/1.1", "h2".
	// At least one of sni_host and alpn is required.
	// Up to 5 alpns across all matches can be set.
	Alpn          []string `protobuf:"bytes,2,rep,name=alpn,proto3" json:"alpn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TlsRoute_RouteMatch) Reset() {
	*x = TlsRoute_RouteMatch{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TlsRoute_RouteMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TlsRoute_RouteMatch) ProtoMessage() {}

func (x *TlsRoute_RouteMatch) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TlsRoute_RouteMatch.ProtoReflect.Descriptor instead.
func (*TlsRoute_RouteMatch) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{9, 1}
}

func (x *TlsRoute_RouteMatch) GetSniHost() []string {
	if x != nil {
		return x.SniHost
	}
	return nil
}

func (x *TlsRoute_RouteMatch) GetAlpn() []string {
	if x != nil {
		return x.Alpn
	}
	return nil
}

// The specifications for routing traffic and applying associated policies.
type TlsRoute_RouteAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The destination services to which traffic should be forwarded.
	// At least one destination service is required.
	Destinations  []*TlsRoute_RouteDestination `protobuf:"bytes,1,rep,name=destinations,proto3" json:"destinations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TlsRoute_RouteAction) Reset() {
	*x = TlsRoute_RouteAction{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TlsRoute_RouteAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TlsRoute_RouteAction) ProtoMessage() {}

func (x *TlsRoute_RouteAction) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TlsRoute_RouteAction.ProtoReflect.Descriptor instead.
func (*TlsRoute_RouteAction) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{9, 2}
}

func (x *TlsRoute_RouteAction) GetDestinations() []*TlsRoute_RouteDestination {
	if x != nil {
		return x.Destinations
	}
	return nil
}

// Describe the destination for traffic to be routed to.
type TlsRoute_RouteDestination struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The URL of a BackendService to route traffic to.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Optional. Specifies the proportion of requests forwareded to the backend
	// referenced by the service_name field. This is computed as:
	//
	//	weight/Sum(weights in destinations)
	//
	// Weights in all destinations does not need to sum up to 100.
	Weight        int32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TlsRoute_RouteDestination) Reset() {
	*x = TlsRoute_RouteDestination{}
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TlsRoute_RouteDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TlsRoute_RouteDestination) ProtoMessage() {}

func (x *TlsRoute_RouteDestination) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_networkservices_v1_data_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TlsRoute_RouteDestination.ProtoReflect.Descriptor instead.
func (*TlsRoute_RouteDestination) Descriptor() ([]byte, []int) {
	return file_cloud_networkservices_v1_data_proto_rawDescGZIP(), []int{9, 3}
}

func (x *TlsRoute_RouteDestination) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *TlsRoute_RouteDestination) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

var File_cloud_networkservices_v1_data_proto protoreflect.FileDescriptor

const file_cloud_networkservices_v1_data_proto_rawDesc = "" +
	"\n" +
	"#cloud/networkservices/v1/data.proto\x12&google.events.cloud.networkservices.v1\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"+\n" +
	"\x13TrafficPortSelector\x12\x14\n" +
	"\x05ports\x18\x01 \x03(\tR\x05ports\"\xb2\x05\n" +
	"\x0fEndpointMatcher\x12\x84\x01\n" +
	"\x16metadata_label_matcher\x18\x01 \x01(\v2L.google.events.cloud.networkservices.v1.EndpointMatcher.MetadataLabelMatcherH\x00R\x14metadataLabelMatcher\x1a\x87\x04\n" +
	"\x14MetadataLabelMatcher\x12\xaa\x01\n" +
	"\x1dmetadata_label_match_criteria\x18\x01 \x01(\x0e2g.google.events.cloud.networkservices.v1.EndpointMatcher.MetadataLabelMatcher.MetadataLabelMatchCriteriaR\x1ametadataLabelMatchCriteria\x12\x84\x01\n" +
	"\x0fmetadata_labels\x18\x02 \x03(\v2[.google.events.cloud.networkservices.v1.EndpointMatcher.MetadataLabelMatcher.MetadataLabelsR\x0emetadataLabels\x1aP\n" +
	"\x0eMetadataLabels\x12\x1d\n" +
	"\n" +
	"label_name\x18\x01 \x01(\tR\tlabelName\x12\x1f\n" +
	"\vlabel_value\x18\x02 \x01(\tR\n" +
	"labelValue\"i\n" +
	"\x1aMetadataLabelMatchCriteria\x12-\n" +
	")METADATA_LABEL_MATCH_CRITERIA_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tMATCH_ANY\x10\x01\x12\r\n" +
	"\tMATCH_ALL\x10\x02B\x0e\n" +
	"\fmatcher_type\"\xf6\x06\n" +
	"\x0eEndpointPolicy\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12;\n" +
	"\vcreate_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12Z\n" +
	"\x06labels\x18\x04 \x03(\v2B.google.events.cloud.networkservices.v1.EndpointPolicy.LabelsEntryR\x06labels\x12]\n" +
	"\x04type\x18\x05 \x01(\x0e2I.google.events.cloud.networkservices.v1.EndpointPolicy.EndpointPolicyTypeR\x04type\x121\n" +
	"\x14authorization_policy\x18\a \x01(\tR\x13authorizationPolicy\x12b\n" +
	"\x10endpoint_matcher\x18\t \x01(\v27.google.events.cloud.networkservices.v1.EndpointMatcherR\x0fendpointMatcher\x12o\n" +
	"\x15traffic_port_selector\x18\n" +
	" \x01(\v2;.google.events.cloud.networkservices.v1.TrafficPortSelectorR\x13trafficPortSelector\x12 \n" +
	"\vdescription\x18\v \x01(\tR\vdescription\x12*\n" +
	"\x11server_tls_policy\x18\f \x01(\tR\x0fserverTlsPolicy\x12*\n" +
	"\x11client_tls_policy\x18\r \x01(\tR\x0fclientTlsPolicy\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"^\n" +
	"\x12EndpointPolicyType\x12$\n" +
	" ENDPOINT_POLICY_TYPE_UNSPECIFIED\x10\x00\x12\x11\n" +
	"\rSIDECAR_PROXY\x10\x01\x12\x0f\n" +
	"\vGRPC_SERVER\x10\x02\"\x88\x06\n" +
	"\aGateway\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1b\n" +
	"\tself_link\x18\r \x01(\tR\bselfLink\x12;\n" +
	"\vcreate_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12S\n" +
	"\x06labels\x18\x04 \x03(\v2;.google.events.cloud.networkservices.v1.Gateway.LabelsEntryR\x06labels\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12H\n" +
	"\x04type\x18\x06 \x01(\x0e24.google.events.cloud.networkservices.v1.Gateway.TypeR\x04type\x12\x1c\n" +
	"\taddresses\x18\a \x03(\tR\taddresses\x12\x14\n" +
	"\x05ports\x18\v \x03(\x05R\x05ports\x12\x14\n" +
	"\x05scope\x18\b \x01(\tR\x05scope\x12*\n" +
	"\x11server_tls_policy\x18\t \x01(\tR\x0fserverTlsPolicy\x12)\n" +
	"\x10certificate_urls\x18\x0e \x03(\tR\x0fcertificateUrls\x126\n" +
	"\x17gateway_security_policy\x18\x12 \x01(\tR\x15gatewaySecurityPolicy\x12\x18\n" +
	"\anetwork\x18\x10 \x01(\tR\anetwork\x12\x1e\n" +
	"\n" +
	"subnetwork\x18\x11 \x01(\tR\n" +
	"subnetwork\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"C\n" +
	"\x04Type\x12\x14\n" +
	"\x10TYPE_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tOPEN_MESH\x10\x01\x12\x16\n" +
	"\x12SECURE_WEB_GATEWAY\x10\x02\"\xec\x13\n" +
	"\tGrpcRoute\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1b\n" +
	"\tself_link\x18\f \x01(\tR\bselfLink\x12;\n" +
	"\vcreate_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12U\n" +
	"\x06labels\x18\x04 \x03(\v2=.google.events.cloud.networkservices.v1.GrpcRoute.LabelsEntryR\x06labels\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12\x1c\n" +
	"\thostnames\x18\x06 \x03(\tR\thostnames\x12\x16\n" +
	"\x06meshes\x18\t \x03(\tR\x06meshes\x12\x1a\n" +
	"\bgateways\x18\n" +
	" \x03(\tR\bgateways\x12Q\n" +
	"\x05rules\x18\a \x03(\v2;.google.events.cloud.networkservices.v1.GrpcRoute.RouteRuleR\x05rules\x1a\xa9\x02\n" +
	"\vMethodMatch\x12V\n" +
	"\x04type\x18\x01 \x01(\x0e2B.google.events.cloud.networkservices.v1.GrpcRoute.MethodMatch.TypeR\x04type\x12!\n" +
	"\fgrpc_service\x18\x02 \x01(\tR\vgrpcService\x12\x1f\n" +
	"\vgrpc_method\x18\x03 \x01(\tR\n" +
	"grpcMethod\x12*\n" +
	"\x0ecase_sensitive\x18\x04 \x01(\bH\x00R\rcaseSensitive\x88\x01\x01\"?\n" +
	"\x04Type\x12\x14\n" +
	"\x10TYPE_UNSPECIFIED\x10\x00\x12\t\n" +
	"\x05EXACT\x10\x01\x12\x16\n" +
	"\x12REGULAR_EXPRESSION\x10\x02B\x11\n" +
	"\x0f_case_sensitive\x1a\xce\x01\n" +
	"\vHeaderMatch\x12V\n" +
	"\x04type\x18\x01 \x01(\x0e2B.google.events.cloud.networkservices.v1.GrpcRoute.HeaderMatch.TypeR\x04type\x12\x10\n" +
	"\x03key\x18\x02 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x03 \x01(\tR\x05value\"?\n" +
	"\x04Type\x12\x14\n" +
	"\x10TYPE_UNSPECIFIED\x10\x00\x12\t\n" +
	"\x05EXACT\x10\x01\x12\x16\n" +
	"\x12REGULAR_EXPRESSION\x10\x02\x1a\xcc\x01\n" +
	"\n" +
	"RouteMatch\x12Z\n" +
	"\x06method\x18\x01 \x01(\v2=.google.events.cloud.networkservices.v1.GrpcRoute.MethodMatchH\x00R\x06method\x88\x01\x01\x12W\n" +
	"\aheaders\x18\x02 \x03(\v2=.google.events.cloud.networkservices.v1.GrpcRoute.HeaderMatchR\aheadersB\t\n" +
	"\a_method\x1an\n" +
	"\vDestination\x12#\n" +
	"\fservice_name\x18\x01 \x01(\tH\x00R\vserviceName\x12\x1b\n" +
	"\x06weight\x18\x02 \x01(\x05H\x01R\x06weight\x88\x01\x01B\x12\n" +
	"\x10destination_typeB\t\n" +
	"\a_weight\x1a\xfe\x03\n" +
	"\x14FaultInjectionPolicy\x12g\n" +
	"\x05delay\x18\x01 \x01(\v2L.google.events.cloud.networkservices.v1.GrpcRoute.FaultInjectionPolicy.DelayH\x00R\x05delay\x88\x01\x01\x12g\n" +
	"\x05abort\x18\x02 \x01(\v2L.google.events.cloud.networkservices.v1.GrpcRoute.FaultInjectionPolicy.AbortH\x01R\x05abort\x88\x01\x01\x1a\x8c\x01\n" +
	"\x05Delay\x12?\n" +
	"\vfixed_delay\x18\x01 \x01(\v2\x19.google.protobuf.DurationH\x00R\n" +
	"fixedDelay\x88\x01\x01\x12#\n" +
	"\n" +
	"percentage\x18\x02 \x01(\x05H\x01R\n" +
	"percentage\x88\x01\x01B\x0e\n" +
	"\f_fixed_delayB\r\n" +
	"\v_percentage\x1aq\n" +
	"\x05Abort\x12$\n" +
	"\vhttp_status\x18\x01 \x01(\x05H\x00R\n" +
	"httpStatus\x88\x01\x01\x12#\n" +
	"\n" +
	"percentage\x18\x02 \x01(\x05H\x01R\n" +
	"percentage\x88\x01\x01B\x0e\n" +
	"\f_http_statusB\r\n" +
	"\v_percentageB\b\n" +
	"\x06_delayB\b\n" +
	"\x06_abort\x1aY\n" +
	"\vRetryPolicy\x12)\n" +
	"\x10retry_conditions\x18\x01 \x03(\tR\x0fretryConditions\x12\x1f\n" +
	"\vnum_retries\x18\x02 \x01(\rR\n" +
	"numRetries\x1a\x85\x03\n" +
	"\vRouteAction\x12a\n" +
	"\fdestinations\x18\x01 \x03(\v2=.google.events.cloud.networkservices.v1.GrpcRoute.DestinationR\fdestinations\x12|\n" +
	"\x16fault_injection_policy\x18\x03 \x01(\v2F.google.events.cloud.networkservices.v1.GrpcRoute.FaultInjectionPolicyR\x14faultInjectionPolicy\x123\n" +
	"\atimeout\x18\a \x01(\v2\x19.google.protobuf.DurationR\atimeout\x12`\n" +
	"\fretry_policy\x18\b \x01(\v2=.google.events.cloud.networkservices.v1.GrpcRoute.RetryPolicyR\vretryPolicy\x1a\xba\x01\n" +
	"\tRouteRule\x12V\n" +
	"\amatches\x18\x01 \x03(\v2<.google.events.cloud.networkservices.v1.GrpcRoute.RouteMatchR\amatches\x12U\n" +
	"\x06action\x18\x02 \x01(\v2=.google.events.cloud.networkservices.v1.GrpcRoute.RouteActionR\x06action\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x98%\n" +
	"\tHttpRoute\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1b\n" +
	"\tself_link\x18\v \x01(\tR\bselfLink\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12;\n" +
	"\vcreate_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12\x1c\n" +
	"\thostnames\x18\x05 \x03(\tR\thostnames\x12\x16\n" +
	"\x06meshes\x18\b \x03(\tR\x06meshes\x12\x1a\n" +
	"\bgateways\x18\t \x03(\tR\bgateways\x12U\n" +
	"\x06labels\x18\n" +
	" \x03(\v2=.google.events.cloud.networkservices.v1.HttpRoute.LabelsEntryR\x06labels\x12Q\n" +
	"\x05rules\x18\x06 \x03(\v2;.google.events.cloud.networkservices.v1.HttpRoute.RouteRuleR\x05rules\x1a\xb3\x03\n" +
	"\vHeaderMatch\x12!\n" +
	"\vexact_match\x18\x02 \x01(\tH\x00R\n" +
	"exactMatch\x12!\n" +
	"\vregex_match\x18\x03 \x01(\tH\x00R\n" +
	"regexMatch\x12#\n" +
	"\fprefix_match\x18\x04 \x01(\tH\x00R\vprefixMatch\x12%\n" +
	"\rpresent_match\x18\x05 \x01(\bH\x00R\fpresentMatch\x12#\n" +
	"\fsuffix_match\x18\x06 \x01(\tH\x00R\vsuffixMatch\x12m\n" +
	"\vrange_match\x18\a \x01(\v2J.google.events.cloud.networkservices.v1.HttpRoute.HeaderMatch.IntegerRangeH\x00R\n" +
	"rangeMatch\x12\x16\n" +
	"\x06header\x18\x01 \x01(\tR\x06header\x12!\n" +
	"\finvert_match\x18\b \x01(\bR\vinvertMatch\x1a6\n" +
	"\fIntegerRange\x12\x14\n" +
	"\x05start\x18\x01 \x01(\x05R\x05start\x12\x10\n" +
	"\x03end\x18\x02 \x01(\x05R\x03endB\v\n" +
	"\tMatchType\x1a\xb8\x01\n" +
	"\x13QueryParameterMatch\x12!\n" +
	"\vexact_match\x18\x02 \x01(\tH\x00R\n" +
	"exactMatch\x12!\n" +
	"\vregex_match\x18\x03 \x01(\tH\x00R\n" +
	"regexMatch\x12%\n" +
	"\rpresent_match\x18\x04 \x01(\bH\x00R\fpresentMatch\x12'\n" +
	"\x0fquery_parameter\x18\x01 \x01(\tR\x0equeryParameterB\v\n" +
	"\tMatchType\x1a\xf7\x02\n" +
	"\n" +
	"RouteMatch\x12(\n" +
	"\x0ffull_path_match\x18\x01 \x01(\tH\x00R\rfullPathMatch\x12#\n" +
	"\fprefix_match\x18\x02 \x01(\tH\x00R\vprefixMatch\x12!\n" +
	"\vregex_match\x18\x03 \x01(\tH\x00R\n" +
	"regexMatch\x12\x1f\n" +
	"\vignore_case\x18\x04 \x01(\bR\n" +
	"ignoreCase\x12W\n" +
	"\aheaders\x18\x05 \x03(\v2=.google.events.cloud.networkservices.v1.HttpRoute.HeaderMatchR\aheaders\x12p\n" +
	"\x10query_parameters\x18\x06 \x03(\v2E.google.events.cloud.networkservices.v1.HttpRoute.QueryParameterMatchR\x0fqueryParametersB\v\n" +
	"\tPathMatch\x1aH\n" +
	"\vDestination\x12!\n" +
	"\fservice_name\x18\x01 \x01(\tR\vserviceName\x12\x16\n" +
	"\x06weight\x18\x02 \x01(\x05R\x06weight\x1a\xef\x03\n" +
	"\bRedirect\x12#\n" +
	"\rhost_redirect\x18\x01 \x01(\tR\fhostRedirect\x12#\n" +
	"\rpath_redirect\x18\x02 \x01(\tR\fpathRedirect\x12%\n" +
	"\x0eprefix_rewrite\x18\x03 \x01(\tR\rprefixRewrite\x12l\n" +
	"\rresponse_code\x18\x04 \x01(\x0e2G.google.events.cloud.networkservices.v1.HttpRoute.Redirect.ResponseCodeR\fresponseCode\x12%\n" +
	"\x0ehttps_redirect\x18\x05 \x01(\bR\rhttpsRedirect\x12\x1f\n" +
	"\vstrip_query\x18\x06 \x01(\bR\n" +
	"stripQuery\x12#\n" +
	"\rport_redirect\x18\a \x01(\x05R\fportRedirect\"\x96\x01\n" +
	"\fResponseCode\x12\x1d\n" +
	"\x19RESPONSE_CODE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19MOVED_PERMANENTLY_DEFAULT\x10\x01\x12\t\n" +
	"\x05FOUND\x10\x02\x12\r\n" +
	"\tSEE_OTHER\x10\x03\x12\x16\n" +
	"\x12TEMPORARY_REDIRECT\x10\x04\x12\x16\n" +
	"\x12PERMANENT_REDIRECT\x10\x05\x1a\x8d\x03\n" +
	"\x14FaultInjectionPolicy\x12b\n" +
	"\x05delay\x18\x01 \x01(\v2L.google.events.cloud.networkservices.v1.HttpRoute.FaultInjectionPolicy.DelayR\x05delay\x12b\n" +
	"\x05abort\x18\x02 \x01(\v2L.google.events.cloud.networkservices.v1.HttpRoute.FaultInjectionPolicy.AbortR\x05abort\x1ac\n" +
	"\x05Delay\x12:\n" +
	"\vfixed_delay\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\n" +
	"fixedDelay\x12\x1e\n" +
	"\n" +
	"percentage\x18\x02 \x01(\x05R\n" +
	"percentage\x1aH\n" +
	"\x05Abort\x12\x1f\n" +
	"\vhttp_status\x18\x01 \x01(\x05R\n" +
	"httpStatus\x12\x1e\n" +
	"\n" +
	"percentage\x18\x02 \x01(\x05R\n" +
	"percentage\x1a\xd2\x02\n" +
	"\x0eHeaderModifier\x12[\n" +
	"\x03set\x18\x01 \x03(\v2I.google.events.cloud.networkservices.v1.HttpRoute.HeaderModifier.SetEntryR\x03set\x12[\n" +
	"\x03add\x18\x02 \x03(\v2I.google.events.cloud.networkservices.v1.HttpRoute.HeaderModifier.AddEntryR\x03add\x12\x16\n" +
	"\x06remove\x18\x03 \x03(\tR\x06remove\x1a6\n" +
	"\bSetEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a6\n" +
	"\bAddEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a_\n" +
	"\n" +
	"URLRewrite\x12.\n" +
	"\x13path_prefix_rewrite\x18\x01 \x01(\tR\x11pathPrefixRewrite\x12!\n" +
	"\fhost_rewrite\x18\x02 \x01(\tR\vhostRewrite\x1a\x9c\x01\n" +
	"\vRetryPolicy\x12)\n" +
	"\x10retry_conditions\x18\x01 \x03(\tR\x0fretryConditions\x12\x1f\n" +
	"\vnum_retries\x18\x02 \x01(\x05R\n" +
	"numRetries\x12A\n" +
	"\x0fper_try_timeout\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\rperTryTimeout\x1av\n" +
	"\x13RequestMirrorPolicy\x12_\n" +
	"\vdestination\x18\x01 \x01(\v2=.google.events.cloud.networkservices.v1.HttpRoute.DestinationR\vdestination\x1a\xb6\x02\n" +
	"\n" +
	"CorsPolicy\x12#\n" +
	"\rallow_origins\x18\x01 \x03(\tR\fallowOrigins\x120\n" +
	"\x14allow_origin_regexes\x18\x02 \x03(\tR\x12allowOriginRegexes\x12#\n" +
	"\rallow_methods\x18\x03 \x03(\tR\fallowMethods\x12#\n" +
	"\rallow_headers\x18\x04 \x03(\tR\fallowHeaders\x12%\n" +
	"\x0eexpose_headers\x18\x05 \x03(\tR\rexposeHeaders\x12\x17\n" +
	"\amax_age\x18\x06 \x01(\tR\x06maxAge\x12+\n" +
	"\x11allow_credentials\x18\a \x01(\bR\x10allowCredentials\x12\x1a\n" +
	"\bdisabled\x18\b \x01(\bR\bdisabled\x1a\x8c\b\n" +
	"\vRouteAction\x12a\n" +
	"\fdestinations\x18\x01 \x03(\v2=.google.events.cloud.networkservices.v1.HttpRoute.DestinationR\fdestinations\x12V\n" +
	"\bredirect\x18\x02 \x01(\v2:.google.events.cloud.networkservices.v1.HttpRoute.RedirectR\bredirect\x12|\n" +
	"\x16fault_injection_policy\x18\x04 \x01(\v2F.google.events.cloud.networkservices.v1.HttpRoute.FaultInjectionPolicyR\x14faultInjectionPolicy\x12x\n" +
	"\x17request_header_modifier\x18\x05 \x01(\v2@.google.events.cloud.networkservices.v1.HttpRoute.HeaderModifierR\x15requestHeaderModifier\x12z\n" +
	"\x18response_header_modifier\x18\x06 \x01(\v2@.google.events.cloud.networkservices.v1.HttpRoute.HeaderModifierR\x16responseHeaderModifier\x12]\n" +
	"\vurl_rewrite\x18\a \x01(\v2<.google.events.cloud.networkservices.v1.HttpRoute.URLRewriteR\n" +
	"urlRewrite\x123\n" +
	"\atimeout\x18\b \x01(\v2\x19.google.protobuf.DurationR\atimeout\x12`\n" +
	"\fretry_policy\x18\t \x01(\v2=.google.events.cloud.networkservices.v1.HttpRoute.RetryPolicyR\vretryPolicy\x12y\n" +
	"\x15request_mirror_policy\x18\n" +
	" \x01(\v2E.google.events.cloud.networkservices.v1.HttpRoute.RequestMirrorPolicyR\x13requestMirrorPolicy\x12]\n" +
	"\vcors_policy\x18\v \x01(\v2<.google.events.cloud.networkservices.v1.HttpRoute.CorsPolicyR\n" +
	"corsPolicy\x1a\xba\x01\n" +
	"\tRouteRule\x12V\n" +
	"\amatches\x18\x01 \x03(\v2<.google.events.cloud.networkservices.v1.HttpRoute.RouteMatchR\amatches\x12U\n" +
	"\x06action\x18\x02 \x01(\v2=.google.events.cloud.networkservices.v1.HttpRoute.RouteActionR\x06action\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x8d\x03\n" +
	"\x04Mesh\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1b\n" +
	"\tself_link\x18\t \x01(\tR\bselfLink\x12;\n" +
	"\vcreate_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12P\n" +
	"\x06labels\x18\x04 \x03(\v28.google.events.cloud.networkservices.v1.Mesh.LabelsEntryR\x06labels\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12+\n" +
	"\x11interception_port\x18\b \x01(\x05R\x10interceptionPort\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x90\x03\n" +
	"\x0eServiceBinding\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12;\n" +
	"\vcreate_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12\x18\n" +
	"\aservice\x18\x05 \x01(\tR\aservice\x12\x1d\n" +
	"\n" +
	"service_id\x18\b \x01(\tR\tserviceId\x12Z\n" +
	"\x06labels\x18\a \x03(\v2B.google.events.cloud.networkservices.v1.ServiceBinding.LabelsEntryR\x06labels\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xde\a\n" +
	"\bTcpRoute\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1b\n" +
	"\tself_link\x18\v \x01(\tR\bselfLink\x12;\n" +
	"\vcreate_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12P\n" +
	"\x05rules\x18\x05 \x03(\v2:.google.events.cloud.networkservices.v1.TcpRoute.RouteRuleR\x05rules\x12\x16\n" +
	"\x06meshes\x18\b \x03(\tR\x06meshes\x12\x1a\n" +
	"\bgateways\x18\t \x03(\tR\bgateways\x12T\n" +
	"\x06labels\x18\n" +
	" \x03(\v2<.google.events.cloud.networkservices.v1.TcpRoute.LabelsEntryR\x06labels\x1a\xb8\x01\n" +
	"\tRouteRule\x12U\n" +
	"\amatches\x18\x01 \x03(\v2;.google.events.cloud.networkservices.v1.TcpRoute.RouteMatchR\amatches\x12T\n" +
	"\x06action\x18\x02 \x01(\v2<.google.events.cloud.networkservices.v1.TcpRoute.RouteActionR\x06action\x1a:\n" +
	"\n" +
	"RouteMatch\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x12\n" +
	"\x04port\x18\x02 \x01(\tR\x04port\x1a\xa7\x01\n" +
	"\vRouteAction\x12e\n" +
	"\fdestinations\x18\x01 \x03(\v2A.google.events.cloud.networkservices.v1.TcpRoute.RouteDestinationR\fdestinations\x121\n" +
	"\x14original_destination\x18\x03 \x01(\bR\x13originalDestination\x1aM\n" +
	"\x10RouteDestination\x12!\n" +
	"\fservice_name\x18\x01 \x01(\tR\vserviceName\x12\x16\n" +
	"\x06weight\x18\x02 \x01(\x05R\x06weight\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x9a\x06\n" +
	"\bTlsRoute\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1b\n" +
	"\tself_link\x18\b \x01(\tR\bselfLink\x12;\n" +
	"\vcreate_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12P\n" +
	"\x05rules\x18\x05 \x03(\v2:.google.events.cloud.networkservices.v1.TlsRoute.RouteRuleR\x05rules\x12\x16\n" +
	"\x06meshes\x18\x06 \x03(\tR\x06meshes\x12\x1a\n" +
	"\bgateways\x18\a \x03(\tR\bgateways\x1a\xb8\x01\n" +
	"\tRouteRule\x12U\n" +
	"\amatches\x18\x01 \x03(\v2;.google.events.cloud.networkservices.v1.TlsRoute.RouteMatchR\amatches\x12T\n" +
	"\x06action\x18\x02 \x01(\v2<.google.events.cloud.networkservices.v1.TlsRoute.RouteActionR\x06action\x1a;\n" +
	"\n" +
	"RouteMatch\x12\x19\n" +
	"\bsni_host\x18\x01 \x03(\tR\asniHost\x12\x12\n" +
	"\x04alpn\x18\x02 \x03(\tR\x04alpn\x1at\n" +
	"\vRouteAction\x12e\n" +
	"\fdestinations\x18\x01 \x03(\v2A.google.events.cloud.networkservices.v1.TlsRoute.RouteDestinationR\fdestinations\x1aM\n" +
	"\x10RouteDestination\x12!\n" +
	"\fservice_name\x18\x01 \x01(\tR\vserviceName\x12\x16\n" +
	"\x06weight\x18\x02 \x01(\x05R\x06weight\"|\n" +
	"\x17EndpointPolicyEventData\x12U\n" +
	"\apayload\x18\x01 \x01(\v26.google.events.cloud.networkservices.v1.EndpointPolicyH\x00R\apayload\x88\x01\x01B\n" +
	"\n" +
	"\b_payload\"r\n" +
	"\x12HttpRouteEventData\x12P\n" +
	"\apayload\x18\x01 \x01(\v21.google.events.cloud.networkservices.v1.HttpRouteH\x00R\apayload\x88\x01\x01B\n" +
	"\n" +
	"\b_payload\"|\n" +
	"\x17ServiceBindingEventData\x12U\n" +
	"\apayload\x18\x01 \x01(\v26.google.events.cloud.networkservices.v1.ServiceBindingH\x00R\apayload\x88\x01\x01B\n" +
	"\n" +
	"\b_payload\"n\n" +
	"\x10GatewayEventData\x12N\n" +
	"\apayload\x18\x01 \x01(\v2/.google.events.cloud.networkservices.v1.GatewayH\x00R\apayload\x88\x01\x01B\n" +
	"\n" +
	"\b_payload\"p\n" +
	"\x11TlsRouteEventData\x12O\n" +
	"\apayload\x18\x01 \x01(\v20.google.events.cloud.networkservices.v1.TlsRouteH\x00R\apayload\x88\x01\x01B\n" +
	"\n" +
	"\b_payload\"r\n" +
	"\x12GrpcRouteEventData\x12P\n" +
	"\apayload\x18\x01 \x01(\v21.google.events.cloud.networkservices.v1.GrpcRouteH\x00R\apayload\x88\x01\x01B\n" +
	"\n" +
	"\b_payload\"h\n" +
	"\rMeshEventData\x12K\n" +
	"\apayload\x18\x01 \x01(\v2,.google.events.cloud.networkservices.v1.MeshH\x00R\apayload\x88\x01\x01B\n" +
	"\n" +
	"\b_payload\"p\n" +
	"\x11TcpRouteEventData\x12O\n" +
	"\apayload\x18\x01 \x01(\v20.google.events.cloud.networkservices.v1.TcpRouteH\x00R\apayload\x88\x01\x01B\n" +
	"\n" +
	"\b_payloadB\x88\x01\xaa\x02/Google.Events.Protobuf.Cloud.NetworkServices.V1\xca\x02&Google\\Events\\Cloud\\NetworkServices\\V1\xea\x02*Google::Events::Cloud::NetworkServices::V1b\x06proto3"

var (
	file_cloud_networkservices_v1_data_proto_rawDescOnce sync.Once
	file_cloud_networkservices_v1_data_proto_rawDescData []byte
)

func file_cloud_networkservices_v1_data_proto_rawDescGZIP() []byte {
	file_cloud_networkservices_v1_data_proto_rawDescOnce.Do(func() {
		file_cloud_networkservices_v1_data_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cloud_networkservices_v1_data_proto_rawDesc), len(file_cloud_networkservices_v1_data_proto_rawDesc)))
	})
	return file_cloud_networkservices_v1_data_proto_rawDescData
}

var file_cloud_networkservices_v1_data_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_cloud_networkservices_v1_data_proto_msgTypes = make([]protoimpl.MessageInfo, 63)
var file_cloud_networkservices_v1_data_proto_goTypes = []any{
	(EndpointMatcher_MetadataLabelMatcher_MetadataLabelMatchCriteria)(0), // 0: google.events.cloud.networkservices.v1.EndpointMatcher.MetadataLabelMatcher.MetadataLabelMatchCriteria
	(EndpointPolicy_EndpointPolicyType)(0),                               // 1: google.events.cloud.networkservices.v1.EndpointPolicy.EndpointPolicyType
	(Gateway_Type)(0),                                                    // 2: google.events.cloud.networkservices.v1.Gateway.Type
	(GrpcRoute_MethodMatch_Type)(0),                                      // 3: google.events.cloud.networkservices.v1.GrpcRoute.MethodMatch.Type
	(GrpcRoute_HeaderMatch_Type)(0),                                      // 4: google.events.cloud.networkservices.v1.GrpcRoute.HeaderMatch.Type
	(HttpRoute_Redirect_ResponseCode)(0),                                 // 5: google.events.cloud.networkservices.v1.HttpRoute.Redirect.ResponseCode
	(*TrafficPortSelector)(nil),                                          // 6: google.events.cloud.networkservices.v1.TrafficPortSelector
	(*EndpointMatcher)(nil),                                              // 7: google.events.cloud.networkservices.v1.EndpointMatcher
	(*EndpointPolicy)(nil),                                               // 8: google.events.cloud.networkservices.v1.EndpointPolicy
	(*Gateway)(nil),                                                      // 9: google.events.cloud.networkservices.v1.Gateway
	(*GrpcRoute)(nil),                                                    // 10: google.events.cloud.networkservices.v1.GrpcRoute
	(*HttpRoute)(nil),                                                    // 11: google.events.cloud.networkservices.v1.HttpRoute
	(*Mesh)(nil),                                                         // 12: google.events.cloud.networkservices.v1.Mesh
	(*ServiceBinding)(nil),                                               // 13: google.events.cloud.networkservices.v1.ServiceBinding
	(*TcpRoute)(nil),                                                     // 14: google.events.cloud.networkservices.v1.TcpRoute
	(*TlsRoute)(nil),                                                     // 15: google.events.cloud.networkservices.v1.TlsRoute
	(*EndpointPolicyEventData)(nil),                                      // 16: google.events.cloud.networkservices.v1.EndpointPolicyEventData
	(*HttpRouteEventData)(nil),                                           // 17: google.events.cloud.networkservices.v1.HttpRouteEventData
	(*ServiceBindingEventData)(nil),                                      // 18: google.events.cloud.networkservices.v1.ServiceBindingEventData
	(*GatewayEventData)(nil),                                             // 19: google.events.cloud.networkservices.v1.GatewayEventData
	(*TlsRouteEventData)(nil),                                            // 20: google.events.cloud.networkservices.v1.TlsRouteEventData
	(*GrpcRouteEventData)(nil),                                           // 21: google.events.cloud.networkservices.v1.GrpcRouteEventData
	(*MeshEventData)(nil),                                                // 22: google.events.cloud.networkservices.v1.MeshEventData
	(*TcpRouteEventData)(nil),                                            // 23: google.events.cloud.networkservices.v1.TcpRouteEventData
	(*EndpointMatcher_MetadataLabelMatcher)(nil),                         // 24: google.events.cloud.networkservices.v1.EndpointMatcher.MetadataLabelMatcher
	(*EndpointMatcher_MetadataLabelMatcher_MetadataLabels)(nil),          // 25: google.events.cloud.networkservices.v1.EndpointMatcher.MetadataLabelMatcher.MetadataLabels
	nil,                                    // 26: google.events.cloud.networkservices.v1.EndpointPolicy.LabelsEntry
	nil,                                    // 27: google.events.cloud.networkservices.v1.Gateway.LabelsEntry
	(*GrpcRoute_MethodMatch)(nil),          // 28: google.events.cloud.networkservices.v1.GrpcRoute.MethodMatch
	(*GrpcRoute_HeaderMatch)(nil),          // 29: google.events.cloud.networkservices.v1.GrpcRoute.HeaderMatch
	(*GrpcRoute_RouteMatch)(nil),           // 30: google.events.cloud.networkservices.v1.GrpcRoute.RouteMatch
	(*GrpcRoute_Destination)(nil),          // 31: google.events.cloud.networkservices.v1.GrpcRoute.Destination
	(*GrpcRoute_FaultInjectionPolicy)(nil), // 32: google.events.cloud.networkservices.v1.GrpcRoute.FaultInjectionPolicy
	(*GrpcRoute_RetryPolicy)(nil),          // 33: google.events.cloud.networkservices.v1.GrpcRoute.RetryPolicy
	(*GrpcRoute_RouteAction)(nil),          // 34: google.events.cloud.networkservices.v1.GrpcRoute.RouteAction
	(*GrpcRoute_RouteRule)(nil),            // 35: google.events.cloud.networkservices.v1.GrpcRoute.RouteRule
	nil,                                    // 36: google.events.cloud.networkservices.v1.GrpcRoute.LabelsEntry
	(*GrpcRoute_FaultInjectionPolicy_Delay)(nil), // 37: google.events.cloud.networkservices.v1.GrpcRoute.FaultInjectionPolicy.Delay
	(*GrpcRoute_FaultInjectionPolicy_Abort)(nil), // 38: google.events.cloud.networkservices.v1.GrpcRoute.FaultInjectionPolicy.Abort
	(*HttpRoute_HeaderMatch)(nil),                // 39: google.events.cloud.networkservices.v1.HttpRoute.HeaderMatch
	(*HttpRoute_QueryParameterMatch)(nil),        // 40: google.events.cloud.networkservices.v1.HttpRoute.QueryParameterMatch
	(*HttpRoute_RouteMatch)(nil),                 // 41: google.events.cloud.networkservices.v1.HttpRoute.RouteMatch
	(*HttpRoute_Destination)(nil),                // 42: google.events.cloud.networkservices.v1.HttpRoute.Destination
	(*HttpRoute_Redirect)(nil),                   // 43: google.events.cloud.networkservices.v1.HttpRoute.Redirect
	(*HttpRoute_FaultInjectionPolicy)(nil),       // 44: google.events.cloud.networkservices.v1.HttpRoute.FaultInjectionPolicy
	(*HttpRoute_HeaderModifier)(nil),             // 45: google.events.cloud.networkservices.v1.HttpRoute.HeaderModifier
	(*HttpRoute_URLRewrite)(nil),                 // 46: google.events.cloud.networkservices.v1.HttpRoute.URLRewrite
	(*HttpRoute_RetryPolicy)(nil),                // 47: google.events.cloud.networkservices.v1.HttpRoute.RetryPolicy
	(*HttpRoute_RequestMirrorPolicy)(nil),        // 48: google.events.cloud.networkservices.v1.HttpRoute.RequestMirrorPolicy
	(*HttpRoute_CorsPolicy)(nil),                 // 49: google.events.cloud.networkservices.v1.HttpRoute.CorsPolicy
	(*HttpRoute_RouteAction)(nil),                // 50: google.events.cloud.networkservices.v1.HttpRoute.RouteAction
	(*HttpRoute_RouteRule)(nil),                  // 51: google.events.cloud.networkservices.v1.HttpRoute.RouteRule
	nil,                                          // 52: google.events.cloud.networkservices.v1.HttpRoute.LabelsEntry
	(*HttpRoute_HeaderMatch_IntegerRange)(nil),   // 53: google.events.cloud.networkservices.v1.HttpRoute.HeaderMatch.IntegerRange
	(*HttpRoute_FaultInjectionPolicy_Delay)(nil), // 54: google.events.cloud.networkservices.v1.HttpRoute.FaultInjectionPolicy.Delay
	(*HttpRoute_FaultInjectionPolicy_Abort)(nil), // 55: google.events.cloud.networkservices.v1.HttpRoute.FaultInjectionPolicy.Abort
	nil,                               // 56: google.events.cloud.networkservices.v1.HttpRoute.HeaderModifier.SetEntry
	nil,                               // 57: google.events.cloud.networkservices.v1.HttpRoute.HeaderModifier.AddEntry
	nil,                               // 58: google.events.cloud.networkservices.v1.Mesh.LabelsEntry
	nil,                               // 59: google.events.cloud.networkservices.v1.ServiceBinding.LabelsEntry
	(*TcpRoute_RouteRule)(nil),        // 60: google.events.cloud.networkservices.v1.TcpRoute.RouteRule
	(*TcpRoute_RouteMatch)(nil),       // 61: google.events.cloud.networkservices.v1.TcpRoute.RouteMatch
	(*TcpRoute_RouteAction)(nil),      // 62: google.events.cloud.networkservices.v1.TcpRoute.RouteAction
	(*TcpRoute_RouteDestination)(nil), // 63: google.events.cloud.networkservices.v1.TcpRoute.RouteDestination
	nil,                               // 64: google.events.cloud.networkservices.v1.TcpRoute.LabelsEntry
	(*TlsRoute_RouteRule)(nil),        // 65: google.events.cloud.networkservices.v1.TlsRoute.RouteRule
	(*TlsRoute_RouteMatch)(nil),       // 66: google.events.cloud.networkservices.v1.TlsRoute.RouteMatch
	(*TlsRoute_RouteAction)(nil),      // 67: google.events.cloud.networkservices.v1.TlsRoute.RouteAction
	(*TlsRoute_RouteDestination)(nil), // 68: google.events.cloud.networkservices.v1.TlsRoute.RouteDestination
	(*timestamppb.Timestamp)(nil),     // 69: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),       // 70: google.protobuf.Duration
}
var file_cloud_networkservices_v1_data_proto_depIdxs = []int32{
	24, // 0: google.events.cloud.networkservices.v1.EndpointMatcher.metadata_label_matcher:type_name -> google.events.cloud.networkservices.v1.EndpointMatcher.MetadataLabelMatcher
	69, // 1: google.events.cloud.networkservices.v1.EndpointPolicy.create_time:type_name -> google.protobuf.Timestamp
	69, // 2: google.events.cloud.networkservices.v1.EndpointPolicy.update_time:type_name -> google.protobuf.Timestamp
	26, // 3: google.events.cloud.networkservices.v1.EndpointPolicy.labels:type_name -> google.events.cloud.networkservices.v1.EndpointPolicy.LabelsEntry
	1,  // 4: google.events.cloud.networkservices.v1.EndpointPolicy.type:type_name -> google.events.cloud.networkservices.v1.EndpointPolicy.EndpointPolicyType
	7,  // 5: google.events.cloud.networkservices.v1.EndpointPolicy.endpoint_matcher:type_name -> google.events.cloud.networkservices.v1.EndpointMatcher
	6,  // 6: google.events.cloud.networkservices.v1.EndpointPolicy.traffic_port_selector:type_name -> google.events.cloud.networkservices.v1.TrafficPortSelector
	69, // 7: google.events.cloud.networkservices.v1.Gateway.create_time:type_name -> google.protobuf.Timestamp
	69, // 8: google.events.cloud.networkservices.v1.Gateway.update_time:type_name -> google.protobuf.Timestamp
	27, // 9: google.events.cloud.networkservices.v1.Gateway.labels:type_name -> google.events.cloud.networkservices.v1.Gateway.LabelsEntry
	2,  // 10: google.events.cloud.networkservices.v1.Gateway.type:type_name -> google.events.cloud.networkservices.v1.Gateway.Type
	69, // 11: google.events.cloud.networkservices.v1.GrpcRoute.create_time:type_name -> google.protobuf.Timestamp
	69, // 12: google.events.cloud.networkservices.v1.GrpcRoute.update_time:type_name -> google.protobuf.Timestamp
	36, // 13: google.events.cloud.networkservices.v1.GrpcRoute.labels:type_name -> google.events.cloud.networkservices.v1.GrpcRoute.LabelsEntry
	35, // 14: google.events.cloud.networkservices.v1.GrpcRoute.rules:type_name -> google.events.cloud.networkservices.v1.GrpcRoute.RouteRule
	69, // 15: google.events.cloud.networkservices.v1.HttpRoute.create_time:type_name -> google.protobuf.Timestamp
	69, // 16: google.events.cloud.networkservices.v1.HttpRoute.update_time:type_name -> google.protobuf.Timestamp
	52, // 17: google.events.cloud.networkservices.v1.HttpRoute.labels:type_name -> google.events.cloud.networkservices.v1.HttpRoute.LabelsEntry
	51, // 18: google.events.cloud.networkservices.v1.HttpRoute.rules:type_name -> google.events.cloud.networkservices.v1.HttpRoute.RouteRule
	69, // 19: google.events.cloud.networkservices.v1.Mesh.create_time:type_name -> google.protobuf.Timestamp
	69, // 20: google.events.cloud.networkservices.v1.Mesh.update_time:type_name -> google.protobuf.Timestamp
	58, // 21: google.events.cloud.networkservices.v1.Mesh.labels:type_name -> google.events.cloud.networkservices.v1.Mesh.LabelsEntry
	69, // 22: google.events.cloud.networkservices.v1.ServiceBinding.create_time:type_name -> google.protobuf.Timestamp
	69, // 23: google.events.cloud.networkservices.v1.ServiceBinding.update_time:type_name -> google.protobuf.Timestamp
	59, // 24: google.events.cloud.networkservices.v1.ServiceBinding.labels:type_name -> google.events.cloud.networkservices.v1.ServiceBinding.LabelsEntry
	69, // 25: google.events.cloud.networkservices.v1.TcpRoute.create_time:type_name -> google.protobuf.Timestamp
	69, // 26: google.events.cloud.networkservices.v1.TcpRoute.update_time:type_name -> google.protobuf.Timestamp
	60, // 27: google.events.cloud.networkservices.v1.TcpRoute.rules:type_name -> google.events.cloud.networkservices.v1.TcpRoute.RouteRule
	64, // 28: google.events.cloud.networkservices.v1.TcpRoute.labels:type_name -> google.events.cloud.networkservices.v1.TcpRoute.LabelsEntry
	69, // 29: google.events.cloud.networkservices.v1.TlsRoute.create_time:type_name -> google.protobuf.Timestamp
	69, // 30: google.events.cloud.networkservices.v1.TlsRoute.update_time:type_name -> google.protobuf.Timestamp
	65, // 31: google.events.cloud.networkservices.v1.TlsRoute.rules:type_name -> google.events.cloud.networkservices.v1.TlsRoute.RouteRule
	8,  // 32: google.events.cloud.networkservices.v1.EndpointPolicyEventData.payload:type_name -> google.events.cloud.networkservices.v1.EndpointPolicy
	11, // 33: google.events.cloud.networkservices.v1.HttpRouteEventData.payload:type_name -> google.events.cloud.networkservices.v1.HttpRoute
	13, // 34: google.events.cloud.networkservices.v1.ServiceBindingEventData.payload:type_name -> google.events.cloud.networkservices.v1.ServiceBinding
	9,  // 35: google.events.cloud.networkservices.v1.GatewayEventData.payload:type_name -> google.events.cloud.networkservices.v1.Gateway
	15, // 36: google.events.cloud.networkservices.v1.TlsRouteEventData.payload:type_name -> google.events.cloud.networkservices.v1.TlsRoute
	10, // 37: google.events.cloud.networkservices.v1.GrpcRouteEventData.payload:type_name -> google.events.cloud.networkservices.v1.GrpcRoute
	12, // 38: google.events.cloud.networkservices.v1.MeshEventData.payload:type_name -> google.events.cloud.networkservices.v1.Mesh
	14, // 39: google.events.cloud.networkservices.v1.TcpRouteEventData.payload:type_name -> google.events.cloud.networkservices.v1.TcpRoute
	0,  // 40: google.events.cloud.networkservices.v1.EndpointMatcher.MetadataLabelMatcher.metadata_label_match_criteria:type_name -> google.events.cloud.networkservices.v1.EndpointMatcher.MetadataLabelMatcher.MetadataLabelMatchCriteria
	25, // 41: google.events.cloud.networkservices.v1.EndpointMatcher.MetadataLabelMatcher.metadata_labels:type_name -> google.events.cloud.networkservices.v1.EndpointMatcher.MetadataLabelMatcher.MetadataLabels
	3,  // 42: google.events.cloud.networkservices.v1.GrpcRoute.MethodMatch.type:type_name -> google.events.cloud.networkservices.v1.GrpcRoute.MethodMatch.Type
	4,  // 43: google.events.cloud.networkservices.v1.GrpcRoute.HeaderMatch.type:type_name -> google.events.cloud.networkservices.v1.GrpcRoute.HeaderMatch.Type
	28, // 44: google.events.cloud.networkservices.v1.GrpcRoute.RouteMatch.method:type_name -> google.events.cloud.networkservices.v1.GrpcRoute.MethodMatch
	29, // 45: google.events.cloud.networkservices.v1.GrpcRoute.RouteMatch.headers:type_name -> google.events.cloud.networkservices.v1.GrpcRoute.HeaderMatch
	37, // 46: google.events.cloud.networkservices.v1.GrpcRoute.FaultInjectionPolicy.delay:type_name -> google.events.cloud.networkservices.v1.GrpcRoute.FaultInjectionPolicy.Delay
	38, // 47: google.events.cloud.networkservices.v1.GrpcRoute.FaultInjectionPolicy.abort:type_name -> google.events.cloud.networkservices.v1.GrpcRoute.FaultInjectionPolicy.Abort
	31, // 48: google.events.cloud.networkservices.v1.GrpcRoute.RouteAction.destinations:type_name -> google.events.cloud.networkservices.v1.GrpcRoute.Destination
	32, // 49: google.events.cloud.networkservices.v1.GrpcRoute.RouteAction.fault_injection_policy:type_name -> google.events.cloud.networkservices.v1.GrpcRoute.FaultInjectionPolicy
	70, // 50: google.events.cloud.networkservices.v1.GrpcRoute.RouteAction.timeout:type_name -> google.protobuf.Duration
	33, // 51: google.events.cloud.networkservices.v1.GrpcRoute.RouteAction.retry_policy:type_name -> google.events.cloud.networkservices.v1.GrpcRoute.RetryPolicy
	30, // 52: google.events.cloud.networkservices.v1.GrpcRoute.RouteRule.matches:type_name -> google.events.cloud.networkservices.v1.GrpcRoute.RouteMatch
	34, // 53: google.events.cloud.networkservices.v1.GrpcRoute.RouteRule.action:type_name -> google.events.cloud.networkservices.v1.GrpcRoute.RouteAction
	70, // 54: google.events.cloud.networkservices.v1.GrpcRoute.FaultInjectionPolicy.Delay.fixed_delay:type_name -> google.protobuf.Duration
	53, // 55: google.events.cloud.networkservices.v1.HttpRoute.HeaderMatch.range_match:type_name -> google.events.cloud.networkservices.v1.HttpRoute.HeaderMatch.IntegerRange
	39, // 56: google.events.cloud.networkservices.v1.HttpRoute.RouteMatch.headers:type_name -> google.events.cloud.networkservices.v1.HttpRoute.HeaderMatch
	40, // 57: google.events.cloud.networkservices.v1.HttpRoute.RouteMatch.query_parameters:type_name -> google.events.cloud.networkservices.v1.HttpRoute.QueryParameterMatch
	5,  // 58: google.events.cloud.networkservices.v1.HttpRoute.Redirect.response_code:type_name -> google.events.cloud.networkservices.v1.HttpRoute.Redirect.ResponseCode
	54, // 59: google.events.cloud.networkservices.v1.HttpRoute.FaultInjectionPolicy.delay:type_name -> google.events.cloud.networkservices.v1.HttpRoute.FaultInjectionPolicy.Delay
	55, // 60: google.events.cloud.networkservices.v1.HttpRoute.FaultInjectionPolicy.abort:type_name -> google.events.cloud.networkservices.v1.HttpRoute.FaultInjectionPolicy.Abort
	56, // 61: google.events.cloud.networkservices.v1.HttpRoute.HeaderModifier.set:type_name -> google.events.cloud.networkservices.v1.HttpRoute.HeaderModifier.SetEntry
	57, // 62: google.events.cloud.networkservices.v1.HttpRoute.HeaderModifier.add:type_name -> google.events.cloud.networkservices.v1.HttpRoute.HeaderModifier.AddEntry
	70, // 63: google.events.cloud.networkservices.v1.HttpRoute.RetryPolicy.per_try_timeout:type_name -> google.protobuf.Duration
	42, // 64: google.events.cloud.networkservices.v1.HttpRoute.RequestMirrorPolicy.destination:type_name -> google.events.cloud.networkservices.v1.HttpRoute.Destination
	42, // 65: google.events.cloud.networkservices.v1.HttpRoute.RouteAction.destinations:type_name -> google.events.cloud.networkservices.v1.HttpRoute.Destination
	43, // 66: google.events.cloud.networkservices.v1.HttpRoute.RouteAction.redirect:type_name -> google.events.cloud.networkservices.v1.HttpRoute.Redirect
	44, // 67: google.events.cloud.networkservices.v1.HttpRoute.RouteAction.fault_injection_policy:type_name -> google.events.cloud.networkservices.v1.HttpRoute.FaultInjectionPolicy
	45, // 68: google.events.cloud.networkservices.v1.HttpRoute.RouteAction.request_header_modifier:type_name -> google.events.cloud.networkservices.v1.HttpRoute.HeaderModifier
	45, // 69: google.events.cloud.networkservices.v1.HttpRoute.RouteAction.response_header_modifier:type_name -> google.events.cloud.networkservices.v1.HttpRoute.HeaderModifier
	46, // 70: google.events.cloud.networkservices.v1.HttpRoute.RouteAction.url_rewrite:type_name -> google.events.cloud.networkservices.v1.HttpRoute.URLRewrite
	70, // 71: google.events.cloud.networkservices.v1.HttpRoute.RouteAction.timeout:type_name -> google.protobuf.Duration
	47, // 72: google.events.cloud.networkservices.v1.HttpRoute.RouteAction.retry_policy:type_name -> google.events.cloud.networkservices.v1.HttpRoute.RetryPolicy
	48, // 73: google.events.cloud.networkservices.v1.HttpRoute.RouteAction.request_mirror_policy:type_name -> google.events.cloud.networkservices.v1.HttpRoute.RequestMirrorPolicy
	49, // 74: google.events.cloud.networkservices.v1.HttpRoute.RouteAction.cors_policy:type_name -> google.events.cloud.networkservices.v1.HttpRoute.CorsPolicy
	41, // 75: google.events.cloud.networkservices.v1.HttpRoute.RouteRule.matches:type_name -> google.events.cloud.networkservices.v1.HttpRoute.RouteMatch
	50, // 76: google.events.cloud.networkservices.v1.HttpRoute.RouteRule.action:type_name -> google.events.cloud.networkservices.v1.HttpRoute.RouteAction
	70, // 77: google.events.cloud.networkservices.v1.HttpRoute.FaultInjectionPolicy.Delay.fixed_delay:type_name -> google.protobuf.Duration
	61, // 78: google.events.cloud.networkservices.v1.TcpRoute.RouteRule.matches:type_name -> google.events.cloud.networkservices.v1.TcpRoute.RouteMatch
	62, // 79: google.events.cloud.networkservices.v1.TcpRoute.RouteRule.action:type_name -> google.events.cloud.networkservices.v1.TcpRoute.RouteAction
	63, // 80: google.events.cloud.networkservices.v1.TcpRoute.RouteAction.destinations:type_name -> google.events.cloud.networkservices.v1.TcpRoute.RouteDestination
	66, // 81: google.events.cloud.networkservices.v1.TlsRoute.RouteRule.matches:type_name -> google.events.cloud.networkservices.v1.TlsRoute.RouteMatch
	67, // 82: google.events.cloud.networkservices.v1.TlsRoute.RouteRule.action:type_name -> google.events.cloud.networkservices.v1.TlsRoute.RouteAction
	68, // 83: google.events.cloud.networkservices.v1.TlsRoute.RouteAction.destinations:type_name -> google.events.cloud.networkservices.v1.TlsRoute.RouteDestination
	84, // [84:84] is the sub-list for method output_type
	84, // [84:84] is the sub-list for method input_type
	84, // [84:84] is the sub-list for extension type_name
	84, // [84:84] is the sub-list for extension extendee
	0,  // [0:84] is the sub-list for field type_name
}

func init() { file_cloud_networkservices_v1_data_proto_init() }
func file_cloud_networkservices_v1_data_proto_init() {
	if File_cloud_networkservices_v1_data_proto != nil {
		return
	}
	file_cloud_networkservices_v1_data_proto_msgTypes[1].OneofWrappers = []any{
		(*EndpointMatcher_MetadataLabelMatcher_)(nil),
	}
	file_cloud_networkservices_v1_data_proto_msgTypes[10].OneofWrappers = []any{}
	file_cloud_networkservices_v1_data_proto_msgTypes[11].OneofWrappers = []any{}
	file_cloud_networkservices_v1_data_proto_msgTypes[12].OneofWrappers = []any{}
	file_cloud_networkservices_v1_data_proto_msgTypes[13].OneofWrappers = []any{}
	file_cloud_networkservices_v1_data_proto_msgTypes[14].OneofWrappers = []any{}
	file_cloud_networkservices_v1_data_proto_msgTypes[15].OneofWrappers = []any{}
	file_cloud_networkservices_v1_data_proto_msgTypes[16].OneofWrappers = []any{}
	file_cloud_networkservices_v1_data_proto_msgTypes[17].OneofWrappers = []any{}
	file_cloud_networkservices_v1_data_proto_msgTypes[22].OneofWrappers = []any{}
	file_cloud_networkservices_v1_data_proto_msgTypes[24].OneofWrappers = []any{}
	file_cloud_networkservices_v1_data_proto_msgTypes[25].OneofWrappers = []any{
		(*GrpcRoute_Destination_ServiceName)(nil),
	}
	file_cloud_networkservices_v1_data_proto_msgTypes[26].OneofWrappers = []any{}
	file_cloud_networkservices_v1_data_proto_msgTypes[31].OneofWrappers = []any{}
	file_cloud_networkservices_v1_data_proto_msgTypes[32].OneofWrappers = []any{}
	file_cloud_networkservices_v1_data_proto_msgTypes[33].OneofWrappers = []any{
		(*HttpRoute_HeaderMatch_ExactMatch)(nil),
		(*HttpRoute_HeaderMatch_RegexMatch)(nil),
		(*HttpRoute_HeaderMatch_PrefixMatch)(nil),
		(*HttpRoute_HeaderMatch_PresentMatch)(nil),
		(*HttpRoute_HeaderMatch_SuffixMatch)(nil),
		(*HttpRoute_HeaderMatch_RangeMatch)(nil),
	}
	file_cloud_networkservices_v1_data_proto_msgTypes[34].OneofWrappers = []any{
		(*HttpRoute_QueryParameterMatch_ExactMatch)(nil),
		(*HttpRoute_QueryParameterMatch_RegexMatch)(nil),
		(*HttpRoute_QueryParameterMatch_PresentMatch)(nil),
	}
	file_cloud_networkservices_v1_data_proto_msgTypes[35].OneofWrappers = []any{
		(*HttpRoute_RouteMatch_FullPathMatch)(nil),
		(*HttpRoute_RouteMatch_PrefixMatch)(nil),
		(*HttpRoute_RouteMatch_RegexMatch)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cloud_networkservices_v1_data_proto_rawDesc), len(file_cloud_networkservices_v1_data_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   63,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_networkservices_v1_data_proto_goTypes,
		DependencyIndexes: file_cloud_networkservices_v1_data_proto_depIdxs,
		EnumInfos:         file_cloud_networkservices_v1_data_proto_enumTypes,
		MessageInfos:      file_cloud_networkservices_v1_data_proto_msgTypes,
	}.Build()
	File_cloud_networkservices_v1_data_proto = out.File
	file_cloud_networkservices_v1_data_proto_goTypes = nil
	file_cloud_networkservices_v1_data_proto_depIdxs = nil
}
