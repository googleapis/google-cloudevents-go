// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.6
// source: cloud/vmmigration/v1/data.proto

package vmmigrationdata

import (
	errdetails "google.golang.org/genproto/googleapis/rpc/errdetails"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Types of disks supported for Compute Engine VM.
type ComputeEngineDiskType int32

const (
	// An unspecified disk type. Will be used as STANDARD.
	ComputeEngineDiskType_COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED ComputeEngineDiskType = 0
	// A Standard disk type.
	ComputeEngineDiskType_COMPUTE_ENGINE_DISK_TYPE_STANDARD ComputeEngineDiskType = 1
	// SSD hard disk type.
	ComputeEngineDiskType_COMPUTE_ENGINE_DISK_TYPE_SSD ComputeEngineDiskType = 2
	// An alternative to SSD persistent disks that balance performance and
	// cost.
	ComputeEngineDiskType_COMPUTE_ENGINE_DISK_TYPE_BALANCED ComputeEngineDiskType = 3
)

// Enum value maps for ComputeEngineDiskType.
var (
	ComputeEngineDiskType_name = map[int32]string{
		0: "COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED",
		1: "COMPUTE_ENGINE_DISK_TYPE_STANDARD",
		2: "COMPUTE_ENGINE_DISK_TYPE_SSD",
		3: "COMPUTE_ENGINE_DISK_TYPE_BALANCED",
	}
	ComputeEngineDiskType_value = map[string]int32{
		"COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED": 0,
		"COMPUTE_ENGINE_DISK_TYPE_STANDARD":    1,
		"COMPUTE_ENGINE_DISK_TYPE_SSD":         2,
		"COMPUTE_ENGINE_DISK_TYPE_BALANCED":    3,
	}
)

func (x ComputeEngineDiskType) Enum() *ComputeEngineDiskType {
	p := new(ComputeEngineDiskType)
	*p = x
	return p
}

func (x ComputeEngineDiskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComputeEngineDiskType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_vmmigration_v1_data_proto_enumTypes[0].Descriptor()
}

func (ComputeEngineDiskType) Type() protoreflect.EnumType {
	return &file_cloud_vmmigration_v1_data_proto_enumTypes[0]
}

func (x ComputeEngineDiskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComputeEngineDiskType.Descriptor instead.
func (ComputeEngineDiskType) EnumDescriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{0}
}

// Types of licenses used in OS adaptation.
type ComputeEngineLicenseType int32

const (
	// The license type is the default for the OS.
	ComputeEngineLicenseType_COMPUTE_ENGINE_LICENSE_TYPE_DEFAULT ComputeEngineLicenseType = 0
	// The license type is Pay As You Go license type.
	ComputeEngineLicenseType_COMPUTE_ENGINE_LICENSE_TYPE_PAYG ComputeEngineLicenseType = 1
	// The license type is Bring Your Own License type.
	ComputeEngineLicenseType_COMPUTE_ENGINE_LICENSE_TYPE_BYOL ComputeEngineLicenseType = 2
)

// Enum value maps for ComputeEngineLicenseType.
var (
	ComputeEngineLicenseType_name = map[int32]string{
		0: "COMPUTE_ENGINE_LICENSE_TYPE_DEFAULT",
		1: "COMPUTE_ENGINE_LICENSE_TYPE_PAYG",
		2: "COMPUTE_ENGINE_LICENSE_TYPE_BYOL",
	}
	ComputeEngineLicenseType_value = map[string]int32{
		"COMPUTE_ENGINE_LICENSE_TYPE_DEFAULT": 0,
		"COMPUTE_ENGINE_LICENSE_TYPE_PAYG":    1,
		"COMPUTE_ENGINE_LICENSE_TYPE_BYOL":    2,
	}
)

func (x ComputeEngineLicenseType) Enum() *ComputeEngineLicenseType {
	p := new(ComputeEngineLicenseType)
	*p = x
	return p
}

func (x ComputeEngineLicenseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComputeEngineLicenseType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_vmmigration_v1_data_proto_enumTypes[1].Descriptor()
}

func (ComputeEngineLicenseType) Type() protoreflect.EnumType {
	return &file_cloud_vmmigration_v1_data_proto_enumTypes[1]
}

func (x ComputeEngineLicenseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComputeEngineLicenseType.Descriptor instead.
func (ComputeEngineLicenseType) EnumDescriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{1}
}

// Possible values for vm boot option.
type ComputeEngineBootOption int32

const (
	// The boot option is unknown.
	ComputeEngineBootOption_COMPUTE_ENGINE_BOOT_OPTION_UNSPECIFIED ComputeEngineBootOption = 0
	// The boot option is EFI.
	ComputeEngineBootOption_COMPUTE_ENGINE_BOOT_OPTION_EFI ComputeEngineBootOption = 1
	// The boot option is BIOS.
	ComputeEngineBootOption_COMPUTE_ENGINE_BOOT_OPTION_BIOS ComputeEngineBootOption = 2
)

// Enum value maps for ComputeEngineBootOption.
var (
	ComputeEngineBootOption_name = map[int32]string{
		0: "COMPUTE_ENGINE_BOOT_OPTION_UNSPECIFIED",
		1: "COMPUTE_ENGINE_BOOT_OPTION_EFI",
		2: "COMPUTE_ENGINE_BOOT_OPTION_BIOS",
	}
	ComputeEngineBootOption_value = map[string]int32{
		"COMPUTE_ENGINE_BOOT_OPTION_UNSPECIFIED": 0,
		"COMPUTE_ENGINE_BOOT_OPTION_EFI":         1,
		"COMPUTE_ENGINE_BOOT_OPTION_BIOS":        2,
	}
)

func (x ComputeEngineBootOption) Enum() *ComputeEngineBootOption {
	p := new(ComputeEngineBootOption)
	*p = x
	return p
}

func (x ComputeEngineBootOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComputeEngineBootOption) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_vmmigration_v1_data_proto_enumTypes[2].Descriptor()
}

func (ComputeEngineBootOption) Type() protoreflect.EnumType {
	return &file_cloud_vmmigration_v1_data_proto_enumTypes[2]
}

func (x ComputeEngineBootOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComputeEngineBootOption.Descriptor instead.
func (ComputeEngineBootOption) EnumDescriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{2}
}

// Possible states of a replication cycle.
type ReplicationCycle_State int32

const (
	// The state is unknown. This is used for API compatibility only and is not
	// used by the system.
	ReplicationCycle_STATE_UNSPECIFIED ReplicationCycle_State = 0
	// The replication cycle is running.
	ReplicationCycle_RUNNING ReplicationCycle_State = 1
	// The replication cycle is paused.
	ReplicationCycle_PAUSED ReplicationCycle_State = 2
	// The replication cycle finished with errors.
	ReplicationCycle_FAILED ReplicationCycle_State = 3
	// The replication cycle finished successfully.
	ReplicationCycle_SUCCEEDED ReplicationCycle_State = 4
)

// Enum value maps for ReplicationCycle_State.
var (
	ReplicationCycle_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "RUNNING",
		2: "PAUSED",
		3: "FAILED",
		4: "SUCCEEDED",
	}
	ReplicationCycle_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"RUNNING":           1,
		"PAUSED":            2,
		"FAILED":            3,
		"SUCCEEDED":         4,
	}
)

func (x ReplicationCycle_State) Enum() *ReplicationCycle_State {
	p := new(ReplicationCycle_State)
	*p = x
	return p
}

func (x ReplicationCycle_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplicationCycle_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_vmmigration_v1_data_proto_enumTypes[3].Descriptor()
}

func (ReplicationCycle_State) Type() protoreflect.EnumType {
	return &file_cloud_vmmigration_v1_data_proto_enumTypes[3]
}

func (x ReplicationCycle_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReplicationCycle_State.Descriptor instead.
func (ReplicationCycle_State) EnumDescriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{0, 0}
}

// The possible values of the state/health of source VM.
type MigratingVm_State int32

const (
	// The state was not sampled by the health checks yet.
	MigratingVm_STATE_UNSPECIFIED MigratingVm_State = 0
	// The VM in the source is being verified.
	MigratingVm_PENDING MigratingVm_State = 1
	// The source VM was verified, and it's ready to start replication.
	MigratingVm_READY MigratingVm_State = 2
	// Migration is going through the first sync cycle.
	MigratingVm_FIRST_SYNC MigratingVm_State = 3
	// The replication is active, and it's running or scheduled to run.
	MigratingVm_ACTIVE MigratingVm_State = 4
	// The source VM is being turned off, and a final replication is currently
	// running.
	MigratingVm_CUTTING_OVER MigratingVm_State = 7
	// The source VM was stopped and replicated. The replication is currently
	// paused.
	MigratingVm_CUTOVER MigratingVm_State = 8
	// A cutover job is active and replication cycle is running the final sync.
	MigratingVm_FINAL_SYNC MigratingVm_State = 9
	// The replication was paused by the user and no cycles are scheduled to
	// run.
	MigratingVm_PAUSED MigratingVm_State = 10
	// The migrating VM is being finalized and migration resources are being
	// removed.
	MigratingVm_FINALIZING MigratingVm_State = 11
	// The replication process is done. The migrating VM is finalized and no
	// longer consumes billable resources.
	MigratingVm_FINALIZED MigratingVm_State = 12
	// The replication process encountered an unrecoverable error and was
	// aborted.
	MigratingVm_ERROR MigratingVm_State = 13
)

// Enum value maps for MigratingVm_State.
var (
	MigratingVm_State_name = map[int32]string{
		0:  "STATE_UNSPECIFIED",
		1:  "PENDING",
		2:  "READY",
		3:  "FIRST_SYNC",
		4:  "ACTIVE",
		7:  "CUTTING_OVER",
		8:  "CUTOVER",
		9:  "FINAL_SYNC",
		10: "PAUSED",
		11: "FINALIZING",
		12: "FINALIZED",
		13: "ERROR",
	}
	MigratingVm_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"PENDING":           1,
		"READY":             2,
		"FIRST_SYNC":        3,
		"ACTIVE":            4,
		"CUTTING_OVER":      7,
		"CUTOVER":           8,
		"FINAL_SYNC":        9,
		"PAUSED":            10,
		"FINALIZING":        11,
		"FINALIZED":         12,
		"ERROR":             13,
	}
)

func (x MigratingVm_State) Enum() *MigratingVm_State {
	p := new(MigratingVm_State)
	*p = x
	return p
}

func (x MigratingVm_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MigratingVm_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_vmmigration_v1_data_proto_enumTypes[4].Descriptor()
}

func (MigratingVm_State) Type() protoreflect.EnumType {
	return &file_cloud_vmmigration_v1_data_proto_enumTypes[4]
}

func (x MigratingVm_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MigratingVm_State.Descriptor instead.
func (MigratingVm_State) EnumDescriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{6, 0}
}

// Possible states of the clone job.
type CloneJob_State int32

const (
	// The state is unknown. This is used for API compatibility only and is not
	// used by the system.
	CloneJob_STATE_UNSPECIFIED CloneJob_State = 0
	// The clone job has not yet started.
	CloneJob_PENDING CloneJob_State = 1
	// The clone job is active and running.
	CloneJob_ACTIVE CloneJob_State = 2
	// The clone job finished with errors.
	CloneJob_FAILED CloneJob_State = 3
	// The clone job finished successfully.
	CloneJob_SUCCEEDED CloneJob_State = 4
	// The clone job was cancelled.
	CloneJob_CANCELLED CloneJob_State = 5
	// The clone job is being cancelled.
	CloneJob_CANCELLING CloneJob_State = 6
	// OS adaptation is running as part of the clone job to generate license.
	CloneJob_ADAPTING_OS CloneJob_State = 7
)

// Enum value maps for CloneJob_State.
var (
	CloneJob_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "PENDING",
		2: "ACTIVE",
		3: "FAILED",
		4: "SUCCEEDED",
		5: "CANCELLED",
		6: "CANCELLING",
		7: "ADAPTING_OS",
	}
	CloneJob_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"PENDING":           1,
		"ACTIVE":            2,
		"FAILED":            3,
		"SUCCEEDED":         4,
		"CANCELLED":         5,
		"CANCELLING":        6,
		"ADAPTING_OS":       7,
	}
)

func (x CloneJob_State) Enum() *CloneJob_State {
	p := new(CloneJob_State)
	*p = x
	return p
}

func (x CloneJob_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloneJob_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_vmmigration_v1_data_proto_enumTypes[5].Descriptor()
}

func (CloneJob_State) Type() protoreflect.EnumType {
	return &file_cloud_vmmigration_v1_data_proto_enumTypes[5]
}

func (x CloneJob_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloneJob_State.Descriptor instead.
func (CloneJob_State) EnumDescriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{8, 0}
}

// Possible states of the cutover job.
type CutoverJob_State int32

const (
	// The state is unknown. This is used for API compatibility only and is not
	// used by the system.
	CutoverJob_STATE_UNSPECIFIED CutoverJob_State = 0
	// The cutover job has not yet started.
	CutoverJob_PENDING CutoverJob_State = 1
	// The cutover job finished with errors.
	CutoverJob_FAILED CutoverJob_State = 2
	// The cutover job finished successfully.
	CutoverJob_SUCCEEDED CutoverJob_State = 3
	// The cutover job was cancelled.
	CutoverJob_CANCELLED CutoverJob_State = 4
	// The cutover job is being cancelled.
	CutoverJob_CANCELLING CutoverJob_State = 5
	// The cutover job is active and running.
	CutoverJob_ACTIVE CutoverJob_State = 6
	// OS adaptation is running as part of the cutover job to generate license.
	CutoverJob_ADAPTING_OS CutoverJob_State = 7
)

// Enum value maps for CutoverJob_State.
var (
	CutoverJob_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "PENDING",
		2: "FAILED",
		3: "SUCCEEDED",
		4: "CANCELLED",
		5: "CANCELLING",
		6: "ACTIVE",
		7: "ADAPTING_OS",
	}
	CutoverJob_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"PENDING":           1,
		"FAILED":            2,
		"SUCCEEDED":         3,
		"CANCELLED":         4,
		"CANCELLING":        5,
		"ACTIVE":            6,
		"ADAPTING_OS":       7,
	}
)

func (x CutoverJob_State) Enum() *CutoverJob_State {
	p := new(CutoverJob_State)
	*p = x
	return p
}

func (x CutoverJob_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CutoverJob_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_vmmigration_v1_data_proto_enumTypes[6].Descriptor()
}

func (CutoverJob_State) Type() protoreflect.EnumType {
	return &file_cloud_vmmigration_v1_data_proto_enumTypes[6]
}

func (x CutoverJob_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CutoverJob_State.Descriptor instead.
func (CutoverJob_State) EnumDescriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{13, 0}
}

// The possible values of the state.
type AwsSourceDetails_State int32

const (
	// The state is unknown. This is used for API compatibility only and is not
	// used by the system.
	AwsSourceDetails_STATE_UNSPECIFIED AwsSourceDetails_State = 0
	// The state was not sampled by the health checks yet.
	AwsSourceDetails_PENDING AwsSourceDetails_State = 1
	// The source is available but might not be usable yet due to invalid
	// credentials or another reason.
	// The error message will contain further details.
	AwsSourceDetails_FAILED AwsSourceDetails_State = 2
	// The source exists and its credentials were verified.
	AwsSourceDetails_ACTIVE AwsSourceDetails_State = 3
)

// Enum value maps for AwsSourceDetails_State.
var (
	AwsSourceDetails_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "PENDING",
		2: "FAILED",
		3: "ACTIVE",
	}
	AwsSourceDetails_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"PENDING":           1,
		"FAILED":            2,
		"ACTIVE":            3,
	}
)

func (x AwsSourceDetails_State) Enum() *AwsSourceDetails_State {
	p := new(AwsSourceDetails_State)
	*p = x
	return p
}

func (x AwsSourceDetails_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AwsSourceDetails_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_vmmigration_v1_data_proto_enumTypes[7].Descriptor()
}

func (AwsSourceDetails_State) Type() protoreflect.EnumType {
	return &file_cloud_vmmigration_v1_data_proto_enumTypes[7]
}

func (x AwsSourceDetails_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AwsSourceDetails_State.Descriptor instead.
func (AwsSourceDetails_State) EnumDescriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{18, 0}
}

// The possible values of the state.
type DatacenterConnector_State int32

const (
	// The state is unknown. This is used for API compatibility only and is not
	// used by the system.
	DatacenterConnector_STATE_UNSPECIFIED DatacenterConnector_State = 0
	// The state was not sampled by the health checks yet.
	DatacenterConnector_PENDING DatacenterConnector_State = 1
	// The source was sampled by health checks and is not available.
	DatacenterConnector_OFFLINE DatacenterConnector_State = 2
	// The source is available but might not be usable yet due to unvalidated
	// credentials or another reason. The credentials referred to are the ones
	// to the Source. The error message will contain further details.
	DatacenterConnector_FAILED DatacenterConnector_State = 3
	// The source exists and its credentials were verified.
	DatacenterConnector_ACTIVE DatacenterConnector_State = 4
)

// Enum value maps for DatacenterConnector_State.
var (
	DatacenterConnector_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "PENDING",
		2: "OFFLINE",
		3: "FAILED",
		4: "ACTIVE",
	}
	DatacenterConnector_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"PENDING":           1,
		"OFFLINE":           2,
		"FAILED":            3,
		"ACTIVE":            4,
	}
)

func (x DatacenterConnector_State) Enum() *DatacenterConnector_State {
	p := new(DatacenterConnector_State)
	*p = x
	return p
}

func (x DatacenterConnector_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatacenterConnector_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_vmmigration_v1_data_proto_enumTypes[8].Descriptor()
}

func (DatacenterConnector_State) Type() protoreflect.EnumType {
	return &file_cloud_vmmigration_v1_data_proto_enumTypes[8]
}

func (x DatacenterConnector_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatacenterConnector_State.Descriptor instead.
func (DatacenterConnector_State) EnumDescriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{19, 0}
}

// The possible values of the state.
type UpgradeStatus_State int32

const (
	// The state was not sampled by the health checks yet.
	UpgradeStatus_STATE_UNSPECIFIED UpgradeStatus_State = 0
	// The upgrade has started.
	UpgradeStatus_RUNNING UpgradeStatus_State = 1
	// The upgrade failed.
	UpgradeStatus_FAILED UpgradeStatus_State = 2
	// The upgrade finished successfully.
	UpgradeStatus_SUCCEEDED UpgradeStatus_State = 3
)

// Enum value maps for UpgradeStatus_State.
var (
	UpgradeStatus_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "RUNNING",
		2: "FAILED",
		3: "SUCCEEDED",
	}
	UpgradeStatus_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"RUNNING":           1,
		"FAILED":            2,
		"SUCCEEDED":         3,
	}
)

func (x UpgradeStatus_State) Enum() *UpgradeStatus_State {
	p := new(UpgradeStatus_State)
	*p = x
	return p
}

func (x UpgradeStatus_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpgradeStatus_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_vmmigration_v1_data_proto_enumTypes[9].Descriptor()
}

func (UpgradeStatus_State) Type() protoreflect.EnumType {
	return &file_cloud_vmmigration_v1_data_proto_enumTypes[9]
}

func (x UpgradeStatus_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpgradeStatus_State.Descriptor instead.
func (UpgradeStatus_State) EnumDescriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{20, 0}
}

// Possible values for the power state of the VM.
type VmwareVmDetails_PowerState int32

const (
	// Power state is not specified.
	VmwareVmDetails_POWER_STATE_UNSPECIFIED VmwareVmDetails_PowerState = 0
	// The VM is turned ON.
	VmwareVmDetails_ON VmwareVmDetails_PowerState = 1
	// The VM is turned OFF.
	VmwareVmDetails_OFF VmwareVmDetails_PowerState = 2
	// The VM is suspended. This is similar to hibernation or sleep mode.
	VmwareVmDetails_SUSPENDED VmwareVmDetails_PowerState = 3
)

// Enum value maps for VmwareVmDetails_PowerState.
var (
	VmwareVmDetails_PowerState_name = map[int32]string{
		0: "POWER_STATE_UNSPECIFIED",
		1: "ON",
		2: "OFF",
		3: "SUSPENDED",
	}
	VmwareVmDetails_PowerState_value = map[string]int32{
		"POWER_STATE_UNSPECIFIED": 0,
		"ON":                      1,
		"OFF":                     2,
		"SUSPENDED":               3,
	}
)

func (x VmwareVmDetails_PowerState) Enum() *VmwareVmDetails_PowerState {
	p := new(VmwareVmDetails_PowerState)
	*p = x
	return p
}

func (x VmwareVmDetails_PowerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VmwareVmDetails_PowerState) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_vmmigration_v1_data_proto_enumTypes[10].Descriptor()
}

func (VmwareVmDetails_PowerState) Type() protoreflect.EnumType {
	return &file_cloud_vmmigration_v1_data_proto_enumTypes[10]
}

func (x VmwareVmDetails_PowerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VmwareVmDetails_PowerState.Descriptor instead.
func (VmwareVmDetails_PowerState) EnumDescriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{23, 0}
}

// Possible values for vm boot option.
type VmwareVmDetails_BootOption int32

const (
	// The boot option is unknown.
	VmwareVmDetails_BOOT_OPTION_UNSPECIFIED VmwareVmDetails_BootOption = 0
	// The boot option is EFI.
	VmwareVmDetails_EFI VmwareVmDetails_BootOption = 1
	// The boot option is BIOS.
	VmwareVmDetails_BIOS VmwareVmDetails_BootOption = 2
)

// Enum value maps for VmwareVmDetails_BootOption.
var (
	VmwareVmDetails_BootOption_name = map[int32]string{
		0: "BOOT_OPTION_UNSPECIFIED",
		1: "EFI",
		2: "BIOS",
	}
	VmwareVmDetails_BootOption_value = map[string]int32{
		"BOOT_OPTION_UNSPECIFIED": 0,
		"EFI":                     1,
		"BIOS":                    2,
	}
)

func (x VmwareVmDetails_BootOption) Enum() *VmwareVmDetails_BootOption {
	p := new(VmwareVmDetails_BootOption)
	*p = x
	return p
}

func (x VmwareVmDetails_BootOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VmwareVmDetails_BootOption) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_vmmigration_v1_data_proto_enumTypes[11].Descriptor()
}

func (VmwareVmDetails_BootOption) Type() protoreflect.EnumType {
	return &file_cloud_vmmigration_v1_data_proto_enumTypes[11]
}

func (x VmwareVmDetails_BootOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VmwareVmDetails_BootOption.Descriptor instead.
func (VmwareVmDetails_BootOption) EnumDescriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{23, 1}
}

// Utilization report state.
type UtilizationReport_State int32

const (
	// The state is unknown. This value is not in use.
	UtilizationReport_STATE_UNSPECIFIED UtilizationReport_State = 0
	// The report is in the making.
	UtilizationReport_CREATING UtilizationReport_State = 1
	// Report creation completed successfully.
	UtilizationReport_SUCCEEDED UtilizationReport_State = 2
	// Report creation failed.
	UtilizationReport_FAILED UtilizationReport_State = 3
)

// Enum value maps for UtilizationReport_State.
var (
	UtilizationReport_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "CREATING",
		2: "SUCCEEDED",
		3: "FAILED",
	}
	UtilizationReport_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"CREATING":          1,
		"SUCCEEDED":         2,
		"FAILED":            3,
	}
)

func (x UtilizationReport_State) Enum() *UtilizationReport_State {
	p := new(UtilizationReport_State)
	*p = x
	return p
}

func (x UtilizationReport_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UtilizationReport_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_vmmigration_v1_data_proto_enumTypes[12].Descriptor()
}

func (UtilizationReport_State) Type() protoreflect.EnumType {
	return &file_cloud_vmmigration_v1_data_proto_enumTypes[12]
}

func (x UtilizationReport_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UtilizationReport_State.Descriptor instead.
func (UtilizationReport_State) EnumDescriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{24, 0}
}

// Report time frame options.
type UtilizationReport_TimeFrame int32

const (
	// The time frame was not specified and will default to WEEK.
	UtilizationReport_TIME_FRAME_UNSPECIFIED UtilizationReport_TimeFrame = 0
	// One week.
	UtilizationReport_WEEK UtilizationReport_TimeFrame = 1
	// One month.
	UtilizationReport_MONTH UtilizationReport_TimeFrame = 2
	// One year.
	UtilizationReport_YEAR UtilizationReport_TimeFrame = 3
)

// Enum value maps for UtilizationReport_TimeFrame.
var (
	UtilizationReport_TimeFrame_name = map[int32]string{
		0: "TIME_FRAME_UNSPECIFIED",
		1: "WEEK",
		2: "MONTH",
		3: "YEAR",
	}
	UtilizationReport_TimeFrame_value = map[string]int32{
		"TIME_FRAME_UNSPECIFIED": 0,
		"WEEK":                   1,
		"MONTH":                  2,
		"YEAR":                   3,
	}
)

func (x UtilizationReport_TimeFrame) Enum() *UtilizationReport_TimeFrame {
	p := new(UtilizationReport_TimeFrame)
	*p = x
	return p
}

func (x UtilizationReport_TimeFrame) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UtilizationReport_TimeFrame) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_vmmigration_v1_data_proto_enumTypes[13].Descriptor()
}

func (UtilizationReport_TimeFrame) Type() protoreflect.EnumType {
	return &file_cloud_vmmigration_v1_data_proto_enumTypes[13]
}

func (x UtilizationReport_TimeFrame) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UtilizationReport_TimeFrame.Descriptor instead.
func (UtilizationReport_TimeFrame) EnumDescriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{24, 1}
}

// License types used in OS adaptation.
type AppliedLicense_Type int32

const (
	// Unspecified license for the OS.
	AppliedLicense_TYPE_UNSPECIFIED AppliedLicense_Type = 0
	// No license available for the OS.
	AppliedLicense_NONE AppliedLicense_Type = 1
	// The license type is Pay As You Go license type.
	AppliedLicense_PAYG AppliedLicense_Type = 2
	// The license type is Bring Your Own License type.
	AppliedLicense_BYOL AppliedLicense_Type = 3
)

// Enum value maps for AppliedLicense_Type.
var (
	AppliedLicense_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "NONE",
		2: "PAYG",
		3: "BYOL",
	}
	AppliedLicense_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"NONE":             1,
		"PAYG":             2,
		"BYOL":             3,
	}
)

func (x AppliedLicense_Type) Enum() *AppliedLicense_Type {
	p := new(AppliedLicense_Type)
	*p = x
	return p
}

func (x AppliedLicense_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppliedLicense_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_vmmigration_v1_data_proto_enumTypes[14].Descriptor()
}

func (AppliedLicense_Type) Type() protoreflect.EnumType {
	return &file_cloud_vmmigration_v1_data_proto_enumTypes[14]
}

func (x AppliedLicense_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppliedLicense_Type.Descriptor instead.
func (AppliedLicense_Type) EnumDescriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{30, 0}
}

// Possible types of node selection operators. Valid operators are IN for
// affinity and NOT_IN for anti-affinity.
type SchedulingNodeAffinity_Operator int32

const (
	// An unknown, unexpected behavior.
	SchedulingNodeAffinity_OPERATOR_UNSPECIFIED SchedulingNodeAffinity_Operator = 0
	// The node resource group should be in these resources affinity.
	SchedulingNodeAffinity_IN SchedulingNodeAffinity_Operator = 1
	// The node resource group should not be in these resources affinity.
	SchedulingNodeAffinity_NOT_IN SchedulingNodeAffinity_Operator = 2
)

// Enum value maps for SchedulingNodeAffinity_Operator.
var (
	SchedulingNodeAffinity_Operator_name = map[int32]string{
		0: "OPERATOR_UNSPECIFIED",
		1: "IN",
		2: "NOT_IN",
	}
	SchedulingNodeAffinity_Operator_value = map[string]int32{
		"OPERATOR_UNSPECIFIED": 0,
		"IN":                   1,
		"NOT_IN":               2,
	}
)

func (x SchedulingNodeAffinity_Operator) Enum() *SchedulingNodeAffinity_Operator {
	p := new(SchedulingNodeAffinity_Operator)
	*p = x
	return p
}

func (x SchedulingNodeAffinity_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchedulingNodeAffinity_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_vmmigration_v1_data_proto_enumTypes[15].Descriptor()
}

func (SchedulingNodeAffinity_Operator) Type() protoreflect.EnumType {
	return &file_cloud_vmmigration_v1_data_proto_enumTypes[15]
}

func (x SchedulingNodeAffinity_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchedulingNodeAffinity_Operator.Descriptor instead.
func (SchedulingNodeAffinity_Operator) EnumDescriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{31, 0}
}

type ComputeScheduling_OnHostMaintenance int32

const (
	// An unknown, unexpected behavior.
	ComputeScheduling_ON_HOST_MAINTENANCE_UNSPECIFIED ComputeScheduling_OnHostMaintenance = 0
	// Terminate the instance when the host machine undergoes maintenance.
	ComputeScheduling_TERMINATE ComputeScheduling_OnHostMaintenance = 1
	// Migrate the instance when the host machine undergoes maintenance.
	ComputeScheduling_MIGRATE ComputeScheduling_OnHostMaintenance = 2
)

// Enum value maps for ComputeScheduling_OnHostMaintenance.
var (
	ComputeScheduling_OnHostMaintenance_name = map[int32]string{
		0: "ON_HOST_MAINTENANCE_UNSPECIFIED",
		1: "TERMINATE",
		2: "MIGRATE",
	}
	ComputeScheduling_OnHostMaintenance_value = map[string]int32{
		"ON_HOST_MAINTENANCE_UNSPECIFIED": 0,
		"TERMINATE":                       1,
		"MIGRATE":                         2,
	}
)

func (x ComputeScheduling_OnHostMaintenance) Enum() *ComputeScheduling_OnHostMaintenance {
	p := new(ComputeScheduling_OnHostMaintenance)
	*p = x
	return p
}

func (x ComputeScheduling_OnHostMaintenance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComputeScheduling_OnHostMaintenance) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_vmmigration_v1_data_proto_enumTypes[16].Descriptor()
}

func (ComputeScheduling_OnHostMaintenance) Type() protoreflect.EnumType {
	return &file_cloud_vmmigration_v1_data_proto_enumTypes[16]
}

func (x ComputeScheduling_OnHostMaintenance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComputeScheduling_OnHostMaintenance.Descriptor instead.
func (ComputeScheduling_OnHostMaintenance) EnumDescriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{32, 0}
}

// Defines whether the Instance should be automatically restarted whenever
// it is terminated by Compute Engine (not terminated by user).
type ComputeScheduling_RestartType int32

const (
	// Unspecified behavior. This will use the default.
	ComputeScheduling_RESTART_TYPE_UNSPECIFIED ComputeScheduling_RestartType = 0
	// The Instance should be automatically restarted whenever it is
	// terminated by Compute Engine.
	ComputeScheduling_AUTOMATIC_RESTART ComputeScheduling_RestartType = 1
	// The Instance isn't automatically restarted whenever it is
	// terminated by Compute Engine.
	ComputeScheduling_NO_AUTOMATIC_RESTART ComputeScheduling_RestartType = 2
)

// Enum value maps for ComputeScheduling_RestartType.
var (
	ComputeScheduling_RestartType_name = map[int32]string{
		0: "RESTART_TYPE_UNSPECIFIED",
		1: "AUTOMATIC_RESTART",
		2: "NO_AUTOMATIC_RESTART",
	}
	ComputeScheduling_RestartType_value = map[string]int32{
		"RESTART_TYPE_UNSPECIFIED": 0,
		"AUTOMATIC_RESTART":        1,
		"NO_AUTOMATIC_RESTART":     2,
	}
)

func (x ComputeScheduling_RestartType) Enum() *ComputeScheduling_RestartType {
	p := new(ComputeScheduling_RestartType)
	*p = x
	return p
}

func (x ComputeScheduling_RestartType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComputeScheduling_RestartType) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_vmmigration_v1_data_proto_enumTypes[17].Descriptor()
}

func (ComputeScheduling_RestartType) Type() protoreflect.EnumType {
	return &file_cloud_vmmigration_v1_data_proto_enumTypes[17]
}

func (x ComputeScheduling_RestartType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComputeScheduling_RestartType.Descriptor instead.
func (ComputeScheduling_RestartType) EnumDescriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{32, 1}
}

// Represents possible warning codes.
type MigrationWarning_WarningCode int32

const (
	// Default value. This value is not used.
	MigrationWarning_WARNING_CODE_UNSPECIFIED MigrationWarning_WarningCode = 0
	// A warning originated from OS Adaptation.
	MigrationWarning_ADAPTATION_WARNING MigrationWarning_WarningCode = 1
)

// Enum value maps for MigrationWarning_WarningCode.
var (
	MigrationWarning_WarningCode_name = map[int32]string{
		0: "WARNING_CODE_UNSPECIFIED",
		1: "ADAPTATION_WARNING",
	}
	MigrationWarning_WarningCode_value = map[string]int32{
		"WARNING_CODE_UNSPECIFIED": 0,
		"ADAPTATION_WARNING":       1,
	}
)

func (x MigrationWarning_WarningCode) Enum() *MigrationWarning_WarningCode {
	p := new(MigrationWarning_WarningCode)
	*p = x
	return p
}

func (x MigrationWarning_WarningCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MigrationWarning_WarningCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_vmmigration_v1_data_proto_enumTypes[18].Descriptor()
}

func (MigrationWarning_WarningCode) Type() protoreflect.EnumType {
	return &file_cloud_vmmigration_v1_data_proto_enumTypes[18]
}

func (x MigrationWarning_WarningCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MigrationWarning_WarningCode.Descriptor instead.
func (MigrationWarning_WarningCode) EnumDescriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{36, 0}
}

// Possible values for AWS VM firmware.
type AwsSourceVmDetails_Firmware int32

const (
	// The firmware is unknown.
	AwsSourceVmDetails_FIRMWARE_UNSPECIFIED AwsSourceVmDetails_Firmware = 0
	// The firmware is EFI.
	AwsSourceVmDetails_EFI AwsSourceVmDetails_Firmware = 1
	// The firmware is BIOS.
	AwsSourceVmDetails_BIOS AwsSourceVmDetails_Firmware = 2
)

// Enum value maps for AwsSourceVmDetails_Firmware.
var (
	AwsSourceVmDetails_Firmware_name = map[int32]string{
		0: "FIRMWARE_UNSPECIFIED",
		1: "EFI",
		2: "BIOS",
	}
	AwsSourceVmDetails_Firmware_value = map[string]int32{
		"FIRMWARE_UNSPECIFIED": 0,
		"EFI":                  1,
		"BIOS":                 2,
	}
)

func (x AwsSourceVmDetails_Firmware) Enum() *AwsSourceVmDetails_Firmware {
	p := new(AwsSourceVmDetails_Firmware)
	*p = x
	return p
}

func (x AwsSourceVmDetails_Firmware) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AwsSourceVmDetails_Firmware) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_vmmigration_v1_data_proto_enumTypes[19].Descriptor()
}

func (AwsSourceVmDetails_Firmware) Type() protoreflect.EnumType {
	return &file_cloud_vmmigration_v1_data_proto_enumTypes[19]
}

func (x AwsSourceVmDetails_Firmware) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AwsSourceVmDetails_Firmware.Descriptor instead.
func (AwsSourceVmDetails_Firmware) EnumDescriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{37, 0}
}

// ReplicationCycle contains information about the current replication cycle
// status.
type ReplicationCycle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the ReplicationCycle.
	Name string `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	// The cycle's ordinal number.
	CycleNumber int32 `protobuf:"varint,10,opt,name=cycle_number,json=cycleNumber,proto3" json:"cycle_number,omitempty"`
	// The time the replication cycle has started.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The time the replication cycle has ended.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// The accumulated duration the replication cycle was paused.
	TotalPauseDuration *durationpb.Duration `protobuf:"bytes,7,opt,name=total_pause_duration,json=totalPauseDuration,proto3" json:"total_pause_duration,omitempty"`
	// The current progress in percentage of this cycle.
	// Was replaced by 'steps' field, which breaks down the cycle progression more
	// accurately.
	ProgressPercent int32 `protobuf:"varint,5,opt,name=progress_percent,json=progressPercent,proto3" json:"progress_percent,omitempty"`
	// The cycle's steps list representing its progress.
	Steps []*CycleStep `protobuf:"bytes,9,rep,name=steps,proto3" json:"steps,omitempty"`
	// State of the ReplicationCycle.
	State ReplicationCycle_State `protobuf:"varint,11,opt,name=state,proto3,enum=google.events.cloud.vmmigration.v1.ReplicationCycle_State" json:"state,omitempty"`
	// Provides details on the state of the cycle in case of an error.
	Error *status.Status `protobuf:"bytes,12,opt,name=error,proto3" json:"error,omitempty"`
	// Output only. Warnings that occurred during the cycle.
	Warnings []*MigrationWarning `protobuf:"bytes,14,rep,name=warnings,proto3" json:"warnings,omitempty"`
}

func (x *ReplicationCycle) Reset() {
	*x = ReplicationCycle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicationCycle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationCycle) ProtoMessage() {}

func (x *ReplicationCycle) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationCycle.ProtoReflect.Descriptor instead.
func (*ReplicationCycle) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{0}
}

func (x *ReplicationCycle) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReplicationCycle) GetCycleNumber() int32 {
	if x != nil {
		return x.CycleNumber
	}
	return 0
}

func (x *ReplicationCycle) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ReplicationCycle) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ReplicationCycle) GetTotalPauseDuration() *durationpb.Duration {
	if x != nil {
		return x.TotalPauseDuration
	}
	return nil
}

func (x *ReplicationCycle) GetProgressPercent() int32 {
	if x != nil {
		return x.ProgressPercent
	}
	return 0
}

func (x *ReplicationCycle) GetSteps() []*CycleStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *ReplicationCycle) GetState() ReplicationCycle_State {
	if x != nil {
		return x.State
	}
	return ReplicationCycle_STATE_UNSPECIFIED
}

func (x *ReplicationCycle) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReplicationCycle) GetWarnings() []*MigrationWarning {
	if x != nil {
		return x.Warnings
	}
	return nil
}

// CycleStep holds information about a step progress.
type CycleStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Step:
	//
	//	*CycleStep_InitializingReplication
	//	*CycleStep_Replicating
	//	*CycleStep_PostProcessing
	Step isCycleStep_Step `protobuf_oneof:"step"`
	// The time the cycle step has started.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The time the cycle step has ended.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *CycleStep) Reset() {
	*x = CycleStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CycleStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CycleStep) ProtoMessage() {}

func (x *CycleStep) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CycleStep.ProtoReflect.Descriptor instead.
func (*CycleStep) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{1}
}

func (m *CycleStep) GetStep() isCycleStep_Step {
	if m != nil {
		return m.Step
	}
	return nil
}

func (x *CycleStep) GetInitializingReplication() *InitializingReplicationStep {
	if x, ok := x.GetStep().(*CycleStep_InitializingReplication); ok {
		return x.InitializingReplication
	}
	return nil
}

func (x *CycleStep) GetReplicating() *ReplicatingStep {
	if x, ok := x.GetStep().(*CycleStep_Replicating); ok {
		return x.Replicating
	}
	return nil
}

func (x *CycleStep) GetPostProcessing() *PostProcessingStep {
	if x, ok := x.GetStep().(*CycleStep_PostProcessing); ok {
		return x.PostProcessing
	}
	return nil
}

func (x *CycleStep) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *CycleStep) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type isCycleStep_Step interface {
	isCycleStep_Step()
}

type CycleStep_InitializingReplication struct {
	// Initializing replication step.
	InitializingReplication *InitializingReplicationStep `protobuf:"bytes,3,opt,name=initializing_replication,json=initializingReplication,proto3,oneof"`
}

type CycleStep_Replicating struct {
	// Replicating step.
	Replicating *ReplicatingStep `protobuf:"bytes,4,opt,name=replicating,proto3,oneof"`
}

type CycleStep_PostProcessing struct {
	// Post processing step.
	PostProcessing *PostProcessingStep `protobuf:"bytes,5,opt,name=post_processing,json=postProcessing,proto3,oneof"`
}

func (*CycleStep_InitializingReplication) isCycleStep_Step() {}

func (*CycleStep_Replicating) isCycleStep_Step() {}

func (*CycleStep_PostProcessing) isCycleStep_Step() {}

// InitializingReplicationStep contains specific step details.
type InitializingReplicationStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InitializingReplicationStep) Reset() {
	*x = InitializingReplicationStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializingReplicationStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializingReplicationStep) ProtoMessage() {}

func (x *InitializingReplicationStep) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializingReplicationStep.ProtoReflect.Descriptor instead.
func (*InitializingReplicationStep) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{2}
}

// ReplicatingStep contains specific step details.
type ReplicatingStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total bytes to be handled in the step.
	TotalBytes int64 `protobuf:"varint,1,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	// Replicated bytes in the step.
	ReplicatedBytes int64 `protobuf:"varint,2,opt,name=replicated_bytes,json=replicatedBytes,proto3" json:"replicated_bytes,omitempty"`
	// The source disks replication rate for the last 2 minutes in bytes per
	// second.
	LastTwoMinutesAverageBytesPerSecond int64 `protobuf:"varint,3,opt,name=last_two_minutes_average_bytes_per_second,json=lastTwoMinutesAverageBytesPerSecond,proto3" json:"last_two_minutes_average_bytes_per_second,omitempty"`
	// The source disks replication rate for the last 30 minutes in bytes per
	// second.
	LastThirtyMinutesAverageBytesPerSecond int64 `protobuf:"varint,4,opt,name=last_thirty_minutes_average_bytes_per_second,json=lastThirtyMinutesAverageBytesPerSecond,proto3" json:"last_thirty_minutes_average_bytes_per_second,omitempty"`
}

func (x *ReplicatingStep) Reset() {
	*x = ReplicatingStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicatingStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicatingStep) ProtoMessage() {}

func (x *ReplicatingStep) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicatingStep.ProtoReflect.Descriptor instead.
func (*ReplicatingStep) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{3}
}

func (x *ReplicatingStep) GetTotalBytes() int64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *ReplicatingStep) GetReplicatedBytes() int64 {
	if x != nil {
		return x.ReplicatedBytes
	}
	return 0
}

func (x *ReplicatingStep) GetLastTwoMinutesAverageBytesPerSecond() int64 {
	if x != nil {
		return x.LastTwoMinutesAverageBytesPerSecond
	}
	return 0
}

func (x *ReplicatingStep) GetLastThirtyMinutesAverageBytesPerSecond() int64 {
	if x != nil {
		return x.LastThirtyMinutesAverageBytesPerSecond
	}
	return 0
}

// PostProcessingStep contains specific step details.
type PostProcessingStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PostProcessingStep) Reset() {
	*x = PostProcessingStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostProcessingStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostProcessingStep) ProtoMessage() {}

func (x *PostProcessingStep) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostProcessingStep.ProtoReflect.Descriptor instead.
func (*PostProcessingStep) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{4}
}

// ReplicationSync contain information about the last replica sync to the cloud.
type ReplicationSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The most updated snapshot created time in the source that finished
	// replication.
	LastSyncTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=last_sync_time,json=lastSyncTime,proto3" json:"last_sync_time,omitempty"`
}

func (x *ReplicationSync) Reset() {
	*x = ReplicationSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicationSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationSync) ProtoMessage() {}

func (x *ReplicationSync) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationSync.ProtoReflect.Descriptor instead.
func (*ReplicationSync) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{5}
}

func (x *ReplicationSync) GetLastSyncTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSyncTime
	}
	return nil
}

// MigratingVm describes the VM that will be migrated from a Source environment
// and its replication state.
type MigratingVm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The default configuration of the target VM that will be created in Google
	// Cloud as a result of the migration.
	//
	// Types that are assignable to TargetVmDefaults:
	//
	//	*MigratingVm_ComputeEngineTargetDefaults
	TargetVmDefaults isMigratingVm_TargetVmDefaults `protobuf_oneof:"target_vm_defaults"`
	// Details about the source VM.
	//
	// Types that are assignable to SourceVmDetails:
	//
	//	*MigratingVm_AwsSourceVmDetails
	SourceVmDetails isMigratingVm_SourceVmDetails `protobuf_oneof:"source_vm_details"`
	// Output only. The identifier of the MigratingVm.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The unique ID of the VM in the source.
	// The VM's name in vSphere can be changed, so this is not the VM's name but
	// rather its moRef id. This id is of the form vm-<num>.
	SourceVmId string `protobuf:"bytes,2,opt,name=source_vm_id,json=sourceVmId,proto3" json:"source_vm_id,omitempty"`
	// The display name attached to the MigratingVm by the user.
	DisplayName string `protobuf:"bytes,18,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The description attached to the migrating VM by the user.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The replication schedule policy.
	Policy *SchedulePolicy `protobuf:"bytes,8,opt,name=policy,proto3" json:"policy,omitempty"`
	// Output only. The time the migrating VM was created (this refers to this
	// resource and not to the time it was installed in the source).
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The last time the migrating VM resource was updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The most updated snapshot created time in the source that
	// finished replication.
	LastSync *ReplicationSync `protobuf:"bytes,11,opt,name=last_sync,json=lastSync,proto3" json:"last_sync,omitempty"`
	// Output only. State of the MigratingVm.
	State MigratingVm_State `protobuf:"varint,23,opt,name=state,proto3,enum=google.events.cloud.vmmigration.v1.MigratingVm_State" json:"state,omitempty"`
	// Output only. The last time the migrating VM state was updated.
	StateTime *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=state_time,json=stateTime,proto3" json:"state_time,omitempty"`
	// Output only. Details of the current running replication cycle.
	CurrentSyncInfo *ReplicationCycle `protobuf:"bytes,13,opt,name=current_sync_info,json=currentSyncInfo,proto3" json:"current_sync_info,omitempty"`
	// Output only. Details of the last replication cycle. This will be updated
	// whenever a replication cycle is finished and is not to be confused with
	// last_sync which is only updated on successful replication cycles.
	LastReplicationCycle *ReplicationCycle `protobuf:"bytes,32,opt,name=last_replication_cycle,json=lastReplicationCycle,proto3" json:"last_replication_cycle,omitempty"`
	// Output only. The group this migrating vm is included in, if any. The group
	// is represented by the full path of the appropriate
	// [Group][google.cloud.vmmigration.v1.Group] resource.
	Group string `protobuf:"bytes,15,opt,name=group,proto3" json:"group,omitempty"`
	// The labels of the migrating VM.
	Labels map[string]string `protobuf:"bytes,16,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only. The recent [clone jobs][google.cloud.vmmigration.v1.CloneJob]
	// performed on the migrating VM. This field holds the vm's last completed
	// clone job and the vm's running clone job, if one exists.
	// Note: To have this field populated you need to explicitly request it via
	// the "view" parameter of the Get/List request.
	RecentCloneJobs []*CloneJob `protobuf:"bytes,17,rep,name=recent_clone_jobs,json=recentCloneJobs,proto3" json:"recent_clone_jobs,omitempty"`
	// Output only. Provides details on the state of the Migrating VM in case of
	// an error in replication.
	Error *status.Status `protobuf:"bytes,19,opt,name=error,proto3" json:"error,omitempty"`
	// Output only. The recent cutover jobs performed on the migrating VM.
	// This field holds the vm's last completed cutover job and the vm's
	// running cutover job, if one exists.
	// Note: To have this field populated you need to explicitly request it via
	// the "view" parameter of the Get/List request.
	RecentCutoverJobs []*CutoverJob `protobuf:"bytes,20,rep,name=recent_cutover_jobs,json=recentCutoverJobs,proto3" json:"recent_cutover_jobs,omitempty"`
	// Output only. Provides details of future CutoverJobs of a MigratingVm.
	// Set to empty when cutover forecast is unavailable.
	CutoverForecast *CutoverForecast `protobuf:"bytes,33,opt,name=cutover_forecast,json=cutoverForecast,proto3" json:"cutover_forecast,omitempty"`
}

func (x *MigratingVm) Reset() {
	*x = MigratingVm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigratingVm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigratingVm) ProtoMessage() {}

func (x *MigratingVm) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigratingVm.ProtoReflect.Descriptor instead.
func (*MigratingVm) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{6}
}

func (m *MigratingVm) GetTargetVmDefaults() isMigratingVm_TargetVmDefaults {
	if m != nil {
		return m.TargetVmDefaults
	}
	return nil
}

func (x *MigratingVm) GetComputeEngineTargetDefaults() *ComputeEngineTargetDefaults {
	if x, ok := x.GetTargetVmDefaults().(*MigratingVm_ComputeEngineTargetDefaults); ok {
		return x.ComputeEngineTargetDefaults
	}
	return nil
}

func (m *MigratingVm) GetSourceVmDetails() isMigratingVm_SourceVmDetails {
	if m != nil {
		return m.SourceVmDetails
	}
	return nil
}

func (x *MigratingVm) GetAwsSourceVmDetails() *AwsSourceVmDetails {
	if x, ok := x.GetSourceVmDetails().(*MigratingVm_AwsSourceVmDetails); ok {
		return x.AwsSourceVmDetails
	}
	return nil
}

func (x *MigratingVm) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MigratingVm) GetSourceVmId() string {
	if x != nil {
		return x.SourceVmId
	}
	return ""
}

func (x *MigratingVm) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *MigratingVm) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MigratingVm) GetPolicy() *SchedulePolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *MigratingVm) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *MigratingVm) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *MigratingVm) GetLastSync() *ReplicationSync {
	if x != nil {
		return x.LastSync
	}
	return nil
}

func (x *MigratingVm) GetState() MigratingVm_State {
	if x != nil {
		return x.State
	}
	return MigratingVm_STATE_UNSPECIFIED
}

func (x *MigratingVm) GetStateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StateTime
	}
	return nil
}

func (x *MigratingVm) GetCurrentSyncInfo() *ReplicationCycle {
	if x != nil {
		return x.CurrentSyncInfo
	}
	return nil
}

func (x *MigratingVm) GetLastReplicationCycle() *ReplicationCycle {
	if x != nil {
		return x.LastReplicationCycle
	}
	return nil
}

func (x *MigratingVm) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *MigratingVm) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MigratingVm) GetRecentCloneJobs() []*CloneJob {
	if x != nil {
		return x.RecentCloneJobs
	}
	return nil
}

func (x *MigratingVm) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *MigratingVm) GetRecentCutoverJobs() []*CutoverJob {
	if x != nil {
		return x.RecentCutoverJobs
	}
	return nil
}

func (x *MigratingVm) GetCutoverForecast() *CutoverForecast {
	if x != nil {
		return x.CutoverForecast
	}
	return nil
}

type isMigratingVm_TargetVmDefaults interface {
	isMigratingVm_TargetVmDefaults()
}

type MigratingVm_ComputeEngineTargetDefaults struct {
	// Details of the target VM in Compute Engine.
	ComputeEngineTargetDefaults *ComputeEngineTargetDefaults `protobuf:"bytes,26,opt,name=compute_engine_target_defaults,json=computeEngineTargetDefaults,proto3,oneof"`
}

func (*MigratingVm_ComputeEngineTargetDefaults) isMigratingVm_TargetVmDefaults() {}

type isMigratingVm_SourceVmDetails interface {
	isMigratingVm_SourceVmDetails()
}

type MigratingVm_AwsSourceVmDetails struct {
	// Output only. Details of the VM from an AWS source.
	AwsSourceVmDetails *AwsSourceVmDetails `protobuf:"bytes,29,opt,name=aws_source_vm_details,json=awsSourceVmDetails,proto3,oneof"`
}

func (*MigratingVm_AwsSourceVmDetails) isMigratingVm_SourceVmDetails() {}

// CutoverForecast holds information about future CutoverJobs of a MigratingVm.
type CutoverForecast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Estimation of the CutoverJob duration.
	EstimatedCutoverJobDuration *durationpb.Duration `protobuf:"bytes,1,opt,name=estimated_cutover_job_duration,json=estimatedCutoverJobDuration,proto3" json:"estimated_cutover_job_duration,omitempty"`
}

func (x *CutoverForecast) Reset() {
	*x = CutoverForecast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CutoverForecast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CutoverForecast) ProtoMessage() {}

func (x *CutoverForecast) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CutoverForecast.ProtoReflect.Descriptor instead.
func (*CutoverForecast) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{7}
}

func (x *CutoverForecast) GetEstimatedCutoverJobDuration() *durationpb.Duration {
	if x != nil {
		return x.EstimatedCutoverJobDuration
	}
	return nil
}

// CloneJob describes the process of creating a clone of a
// [MigratingVM][google.cloud.vmmigration.v1.MigratingVm] to the
// requested target based on the latest successful uploaded snapshots.
// While the migration cycles of a MigratingVm take place, it is possible to
// verify the uploaded VM can be started in the cloud, by creating a clone. The
// clone can be created without any downtime, and it is created using the latest
// snapshots which are already in the cloud. The cloneJob is only responsible
// for its work, not its products, which means once it is finished, it will
// never touch the instance it created. It will only delete it in case of the
// CloneJob being cancelled or upon failure to clone.
type CloneJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Details of the VM to create as the target of this clone job.
	//
	// Types that are assignable to TargetVmDetails:
	//
	//	*CloneJob_ComputeEngineTargetDetails
	TargetVmDetails isCloneJob_TargetVmDetails `protobuf_oneof:"target_vm_details"`
	// Output only. The time the clone job was created (as an API call, not when
	// it was actually created in the target).
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time the clone job was ended.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Output only. The name of the clone.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. State of the clone job.
	State CloneJob_State `protobuf:"varint,12,opt,name=state,proto3,enum=google.events.cloud.vmmigration.v1.CloneJob_State" json:"state,omitempty"`
	// Output only. The time the state was last updated.
	StateTime *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=state_time,json=stateTime,proto3" json:"state_time,omitempty"`
	// Output only. Provides details for the errors that led to the Clone Job's
	// state.
	Error *status.Status `protobuf:"bytes,17,opt,name=error,proto3" json:"error,omitempty"`
	// Output only. The clone steps list representing its progress.
	Steps []*CloneStep `protobuf:"bytes,23,rep,name=steps,proto3" json:"steps,omitempty"`
}

func (x *CloneJob) Reset() {
	*x = CloneJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneJob) ProtoMessage() {}

func (x *CloneJob) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneJob.ProtoReflect.Descriptor instead.
func (*CloneJob) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{8}
}

func (m *CloneJob) GetTargetVmDetails() isCloneJob_TargetVmDetails {
	if m != nil {
		return m.TargetVmDetails
	}
	return nil
}

func (x *CloneJob) GetComputeEngineTargetDetails() *ComputeEngineTargetDetails {
	if x, ok := x.GetTargetVmDetails().(*CloneJob_ComputeEngineTargetDetails); ok {
		return x.ComputeEngineTargetDetails
	}
	return nil
}

func (x *CloneJob) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *CloneJob) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *CloneJob) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloneJob) GetState() CloneJob_State {
	if x != nil {
		return x.State
	}
	return CloneJob_STATE_UNSPECIFIED
}

func (x *CloneJob) GetStateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StateTime
	}
	return nil
}

func (x *CloneJob) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CloneJob) GetSteps() []*CloneStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

type isCloneJob_TargetVmDetails interface {
	isCloneJob_TargetVmDetails()
}

type CloneJob_ComputeEngineTargetDetails struct {
	// Output only. Details of the target VM in Compute Engine.
	ComputeEngineTargetDetails *ComputeEngineTargetDetails `protobuf:"bytes,20,opt,name=compute_engine_target_details,json=computeEngineTargetDetails,proto3,oneof"`
}

func (*CloneJob_ComputeEngineTargetDetails) isCloneJob_TargetVmDetails() {}

// CloneStep holds information about the clone step progress.
type CloneStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Step:
	//
	//	*CloneStep_AdaptingOs
	//	*CloneStep_PreparingVmDisks
	//	*CloneStep_InstantiatingMigratedVm
	Step isCloneStep_Step `protobuf_oneof:"step"`
	// The time the step has started.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The time the step has ended.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *CloneStep) Reset() {
	*x = CloneStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneStep) ProtoMessage() {}

func (x *CloneStep) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneStep.ProtoReflect.Descriptor instead.
func (*CloneStep) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{9}
}

func (m *CloneStep) GetStep() isCloneStep_Step {
	if m != nil {
		return m.Step
	}
	return nil
}

func (x *CloneStep) GetAdaptingOs() *AdaptingOSStep {
	if x, ok := x.GetStep().(*CloneStep_AdaptingOs); ok {
		return x.AdaptingOs
	}
	return nil
}

func (x *CloneStep) GetPreparingVmDisks() *PreparingVMDisksStep {
	if x, ok := x.GetStep().(*CloneStep_PreparingVmDisks); ok {
		return x.PreparingVmDisks
	}
	return nil
}

func (x *CloneStep) GetInstantiatingMigratedVm() *InstantiatingMigratedVMStep {
	if x, ok := x.GetStep().(*CloneStep_InstantiatingMigratedVm); ok {
		return x.InstantiatingMigratedVm
	}
	return nil
}

func (x *CloneStep) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *CloneStep) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type isCloneStep_Step interface {
	isCloneStep_Step()
}

type CloneStep_AdaptingOs struct {
	// Adapting OS step.
	AdaptingOs *AdaptingOSStep `protobuf:"bytes,3,opt,name=adapting_os,json=adaptingOs,proto3,oneof"`
}

type CloneStep_PreparingVmDisks struct {
	// Preparing VM disks step.
	PreparingVmDisks *PreparingVMDisksStep `protobuf:"bytes,4,opt,name=preparing_vm_disks,json=preparingVmDisks,proto3,oneof"`
}

type CloneStep_InstantiatingMigratedVm struct {
	// Instantiating migrated VM step.
	InstantiatingMigratedVm *InstantiatingMigratedVMStep `protobuf:"bytes,5,opt,name=instantiating_migrated_vm,json=instantiatingMigratedVm,proto3,oneof"`
}

func (*CloneStep_AdaptingOs) isCloneStep_Step() {}

func (*CloneStep_PreparingVmDisks) isCloneStep_Step() {}

func (*CloneStep_InstantiatingMigratedVm) isCloneStep_Step() {}

// AdaptingOSStep contains specific step details.
type AdaptingOSStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AdaptingOSStep) Reset() {
	*x = AdaptingOSStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdaptingOSStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdaptingOSStep) ProtoMessage() {}

func (x *AdaptingOSStep) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdaptingOSStep.ProtoReflect.Descriptor instead.
func (*AdaptingOSStep) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{10}
}

// PreparingVMDisksStep contains specific step details.
type PreparingVMDisksStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PreparingVMDisksStep) Reset() {
	*x = PreparingVMDisksStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreparingVMDisksStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreparingVMDisksStep) ProtoMessage() {}

func (x *PreparingVMDisksStep) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreparingVMDisksStep.ProtoReflect.Descriptor instead.
func (*PreparingVMDisksStep) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{11}
}

// InstantiatingMigratedVMStep contains specific step details.
type InstantiatingMigratedVMStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InstantiatingMigratedVMStep) Reset() {
	*x = InstantiatingMigratedVMStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstantiatingMigratedVMStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstantiatingMigratedVMStep) ProtoMessage() {}

func (x *InstantiatingMigratedVMStep) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstantiatingMigratedVMStep.ProtoReflect.Descriptor instead.
func (*InstantiatingMigratedVMStep) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{12}
}

// CutoverJob message describes a cutover of a migrating VM. The CutoverJob is
// the operation of shutting down the VM, creating a snapshot and
// clonning the VM using the replicated snapshot.
type CutoverJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Details of the VM to create as the target of this cutover job.
	//
	// Types that are assignable to TargetVmDetails:
	//
	//	*CutoverJob_ComputeEngineTargetDetails
	TargetVmDetails isCutoverJob_TargetVmDetails `protobuf_oneof:"target_vm_details"`
	// Output only. The time the cutover job was created (as an API call, not when
	// it was actually created in the target).
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time the cutover job had finished.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Output only. The name of the cutover job.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. State of the cutover job.
	State CutoverJob_State `protobuf:"varint,5,opt,name=state,proto3,enum=google.events.cloud.vmmigration.v1.CutoverJob_State" json:"state,omitempty"`
	// Output only. The time the state was last updated.
	StateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=state_time,json=stateTime,proto3" json:"state_time,omitempty"`
	// Output only. The current progress in percentage of the cutover job.
	ProgressPercent int32 `protobuf:"varint,13,opt,name=progress_percent,json=progressPercent,proto3" json:"progress_percent,omitempty"`
	// Output only. Provides details for the errors that led to the Cutover Job's
	// state.
	Error *status.Status `protobuf:"bytes,9,opt,name=error,proto3" json:"error,omitempty"`
	// Output only. A message providing possible extra details about the current
	// state.
	StateMessage string `protobuf:"bytes,10,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
	// Output only. The cutover steps list representing its progress.
	Steps []*CutoverStep `protobuf:"bytes,17,rep,name=steps,proto3" json:"steps,omitempty"`
}

func (x *CutoverJob) Reset() {
	*x = CutoverJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CutoverJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CutoverJob) ProtoMessage() {}

func (x *CutoverJob) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CutoverJob.ProtoReflect.Descriptor instead.
func (*CutoverJob) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{13}
}

func (m *CutoverJob) GetTargetVmDetails() isCutoverJob_TargetVmDetails {
	if m != nil {
		return m.TargetVmDetails
	}
	return nil
}

func (x *CutoverJob) GetComputeEngineTargetDetails() *ComputeEngineTargetDetails {
	if x, ok := x.GetTargetVmDetails().(*CutoverJob_ComputeEngineTargetDetails); ok {
		return x.ComputeEngineTargetDetails
	}
	return nil
}

func (x *CutoverJob) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *CutoverJob) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *CutoverJob) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CutoverJob) GetState() CutoverJob_State {
	if x != nil {
		return x.State
	}
	return CutoverJob_STATE_UNSPECIFIED
}

func (x *CutoverJob) GetStateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StateTime
	}
	return nil
}

func (x *CutoverJob) GetProgressPercent() int32 {
	if x != nil {
		return x.ProgressPercent
	}
	return 0
}

func (x *CutoverJob) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CutoverJob) GetStateMessage() string {
	if x != nil {
		return x.StateMessage
	}
	return ""
}

func (x *CutoverJob) GetSteps() []*CutoverStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

type isCutoverJob_TargetVmDetails interface {
	isCutoverJob_TargetVmDetails()
}

type CutoverJob_ComputeEngineTargetDetails struct {
	// Output only. Details of the target VM in Compute Engine.
	ComputeEngineTargetDetails *ComputeEngineTargetDetails `protobuf:"bytes,14,opt,name=compute_engine_target_details,json=computeEngineTargetDetails,proto3,oneof"`
}

func (*CutoverJob_ComputeEngineTargetDetails) isCutoverJob_TargetVmDetails() {}

// CutoverStep holds information about the cutover step progress.
type CutoverStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Step:
	//
	//	*CutoverStep_PreviousReplicationCycle
	//	*CutoverStep_ShuttingDownSourceVm
	//	*CutoverStep_FinalSync
	//	*CutoverStep_PreparingVmDisks
	//	*CutoverStep_InstantiatingMigratedVm
	Step isCutoverStep_Step `protobuf_oneof:"step"`
	// The time the step has started.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The time the step has ended.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *CutoverStep) Reset() {
	*x = CutoverStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CutoverStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CutoverStep) ProtoMessage() {}

func (x *CutoverStep) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CutoverStep.ProtoReflect.Descriptor instead.
func (*CutoverStep) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{14}
}

func (m *CutoverStep) GetStep() isCutoverStep_Step {
	if m != nil {
		return m.Step
	}
	return nil
}

func (x *CutoverStep) GetPreviousReplicationCycle() *ReplicationCycle {
	if x, ok := x.GetStep().(*CutoverStep_PreviousReplicationCycle); ok {
		return x.PreviousReplicationCycle
	}
	return nil
}

func (x *CutoverStep) GetShuttingDownSourceVm() *ShuttingDownSourceVMStep {
	if x, ok := x.GetStep().(*CutoverStep_ShuttingDownSourceVm); ok {
		return x.ShuttingDownSourceVm
	}
	return nil
}

func (x *CutoverStep) GetFinalSync() *ReplicationCycle {
	if x, ok := x.GetStep().(*CutoverStep_FinalSync); ok {
		return x.FinalSync
	}
	return nil
}

func (x *CutoverStep) GetPreparingVmDisks() *PreparingVMDisksStep {
	if x, ok := x.GetStep().(*CutoverStep_PreparingVmDisks); ok {
		return x.PreparingVmDisks
	}
	return nil
}

func (x *CutoverStep) GetInstantiatingMigratedVm() *InstantiatingMigratedVMStep {
	if x, ok := x.GetStep().(*CutoverStep_InstantiatingMigratedVm); ok {
		return x.InstantiatingMigratedVm
	}
	return nil
}

func (x *CutoverStep) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *CutoverStep) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type isCutoverStep_Step interface {
	isCutoverStep_Step()
}

type CutoverStep_PreviousReplicationCycle struct {
	// A replication cycle prior cutover step.
	PreviousReplicationCycle *ReplicationCycle `protobuf:"bytes,3,opt,name=previous_replication_cycle,json=previousReplicationCycle,proto3,oneof"`
}

type CutoverStep_ShuttingDownSourceVm struct {
	// Shutting down VM step.
	ShuttingDownSourceVm *ShuttingDownSourceVMStep `protobuf:"bytes,4,opt,name=shutting_down_source_vm,json=shuttingDownSourceVm,proto3,oneof"`
}

type CutoverStep_FinalSync struct {
	// Final sync step.
	FinalSync *ReplicationCycle `protobuf:"bytes,5,opt,name=final_sync,json=finalSync,proto3,oneof"`
}

type CutoverStep_PreparingVmDisks struct {
	// Preparing VM disks step.
	PreparingVmDisks *PreparingVMDisksStep `protobuf:"bytes,6,opt,name=preparing_vm_disks,json=preparingVmDisks,proto3,oneof"`
}

type CutoverStep_InstantiatingMigratedVm struct {
	// Instantiating migrated VM step.
	InstantiatingMigratedVm *InstantiatingMigratedVMStep `protobuf:"bytes,7,opt,name=instantiating_migrated_vm,json=instantiatingMigratedVm,proto3,oneof"`
}

func (*CutoverStep_PreviousReplicationCycle) isCutoverStep_Step() {}

func (*CutoverStep_ShuttingDownSourceVm) isCutoverStep_Step() {}

func (*CutoverStep_FinalSync) isCutoverStep_Step() {}

func (*CutoverStep_PreparingVmDisks) isCutoverStep_Step() {}

func (*CutoverStep_InstantiatingMigratedVm) isCutoverStep_Step() {}

// ShuttingDownSourceVMStep contains specific step details.
type ShuttingDownSourceVMStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShuttingDownSourceVMStep) Reset() {
	*x = ShuttingDownSourceVMStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShuttingDownSourceVMStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShuttingDownSourceVMStep) ProtoMessage() {}

func (x *ShuttingDownSourceVMStep) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShuttingDownSourceVMStep.ProtoReflect.Descriptor instead.
func (*ShuttingDownSourceVMStep) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{15}
}

// Source message describes a specific vm migration Source resource. It contains
// the source environment information.
type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SourceDetails:
	//
	//	*Source_Vmware
	//	*Source_Aws
	SourceDetails isSource_SourceDetails `protobuf_oneof:"source_details"`
	// Output only. The Source name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The create time timestamp.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The update time timestamp.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// The labels of the source.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// User-provided description of the source.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{16}
}

func (m *Source) GetSourceDetails() isSource_SourceDetails {
	if m != nil {
		return m.SourceDetails
	}
	return nil
}

func (x *Source) GetVmware() *VmwareSourceDetails {
	if x, ok := x.GetSourceDetails().(*Source_Vmware); ok {
		return x.Vmware
	}
	return nil
}

func (x *Source) GetAws() *AwsSourceDetails {
	if x, ok := x.GetSourceDetails().(*Source_Aws); ok {
		return x.Aws
	}
	return nil
}

func (x *Source) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Source) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Source) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Source) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Source) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type isSource_SourceDetails interface {
	isSource_SourceDetails()
}

type Source_Vmware struct {
	// Vmware type source details.
	Vmware *VmwareSourceDetails `protobuf:"bytes,10,opt,name=vmware,proto3,oneof"`
}

type Source_Aws struct {
	// AWS type source details.
	Aws *AwsSourceDetails `protobuf:"bytes,12,opt,name=aws,proto3,oneof"`
}

func (*Source_Vmware) isSource_SourceDetails() {}

func (*Source_Aws) isSource_SourceDetails() {}

// VmwareSourceDetails message describes a specific source details for the
// vmware source type.
type VmwareSourceDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The credentials username.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// The ip address of the vcenter this Source represents.
	VcenterIp string `protobuf:"bytes,3,opt,name=vcenter_ip,json=vcenterIp,proto3" json:"vcenter_ip,omitempty"`
	// The thumbprint representing the certificate for the vcenter.
	Thumbprint string `protobuf:"bytes,4,opt,name=thumbprint,proto3" json:"thumbprint,omitempty"`
	// The hostname of the vcenter.
	ResolvedVcenterHost string `protobuf:"bytes,5,opt,name=resolved_vcenter_host,json=resolvedVcenterHost,proto3" json:"resolved_vcenter_host,omitempty"`
}

func (x *VmwareSourceDetails) Reset() {
	*x = VmwareSourceDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VmwareSourceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VmwareSourceDetails) ProtoMessage() {}

func (x *VmwareSourceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VmwareSourceDetails.ProtoReflect.Descriptor instead.
func (*VmwareSourceDetails) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{17}
}

func (x *VmwareSourceDetails) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *VmwareSourceDetails) GetVcenterIp() string {
	if x != nil {
		return x.VcenterIp
	}
	return ""
}

func (x *VmwareSourceDetails) GetThumbprint() string {
	if x != nil {
		return x.Thumbprint
	}
	return ""
}

func (x *VmwareSourceDetails) GetResolvedVcenterHost() string {
	if x != nil {
		return x.ResolvedVcenterHost
	}
	return ""
}

// AwsSourceDetails message describes a specific source details for the
// AWS source type.
type AwsSourceDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CredentialsType:
	//
	//	*AwsSourceDetails_AccessKeyCreds
	CredentialsType isAwsSourceDetails_CredentialsType `protobuf_oneof:"credentials_type"`
	// Immutable. The AWS region that the source VMs will be migrated from.
	AwsRegion string `protobuf:"bytes,3,opt,name=aws_region,json=awsRegion,proto3" json:"aws_region,omitempty"`
	// Output only. State of the source as determined by the health check.
	State AwsSourceDetails_State `protobuf:"varint,4,opt,name=state,proto3,enum=google.events.cloud.vmmigration.v1.AwsSourceDetails_State" json:"state,omitempty"`
	// Output only. Provides details on the state of the Source in case of an
	// error.
	Error *status.Status `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	// AWS resource tags to limit the scope of the source inventory.
	InventoryTagList []*AwsSourceDetails_Tag `protobuf:"bytes,10,rep,name=inventory_tag_list,json=inventoryTagList,proto3" json:"inventory_tag_list,omitempty"`
	// AWS security group names to limit the scope of the source
	// inventory.
	InventorySecurityGroupNames []string `protobuf:"bytes,7,rep,name=inventory_security_group_names,json=inventorySecurityGroupNames,proto3" json:"inventory_security_group_names,omitempty"`
	// User specified tags to add to every M2VM generated resource in AWS.
	// These tags will be set in addition to the default tags that are set as part
	// of the migration process. The tags must not begin with the reserved prefix
	// `m2vm`.
	MigrationResourcesUserTags map[string]string `protobuf:"bytes,8,rep,name=migration_resources_user_tags,json=migrationResourcesUserTags,proto3" json:"migration_resources_user_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only. The source's public IP. All communication initiated by this
	// source will originate from this IP.
	PublicIp string `protobuf:"bytes,9,opt,name=public_ip,json=publicIp,proto3" json:"public_ip,omitempty"`
}

func (x *AwsSourceDetails) Reset() {
	*x = AwsSourceDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsSourceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsSourceDetails) ProtoMessage() {}

func (x *AwsSourceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsSourceDetails.ProtoReflect.Descriptor instead.
func (*AwsSourceDetails) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{18}
}

func (m *AwsSourceDetails) GetCredentialsType() isAwsSourceDetails_CredentialsType {
	if m != nil {
		return m.CredentialsType
	}
	return nil
}

func (x *AwsSourceDetails) GetAccessKeyCreds() *AwsSourceDetails_AccessKeyCredentials {
	if x, ok := x.GetCredentialsType().(*AwsSourceDetails_AccessKeyCreds); ok {
		return x.AccessKeyCreds
	}
	return nil
}

func (x *AwsSourceDetails) GetAwsRegion() string {
	if x != nil {
		return x.AwsRegion
	}
	return ""
}

func (x *AwsSourceDetails) GetState() AwsSourceDetails_State {
	if x != nil {
		return x.State
	}
	return AwsSourceDetails_STATE_UNSPECIFIED
}

func (x *AwsSourceDetails) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *AwsSourceDetails) GetInventoryTagList() []*AwsSourceDetails_Tag {
	if x != nil {
		return x.InventoryTagList
	}
	return nil
}

func (x *AwsSourceDetails) GetInventorySecurityGroupNames() []string {
	if x != nil {
		return x.InventorySecurityGroupNames
	}
	return nil
}

func (x *AwsSourceDetails) GetMigrationResourcesUserTags() map[string]string {
	if x != nil {
		return x.MigrationResourcesUserTags
	}
	return nil
}

func (x *AwsSourceDetails) GetPublicIp() string {
	if x != nil {
		return x.PublicIp
	}
	return ""
}

type isAwsSourceDetails_CredentialsType interface {
	isAwsSourceDetails_CredentialsType()
}

type AwsSourceDetails_AccessKeyCreds struct {
	// AWS Credentials using access key id and secret.
	AccessKeyCreds *AwsSourceDetails_AccessKeyCredentials `protobuf:"bytes,11,opt,name=access_key_creds,json=accessKeyCreds,proto3,oneof"`
}

func (*AwsSourceDetails_AccessKeyCreds) isAwsSourceDetails_CredentialsType() {}

// DatacenterConnector message describes a connector between the Source and
// Google Cloud, which is installed on a vmware datacenter (an OVA vm installed
// by the user) to connect the Datacenter to Google Cloud and support vm
// migration data transfer.
type DatacenterConnector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The time the connector was created (as an API call, not when
	// it was actually installed).
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The last time the connector was updated with an API call.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The connector's name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Immutable. A unique key for this connector. This key is internal to the OVA
	// connector and is supplied with its creation during the registration process
	// and can not be modified.
	RegistrationId string `protobuf:"bytes,12,opt,name=registration_id,json=registrationId,proto3" json:"registration_id,omitempty"`
	// The service account to use in the connector when communicating with the
	// cloud.
	ServiceAccount string `protobuf:"bytes,5,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// The version running in the DatacenterConnector. This is supplied by the OVA
	// connector during the registration process and can not be modified.
	Version string `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	// Output only. The communication channel between the datacenter connector and
	// Google Cloud.
	Bucket string `protobuf:"bytes,10,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// Output only. State of the DatacenterConnector, as determined by the health
	// checks.
	State DatacenterConnector_State `protobuf:"varint,7,opt,name=state,proto3,enum=google.events.cloud.vmmigration.v1.DatacenterConnector_State" json:"state,omitempty"`
	// Output only. The time the state was last set.
	StateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=state_time,json=stateTime,proto3" json:"state_time,omitempty"`
	// Output only. Provides details on the state of the Datacenter Connector in
	// case of an error.
	Error *status.Status `protobuf:"bytes,11,opt,name=error,proto3" json:"error,omitempty"`
	// Output only. Appliance OVA version.
	// This is the OVA which is manually installed by the user and contains the
	// infrastructure for the automatically updatable components on the appliance.
	ApplianceInfrastructureVersion string `protobuf:"bytes,13,opt,name=appliance_infrastructure_version,json=applianceInfrastructureVersion,proto3" json:"appliance_infrastructure_version,omitempty"`
	// Output only. Appliance last installed update bundle version.
	// This is the version of the automatically updatable components on the
	// appliance.
	ApplianceSoftwareVersion string `protobuf:"bytes,14,opt,name=appliance_software_version,json=applianceSoftwareVersion,proto3" json:"appliance_software_version,omitempty"`
	// Output only. The available versions for updating this appliance.
	AvailableVersions *AvailableUpdates `protobuf:"bytes,15,opt,name=available_versions,json=availableVersions,proto3" json:"available_versions,omitempty"`
	// Output only. The status of the current / last upgradeAppliance operation.
	UpgradeStatus *UpgradeStatus `protobuf:"bytes,16,opt,name=upgrade_status,json=upgradeStatus,proto3" json:"upgrade_status,omitempty"`
}

func (x *DatacenterConnector) Reset() {
	*x = DatacenterConnector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatacenterConnector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatacenterConnector) ProtoMessage() {}

func (x *DatacenterConnector) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatacenterConnector.ProtoReflect.Descriptor instead.
func (*DatacenterConnector) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{19}
}

func (x *DatacenterConnector) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *DatacenterConnector) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *DatacenterConnector) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatacenterConnector) GetRegistrationId() string {
	if x != nil {
		return x.RegistrationId
	}
	return ""
}

func (x *DatacenterConnector) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *DatacenterConnector) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DatacenterConnector) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *DatacenterConnector) GetState() DatacenterConnector_State {
	if x != nil {
		return x.State
	}
	return DatacenterConnector_STATE_UNSPECIFIED
}

func (x *DatacenterConnector) GetStateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StateTime
	}
	return nil
}

func (x *DatacenterConnector) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DatacenterConnector) GetApplianceInfrastructureVersion() string {
	if x != nil {
		return x.ApplianceInfrastructureVersion
	}
	return ""
}

func (x *DatacenterConnector) GetApplianceSoftwareVersion() string {
	if x != nil {
		return x.ApplianceSoftwareVersion
	}
	return ""
}

func (x *DatacenterConnector) GetAvailableVersions() *AvailableUpdates {
	if x != nil {
		return x.AvailableVersions
	}
	return nil
}

func (x *DatacenterConnector) GetUpgradeStatus() *UpgradeStatus {
	if x != nil {
		return x.UpgradeStatus
	}
	return nil
}

// UpgradeStatus contains information about upgradeAppliance operation.
type UpgradeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version to upgrade to.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// The state of the upgradeAppliance operation.
	State UpgradeStatus_State `protobuf:"varint,2,opt,name=state,proto3,enum=google.events.cloud.vmmigration.v1.UpgradeStatus_State" json:"state,omitempty"`
	// Provides details on the state of the upgrade operation in case of an error.
	Error *status.Status `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	// The time the operation was started.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The version from which we upgraded.
	PreviousVersion string `protobuf:"bytes,5,opt,name=previous_version,json=previousVersion,proto3" json:"previous_version,omitempty"`
}

func (x *UpgradeStatus) Reset() {
	*x = UpgradeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeStatus) ProtoMessage() {}

func (x *UpgradeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeStatus.ProtoReflect.Descriptor instead.
func (*UpgradeStatus) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{20}
}

func (x *UpgradeStatus) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UpgradeStatus) GetState() UpgradeStatus_State {
	if x != nil {
		return x.State
	}
	return UpgradeStatus_STATE_UNSPECIFIED
}

func (x *UpgradeStatus) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *UpgradeStatus) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *UpgradeStatus) GetPreviousVersion() string {
	if x != nil {
		return x.PreviousVersion
	}
	return ""
}

// Holds informatiom about the available versions for upgrade.
type AvailableUpdates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The newest deployable version of the appliance.
	// The current appliance can't be updated into this version, and the owner
	// must manually deploy this OVA to a new appliance.
	NewDeployableAppliance *ApplianceVersion `protobuf:"bytes,1,opt,name=new_deployable_appliance,json=newDeployableAppliance,proto3" json:"new_deployable_appliance,omitempty"`
	// The latest version for in place update.
	// The current appliance can be updated to this version using the API or m4c
	// CLI.
	InPlaceUpdate *ApplianceVersion `protobuf:"bytes,2,opt,name=in_place_update,json=inPlaceUpdate,proto3" json:"in_place_update,omitempty"`
}

func (x *AvailableUpdates) Reset() {
	*x = AvailableUpdates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableUpdates) ProtoMessage() {}

func (x *AvailableUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableUpdates.ProtoReflect.Descriptor instead.
func (*AvailableUpdates) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{21}
}

func (x *AvailableUpdates) GetNewDeployableAppliance() *ApplianceVersion {
	if x != nil {
		return x.NewDeployableAppliance
	}
	return nil
}

func (x *AvailableUpdates) GetInPlaceUpdate() *ApplianceVersion {
	if x != nil {
		return x.InPlaceUpdate
	}
	return nil
}

// Describes an appliance version.
type ApplianceVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The appliance version.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// A link for downloading the version.
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// Determine whether it's critical to upgrade the appliance to this version.
	Critical bool `protobuf:"varint,3,opt,name=critical,proto3" json:"critical,omitempty"`
	// Link to a page that contains the version release notes.
	ReleaseNotesUri string `protobuf:"bytes,4,opt,name=release_notes_uri,json=releaseNotesUri,proto3" json:"release_notes_uri,omitempty"`
}

func (x *ApplianceVersion) Reset() {
	*x = ApplianceVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplianceVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplianceVersion) ProtoMessage() {}

func (x *ApplianceVersion) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplianceVersion.ProtoReflect.Descriptor instead.
func (*ApplianceVersion) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{22}
}

func (x *ApplianceVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ApplianceVersion) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *ApplianceVersion) GetCritical() bool {
	if x != nil {
		return x.Critical
	}
	return false
}

func (x *ApplianceVersion) GetReleaseNotesUri() string {
	if x != nil {
		return x.ReleaseNotesUri
	}
	return ""
}

// VmwareVmDetails describes a VM in vCenter.
type VmwareVmDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The VM's id in the source (note that this is not the MigratingVm's id).
	// This is the moref id of the VM.
	VmId string `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	// The id of the vCenter's datacenter this VM is contained in.
	DatacenterId string `protobuf:"bytes,2,opt,name=datacenter_id,json=datacenterId,proto3" json:"datacenter_id,omitempty"`
	// The descriptive name of the vCenter's datacenter this VM is contained in.
	DatacenterDescription string `protobuf:"bytes,3,opt,name=datacenter_description,json=datacenterDescription,proto3" json:"datacenter_description,omitempty"`
	// The unique identifier of the VM in vCenter.
	Uuid string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The display name of the VM. Note that this is not necessarily unique.
	DisplayName string `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The power state of the VM at the moment list was taken.
	PowerState VmwareVmDetails_PowerState `protobuf:"varint,6,opt,name=power_state,json=powerState,proto3,enum=google.events.cloud.vmmigration.v1.VmwareVmDetails_PowerState" json:"power_state,omitempty"`
	// The number of cpus in the VM.
	CpuCount int32 `protobuf:"varint,7,opt,name=cpu_count,json=cpuCount,proto3" json:"cpu_count,omitempty"`
	// The size of the memory of the VM in MB.
	MemoryMb int32 `protobuf:"varint,8,opt,name=memory_mb,json=memoryMb,proto3" json:"memory_mb,omitempty"`
	// The number of disks the VM has.
	DiskCount int32 `protobuf:"varint,9,opt,name=disk_count,json=diskCount,proto3" json:"disk_count,omitempty"`
	// The total size of the storage allocated to the VM in MB.
	CommittedStorageMb int64 `protobuf:"varint,12,opt,name=committed_storage_mb,json=committedStorageMb,proto3" json:"committed_storage_mb,omitempty"`
	// The VM's OS. See for example
	// https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html
	// for types of strings this might hold.
	GuestDescription string `protobuf:"bytes,11,opt,name=guest_description,json=guestDescription,proto3" json:"guest_description,omitempty"`
	// Output only. The VM Boot Option.
	BootOption VmwareVmDetails_BootOption `protobuf:"varint,13,opt,name=boot_option,json=bootOption,proto3,enum=google.events.cloud.vmmigration.v1.VmwareVmDetails_BootOption" json:"boot_option,omitempty"`
}

func (x *VmwareVmDetails) Reset() {
	*x = VmwareVmDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VmwareVmDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VmwareVmDetails) ProtoMessage() {}

func (x *VmwareVmDetails) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VmwareVmDetails.ProtoReflect.Descriptor instead.
func (*VmwareVmDetails) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{23}
}

func (x *VmwareVmDetails) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *VmwareVmDetails) GetDatacenterId() string {
	if x != nil {
		return x.DatacenterId
	}
	return ""
}

func (x *VmwareVmDetails) GetDatacenterDescription() string {
	if x != nil {
		return x.DatacenterDescription
	}
	return ""
}

func (x *VmwareVmDetails) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *VmwareVmDetails) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *VmwareVmDetails) GetPowerState() VmwareVmDetails_PowerState {
	if x != nil {
		return x.PowerState
	}
	return VmwareVmDetails_POWER_STATE_UNSPECIFIED
}

func (x *VmwareVmDetails) GetCpuCount() int32 {
	if x != nil {
		return x.CpuCount
	}
	return 0
}

func (x *VmwareVmDetails) GetMemoryMb() int32 {
	if x != nil {
		return x.MemoryMb
	}
	return 0
}

func (x *VmwareVmDetails) GetDiskCount() int32 {
	if x != nil {
		return x.DiskCount
	}
	return 0
}

func (x *VmwareVmDetails) GetCommittedStorageMb() int64 {
	if x != nil {
		return x.CommittedStorageMb
	}
	return 0
}

func (x *VmwareVmDetails) GetGuestDescription() string {
	if x != nil {
		return x.GuestDescription
	}
	return ""
}

func (x *VmwareVmDetails) GetBootOption() VmwareVmDetails_BootOption {
	if x != nil {
		return x.BootOption
	}
	return VmwareVmDetails_BOOT_OPTION_UNSPECIFIED
}

// Utilization report details the utilization (CPU, memory, etc.) of selected
// source VMs.
type UtilizationReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The report unique name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The report display name, as assigned by the user.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output only. Current state of the report.
	State UtilizationReport_State `protobuf:"varint,3,opt,name=state,proto3,enum=google.events.cloud.vmmigration.v1.UtilizationReport_State" json:"state,omitempty"`
	// Output only. The time the state was last set.
	StateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=state_time,json=stateTime,proto3" json:"state_time,omitempty"`
	// Output only. Provides details on the state of the report in case of an
	// error.
	Error *status.Status `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	// Output only. The time the report was created (this refers to the time of
	// the request, not the time the report creation completed).
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Time frame of the report.
	TimeFrame UtilizationReport_TimeFrame `protobuf:"varint,7,opt,name=time_frame,json=timeFrame,proto3,enum=google.events.cloud.vmmigration.v1.UtilizationReport_TimeFrame" json:"time_frame,omitempty"`
	// Output only. The point in time when the time frame ends. Notice that the
	// time frame is counted backwards. For instance if the "frame_end_time" value
	// is 2021/01/20 and the time frame is WEEK then the report covers the week
	// between 2021/01/20 and 2021/01/14.
	FrameEndTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=frame_end_time,json=frameEndTime,proto3" json:"frame_end_time,omitempty"`
	// Output only. Total number of VMs included in the report.
	VmCount int32 `protobuf:"varint,9,opt,name=vm_count,json=vmCount,proto3" json:"vm_count,omitempty"`
	// List of utilization information per VM.
	// When sent as part of the request, the "vm_id" field is used in order to
	// specify which VMs to include in the report. In that case all other fields
	// are ignored.
	Vms []*VmUtilizationInfo `protobuf:"bytes,10,rep,name=vms,proto3" json:"vms,omitempty"`
}

func (x *UtilizationReport) Reset() {
	*x = UtilizationReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtilizationReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtilizationReport) ProtoMessage() {}

func (x *UtilizationReport) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtilizationReport.ProtoReflect.Descriptor instead.
func (*UtilizationReport) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{24}
}

func (x *UtilizationReport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UtilizationReport) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UtilizationReport) GetState() UtilizationReport_State {
	if x != nil {
		return x.State
	}
	return UtilizationReport_STATE_UNSPECIFIED
}

func (x *UtilizationReport) GetStateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StateTime
	}
	return nil
}

func (x *UtilizationReport) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *UtilizationReport) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *UtilizationReport) GetTimeFrame() UtilizationReport_TimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return UtilizationReport_TIME_FRAME_UNSPECIFIED
}

func (x *UtilizationReport) GetFrameEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FrameEndTime
	}
	return nil
}

func (x *UtilizationReport) GetVmCount() int32 {
	if x != nil {
		return x.VmCount
	}
	return 0
}

func (x *UtilizationReport) GetVms() []*VmUtilizationInfo {
	if x != nil {
		return x.Vms
	}
	return nil
}

// Utilization information of a single VM.
type VmUtilizationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to VmDetails:
	//
	//	*VmUtilizationInfo_VmwareVmDetails
	VmDetails isVmUtilizationInfo_VmDetails `protobuf_oneof:"VmDetails"`
	// The VM's ID in the source.
	VmId string `protobuf:"bytes,3,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	// Utilization metrics for this VM.
	Utilization *VmUtilizationMetrics `protobuf:"bytes,2,opt,name=utilization,proto3" json:"utilization,omitempty"`
}

func (x *VmUtilizationInfo) Reset() {
	*x = VmUtilizationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VmUtilizationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VmUtilizationInfo) ProtoMessage() {}

func (x *VmUtilizationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VmUtilizationInfo.ProtoReflect.Descriptor instead.
func (*VmUtilizationInfo) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{25}
}

func (m *VmUtilizationInfo) GetVmDetails() isVmUtilizationInfo_VmDetails {
	if m != nil {
		return m.VmDetails
	}
	return nil
}

func (x *VmUtilizationInfo) GetVmwareVmDetails() *VmwareVmDetails {
	if x, ok := x.GetVmDetails().(*VmUtilizationInfo_VmwareVmDetails); ok {
		return x.VmwareVmDetails
	}
	return nil
}

func (x *VmUtilizationInfo) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *VmUtilizationInfo) GetUtilization() *VmUtilizationMetrics {
	if x != nil {
		return x.Utilization
	}
	return nil
}

type isVmUtilizationInfo_VmDetails interface {
	isVmUtilizationInfo_VmDetails()
}

type VmUtilizationInfo_VmwareVmDetails struct {
	// The description of the VM in a Source of type Vmware.
	VmwareVmDetails *VmwareVmDetails `protobuf:"bytes,1,opt,name=vmware_vm_details,json=vmwareVmDetails,proto3,oneof"`
}

func (*VmUtilizationInfo_VmwareVmDetails) isVmUtilizationInfo_VmDetails() {}

// Utilization metrics values for a single VM.
type VmUtilizationMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Max CPU usage, percent.
	CpuMaxPercent int32 `protobuf:"varint,9,opt,name=cpu_max_percent,json=cpuMaxPercent,proto3" json:"cpu_max_percent,omitempty"`
	// Average CPU usage, percent.
	CpuAveragePercent int32 `protobuf:"varint,10,opt,name=cpu_average_percent,json=cpuAveragePercent,proto3" json:"cpu_average_percent,omitempty"`
	// Max memory usage, percent.
	MemoryMaxPercent int32 `protobuf:"varint,11,opt,name=memory_max_percent,json=memoryMaxPercent,proto3" json:"memory_max_percent,omitempty"`
	// Average memory usage, percent.
	MemoryAveragePercent int32 `protobuf:"varint,12,opt,name=memory_average_percent,json=memoryAveragePercent,proto3" json:"memory_average_percent,omitempty"`
	// Max disk IO rate, in kilobytes per second.
	DiskIoRateMaxKbps int64 `protobuf:"varint,13,opt,name=disk_io_rate_max_kbps,json=diskIoRateMaxKbps,proto3" json:"disk_io_rate_max_kbps,omitempty"`
	// Average disk IO rate, in kilobytes per second.
	DiskIoRateAverageKbps int64 `protobuf:"varint,14,opt,name=disk_io_rate_average_kbps,json=diskIoRateAverageKbps,proto3" json:"disk_io_rate_average_kbps,omitempty"`
	// Max network throughput (combined transmit-rates and receive-rates), in
	// kilobytes per second.
	NetworkThroughputMaxKbps int64 `protobuf:"varint,15,opt,name=network_throughput_max_kbps,json=networkThroughputMaxKbps,proto3" json:"network_throughput_max_kbps,omitempty"`
	// Average network throughput (combined transmit-rates and receive-rates), in
	// kilobytes per second.
	NetworkThroughputAverageKbps int64 `protobuf:"varint,16,opt,name=network_throughput_average_kbps,json=networkThroughputAverageKbps,proto3" json:"network_throughput_average_kbps,omitempty"`
}

func (x *VmUtilizationMetrics) Reset() {
	*x = VmUtilizationMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VmUtilizationMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VmUtilizationMetrics) ProtoMessage() {}

func (x *VmUtilizationMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VmUtilizationMetrics.ProtoReflect.Descriptor instead.
func (*VmUtilizationMetrics) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{26}
}

func (x *VmUtilizationMetrics) GetCpuMaxPercent() int32 {
	if x != nil {
		return x.CpuMaxPercent
	}
	return 0
}

func (x *VmUtilizationMetrics) GetCpuAveragePercent() int32 {
	if x != nil {
		return x.CpuAveragePercent
	}
	return 0
}

func (x *VmUtilizationMetrics) GetMemoryMaxPercent() int32 {
	if x != nil {
		return x.MemoryMaxPercent
	}
	return 0
}

func (x *VmUtilizationMetrics) GetMemoryAveragePercent() int32 {
	if x != nil {
		return x.MemoryAveragePercent
	}
	return 0
}

func (x *VmUtilizationMetrics) GetDiskIoRateMaxKbps() int64 {
	if x != nil {
		return x.DiskIoRateMaxKbps
	}
	return 0
}

func (x *VmUtilizationMetrics) GetDiskIoRateAverageKbps() int64 {
	if x != nil {
		return x.DiskIoRateAverageKbps
	}
	return 0
}

func (x *VmUtilizationMetrics) GetNetworkThroughputMaxKbps() int64 {
	if x != nil {
		return x.NetworkThroughputMaxKbps
	}
	return 0
}

func (x *VmUtilizationMetrics) GetNetworkThroughputAverageKbps() int64 {
	if x != nil {
		return x.NetworkThroughputAverageKbps
	}
	return 0
}

// ComputeEngineTargetDefaults is a collection of details for creating a VM in a
// target Compute Engine project.
type ComputeEngineTargetDefaults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the VM to create.
	VmName string `protobuf:"bytes,1,opt,name=vm_name,json=vmName,proto3" json:"vm_name,omitempty"`
	// The full path of the resource of type TargetProject which represents the
	// Compute Engine project in which to create this VM.
	TargetProject string `protobuf:"bytes,2,opt,name=target_project,json=targetProject,proto3" json:"target_project,omitempty"`
	// The zone in which to create the VM.
	Zone string `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
	// The machine type series to create the VM with.
	MachineTypeSeries string `protobuf:"bytes,4,opt,name=machine_type_series,json=machineTypeSeries,proto3" json:"machine_type_series,omitempty"`
	// The machine type to create the VM with.
	MachineType string `protobuf:"bytes,5,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	// A map of network tags to associate with the VM.
	NetworkTags []string `protobuf:"bytes,6,rep,name=network_tags,json=networkTags,proto3" json:"network_tags,omitempty"`
	// List of NICs connected to this VM.
	NetworkInterfaces []*NetworkInterface `protobuf:"bytes,7,rep,name=network_interfaces,json=networkInterfaces,proto3" json:"network_interfaces,omitempty"`
	// The service account to associate the VM with.
	ServiceAccount string `protobuf:"bytes,8,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// The disk type to use in the VM.
	DiskType ComputeEngineDiskType `protobuf:"varint,9,opt,name=disk_type,json=diskType,proto3,enum=google.events.cloud.vmmigration.v1.ComputeEngineDiskType" json:"disk_type,omitempty"`
	// A map of labels to associate with the VM.
	Labels map[string]string `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The license type to use in OS adaptation.
	LicenseType ComputeEngineLicenseType `protobuf:"varint,11,opt,name=license_type,json=licenseType,proto3,enum=google.events.cloud.vmmigration.v1.ComputeEngineLicenseType" json:"license_type,omitempty"`
	// Output only. The OS license returned from the adaptation module report.
	AppliedLicense *AppliedLicense `protobuf:"bytes,12,opt,name=applied_license,json=appliedLicense,proto3" json:"applied_license,omitempty"`
	// Compute instance scheduling information (if empty default is used).
	ComputeScheduling *ComputeScheduling `protobuf:"bytes,13,opt,name=compute_scheduling,json=computeScheduling,proto3" json:"compute_scheduling,omitempty"`
	// Defines whether the instance has Secure Boot enabled.
	// This can be set to true only if the vm boot option is EFI.
	SecureBoot bool `protobuf:"varint,14,opt,name=secure_boot,json=secureBoot,proto3" json:"secure_boot,omitempty"`
	// Output only. The VM Boot Option, as set in the source vm.
	BootOption ComputeEngineBootOption `protobuf:"varint,15,opt,name=boot_option,json=bootOption,proto3,enum=google.events.cloud.vmmigration.v1.ComputeEngineBootOption" json:"boot_option,omitempty"`
	// The metadata key/value pairs to assign to the VM.
	Metadata map[string]string `protobuf:"bytes,16,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Additional licenses to assign to the VM.
	AdditionalLicenses []string `protobuf:"bytes,17,rep,name=additional_licenses,json=additionalLicenses,proto3" json:"additional_licenses,omitempty"`
	// The hostname to assign to the VM.
	Hostname string `protobuf:"bytes,18,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *ComputeEngineTargetDefaults) Reset() {
	*x = ComputeEngineTargetDefaults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeEngineTargetDefaults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeEngineTargetDefaults) ProtoMessage() {}

func (x *ComputeEngineTargetDefaults) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeEngineTargetDefaults.ProtoReflect.Descriptor instead.
func (*ComputeEngineTargetDefaults) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{27}
}

func (x *ComputeEngineTargetDefaults) GetVmName() string {
	if x != nil {
		return x.VmName
	}
	return ""
}

func (x *ComputeEngineTargetDefaults) GetTargetProject() string {
	if x != nil {
		return x.TargetProject
	}
	return ""
}

func (x *ComputeEngineTargetDefaults) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ComputeEngineTargetDefaults) GetMachineTypeSeries() string {
	if x != nil {
		return x.MachineTypeSeries
	}
	return ""
}

func (x *ComputeEngineTargetDefaults) GetMachineType() string {
	if x != nil {
		return x.MachineType
	}
	return ""
}

func (x *ComputeEngineTargetDefaults) GetNetworkTags() []string {
	if x != nil {
		return x.NetworkTags
	}
	return nil
}

func (x *ComputeEngineTargetDefaults) GetNetworkInterfaces() []*NetworkInterface {
	if x != nil {
		return x.NetworkInterfaces
	}
	return nil
}

func (x *ComputeEngineTargetDefaults) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *ComputeEngineTargetDefaults) GetDiskType() ComputeEngineDiskType {
	if x != nil {
		return x.DiskType
	}
	return ComputeEngineDiskType_COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED
}

func (x *ComputeEngineTargetDefaults) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ComputeEngineTargetDefaults) GetLicenseType() ComputeEngineLicenseType {
	if x != nil {
		return x.LicenseType
	}
	return ComputeEngineLicenseType_COMPUTE_ENGINE_LICENSE_TYPE_DEFAULT
}

func (x *ComputeEngineTargetDefaults) GetAppliedLicense() *AppliedLicense {
	if x != nil {
		return x.AppliedLicense
	}
	return nil
}

func (x *ComputeEngineTargetDefaults) GetComputeScheduling() *ComputeScheduling {
	if x != nil {
		return x.ComputeScheduling
	}
	return nil
}

func (x *ComputeEngineTargetDefaults) GetSecureBoot() bool {
	if x != nil {
		return x.SecureBoot
	}
	return false
}

func (x *ComputeEngineTargetDefaults) GetBootOption() ComputeEngineBootOption {
	if x != nil {
		return x.BootOption
	}
	return ComputeEngineBootOption_COMPUTE_ENGINE_BOOT_OPTION_UNSPECIFIED
}

func (x *ComputeEngineTargetDefaults) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ComputeEngineTargetDefaults) GetAdditionalLicenses() []string {
	if x != nil {
		return x.AdditionalLicenses
	}
	return nil
}

func (x *ComputeEngineTargetDefaults) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

// ComputeEngineTargetDetails is a collection of details for creating a VM in a
// target Compute Engine project.
type ComputeEngineTargetDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the VM to create.
	VmName string `protobuf:"bytes,1,opt,name=vm_name,json=vmName,proto3" json:"vm_name,omitempty"`
	// The Google Cloud target project ID or project name.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// The zone in which to create the VM.
	Zone string `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
	// The machine type series to create the VM with.
	MachineTypeSeries string `protobuf:"bytes,4,opt,name=machine_type_series,json=machineTypeSeries,proto3" json:"machine_type_series,omitempty"`
	// The machine type to create the VM with.
	MachineType string `protobuf:"bytes,5,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	// A map of network tags to associate with the VM.
	NetworkTags []string `protobuf:"bytes,6,rep,name=network_tags,json=networkTags,proto3" json:"network_tags,omitempty"`
	// List of NICs connected to this VM.
	NetworkInterfaces []*NetworkInterface `protobuf:"bytes,7,rep,name=network_interfaces,json=networkInterfaces,proto3" json:"network_interfaces,omitempty"`
	// The service account to associate the VM with.
	ServiceAccount string `protobuf:"bytes,8,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// The disk type to use in the VM.
	DiskType ComputeEngineDiskType `protobuf:"varint,9,opt,name=disk_type,json=diskType,proto3,enum=google.events.cloud.vmmigration.v1.ComputeEngineDiskType" json:"disk_type,omitempty"`
	// A map of labels to associate with the VM.
	Labels map[string]string `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The license type to use in OS adaptation.
	LicenseType ComputeEngineLicenseType `protobuf:"varint,11,opt,name=license_type,json=licenseType,proto3,enum=google.events.cloud.vmmigration.v1.ComputeEngineLicenseType" json:"license_type,omitempty"`
	// The OS license returned from the adaptation module report.
	AppliedLicense *AppliedLicense `protobuf:"bytes,12,opt,name=applied_license,json=appliedLicense,proto3" json:"applied_license,omitempty"`
	// Compute instance scheduling information (if empty default is used).
	ComputeScheduling *ComputeScheduling `protobuf:"bytes,13,opt,name=compute_scheduling,json=computeScheduling,proto3" json:"compute_scheduling,omitempty"`
	// Defines whether the instance has Secure Boot enabled.
	// This can be set to true only if the vm boot option is EFI.
	SecureBoot bool `protobuf:"varint,14,opt,name=secure_boot,json=secureBoot,proto3" json:"secure_boot,omitempty"`
	// The VM Boot Option, as set in the source vm.
	BootOption ComputeEngineBootOption `protobuf:"varint,15,opt,name=boot_option,json=bootOption,proto3,enum=google.events.cloud.vmmigration.v1.ComputeEngineBootOption" json:"boot_option,omitempty"`
	// The metadata key/value pairs to assign to the VM.
	Metadata map[string]string `protobuf:"bytes,16,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Additional licenses to assign to the VM.
	AdditionalLicenses []string `protobuf:"bytes,17,rep,name=additional_licenses,json=additionalLicenses,proto3" json:"additional_licenses,omitempty"`
	// The hostname to assign to the VM.
	Hostname string `protobuf:"bytes,18,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *ComputeEngineTargetDetails) Reset() {
	*x = ComputeEngineTargetDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeEngineTargetDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeEngineTargetDetails) ProtoMessage() {}

func (x *ComputeEngineTargetDetails) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeEngineTargetDetails.ProtoReflect.Descriptor instead.
func (*ComputeEngineTargetDetails) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{28}
}

func (x *ComputeEngineTargetDetails) GetVmName() string {
	if x != nil {
		return x.VmName
	}
	return ""
}

func (x *ComputeEngineTargetDetails) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ComputeEngineTargetDetails) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ComputeEngineTargetDetails) GetMachineTypeSeries() string {
	if x != nil {
		return x.MachineTypeSeries
	}
	return ""
}

func (x *ComputeEngineTargetDetails) GetMachineType() string {
	if x != nil {
		return x.MachineType
	}
	return ""
}

func (x *ComputeEngineTargetDetails) GetNetworkTags() []string {
	if x != nil {
		return x.NetworkTags
	}
	return nil
}

func (x *ComputeEngineTargetDetails) GetNetworkInterfaces() []*NetworkInterface {
	if x != nil {
		return x.NetworkInterfaces
	}
	return nil
}

func (x *ComputeEngineTargetDetails) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *ComputeEngineTargetDetails) GetDiskType() ComputeEngineDiskType {
	if x != nil {
		return x.DiskType
	}
	return ComputeEngineDiskType_COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED
}

func (x *ComputeEngineTargetDetails) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ComputeEngineTargetDetails) GetLicenseType() ComputeEngineLicenseType {
	if x != nil {
		return x.LicenseType
	}
	return ComputeEngineLicenseType_COMPUTE_ENGINE_LICENSE_TYPE_DEFAULT
}

func (x *ComputeEngineTargetDetails) GetAppliedLicense() *AppliedLicense {
	if x != nil {
		return x.AppliedLicense
	}
	return nil
}

func (x *ComputeEngineTargetDetails) GetComputeScheduling() *ComputeScheduling {
	if x != nil {
		return x.ComputeScheduling
	}
	return nil
}

func (x *ComputeEngineTargetDetails) GetSecureBoot() bool {
	if x != nil {
		return x.SecureBoot
	}
	return false
}

func (x *ComputeEngineTargetDetails) GetBootOption() ComputeEngineBootOption {
	if x != nil {
		return x.BootOption
	}
	return ComputeEngineBootOption_COMPUTE_ENGINE_BOOT_OPTION_UNSPECIFIED
}

func (x *ComputeEngineTargetDetails) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ComputeEngineTargetDetails) GetAdditionalLicenses() []string {
	if x != nil {
		return x.AdditionalLicenses
	}
	return nil
}

func (x *ComputeEngineTargetDetails) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

// NetworkInterface represents a NIC of a VM.
type NetworkInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The network to connect the NIC to.
	Network string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	// The subnetwork to connect the NIC to.
	Subnetwork string `protobuf:"bytes,2,opt,name=subnetwork,proto3" json:"subnetwork,omitempty"`
	// The internal IP to define in the NIC.
	// The formats accepted are: `ephemeral` \ ipv4 address \ a named address
	// resource full path.
	InternalIp string `protobuf:"bytes,3,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
	// The external IP to define in the NIC.
	ExternalIp string `protobuf:"bytes,4,opt,name=external_ip,json=externalIp,proto3" json:"external_ip,omitempty"`
}

func (x *NetworkInterface) Reset() {
	*x = NetworkInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterface) ProtoMessage() {}

func (x *NetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterface.ProtoReflect.Descriptor instead.
func (*NetworkInterface) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{29}
}

func (x *NetworkInterface) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *NetworkInterface) GetSubnetwork() string {
	if x != nil {
		return x.Subnetwork
	}
	return ""
}

func (x *NetworkInterface) GetInternalIp() string {
	if x != nil {
		return x.InternalIp
	}
	return ""
}

func (x *NetworkInterface) GetExternalIp() string {
	if x != nil {
		return x.ExternalIp
	}
	return ""
}

// AppliedLicense holds the license data returned by adaptation module report.
type AppliedLicense struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The license type that was used in OS adaptation.
	Type AppliedLicense_Type `protobuf:"varint,1,opt,name=type,proto3,enum=google.events.cloud.vmmigration.v1.AppliedLicense_Type" json:"type,omitempty"`
	// The OS license returned from the adaptation module's report.
	OsLicense string `protobuf:"bytes,2,opt,name=os_license,json=osLicense,proto3" json:"os_license,omitempty"`
}

func (x *AppliedLicense) Reset() {
	*x = AppliedLicense{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppliedLicense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppliedLicense) ProtoMessage() {}

func (x *AppliedLicense) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppliedLicense.ProtoReflect.Descriptor instead.
func (*AppliedLicense) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{30}
}

func (x *AppliedLicense) GetType() AppliedLicense_Type {
	if x != nil {
		return x.Type
	}
	return AppliedLicense_TYPE_UNSPECIFIED
}

func (x *AppliedLicense) GetOsLicense() string {
	if x != nil {
		return x.OsLicense
	}
	return ""
}

// Node Affinity: the configuration of desired nodes onto which this Instance
// could be scheduled. Based on
// https://cloud.google.com/compute/docs/reference/rest/v1/instances/setScheduling
type SchedulingNodeAffinity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The label key of Node resource to reference.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The operator to use for the node resources specified in the `values`
	// parameter.
	Operator SchedulingNodeAffinity_Operator `protobuf:"varint,2,opt,name=operator,proto3,enum=google.events.cloud.vmmigration.v1.SchedulingNodeAffinity_Operator" json:"operator,omitempty"`
	// Corresponds to the label values of Node resource.
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *SchedulingNodeAffinity) Reset() {
	*x = SchedulingNodeAffinity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulingNodeAffinity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulingNodeAffinity) ProtoMessage() {}

func (x *SchedulingNodeAffinity) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulingNodeAffinity.ProtoReflect.Descriptor instead.
func (*SchedulingNodeAffinity) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{31}
}

func (x *SchedulingNodeAffinity) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SchedulingNodeAffinity) GetOperator() SchedulingNodeAffinity_Operator {
	if x != nil {
		return x.Operator
	}
	return SchedulingNodeAffinity_OPERATOR_UNSPECIFIED
}

func (x *SchedulingNodeAffinity) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// Scheduling information for VM on maintenance/restart behaviour and
// node allocation in sole tenant nodes.
type ComputeScheduling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How the instance should behave when the host machine undergoes
	// maintenance that may temporarily impact instance performance.
	OnHostMaintenance ComputeScheduling_OnHostMaintenance `protobuf:"varint,1,opt,name=on_host_maintenance,json=onHostMaintenance,proto3,enum=google.events.cloud.vmmigration.v1.ComputeScheduling_OnHostMaintenance" json:"on_host_maintenance,omitempty"`
	// Whether the Instance should be automatically restarted whenever it is
	// terminated by Compute Engine (not terminated by user).
	// This configuration is identical to `automaticRestart` field in Compute
	// Engine create instance under scheduling.
	// It was changed to an enum (instead of a boolean) to match the default
	// value in Compute Engine which is automatic restart.
	RestartType ComputeScheduling_RestartType `protobuf:"varint,5,opt,name=restart_type,json=restartType,proto3,enum=google.events.cloud.vmmigration.v1.ComputeScheduling_RestartType" json:"restart_type,omitempty"`
	// A set of node affinity and anti-affinity configurations for sole tenant
	// nodes.
	NodeAffinities []*SchedulingNodeAffinity `protobuf:"bytes,3,rep,name=node_affinities,json=nodeAffinities,proto3" json:"node_affinities,omitempty"`
	// The minimum number of virtual CPUs this instance will consume when
	// running on a sole-tenant node. Ignored if no node_affinites are
	// configured.
	MinNodeCpus int32 `protobuf:"varint,4,opt,name=min_node_cpus,json=minNodeCpus,proto3" json:"min_node_cpus,omitempty"`
}

func (x *ComputeScheduling) Reset() {
	*x = ComputeScheduling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeScheduling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeScheduling) ProtoMessage() {}

func (x *ComputeScheduling) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeScheduling.ProtoReflect.Descriptor instead.
func (*ComputeScheduling) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{32}
}

func (x *ComputeScheduling) GetOnHostMaintenance() ComputeScheduling_OnHostMaintenance {
	if x != nil {
		return x.OnHostMaintenance
	}
	return ComputeScheduling_ON_HOST_MAINTENANCE_UNSPECIFIED
}

func (x *ComputeScheduling) GetRestartType() ComputeScheduling_RestartType {
	if x != nil {
		return x.RestartType
	}
	return ComputeScheduling_RESTART_TYPE_UNSPECIFIED
}

func (x *ComputeScheduling) GetNodeAffinities() []*SchedulingNodeAffinity {
	if x != nil {
		return x.NodeAffinities
	}
	return nil
}

func (x *ComputeScheduling) GetMinNodeCpus() int32 {
	if x != nil {
		return x.MinNodeCpus
	}
	return 0
}

// A policy for scheduling replications.
type SchedulePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The idle duration between replication stages.
	IdleDuration *durationpb.Duration `protobuf:"bytes,1,opt,name=idle_duration,json=idleDuration,proto3" json:"idle_duration,omitempty"`
	// A flag to indicate whether to skip OS adaptation during the replication
	// sync. OS adaptation is a process where the VM's operating system undergoes
	// changes and adaptations to fully function on Compute Engine.
	SkipOsAdaptation bool `protobuf:"varint,2,opt,name=skip_os_adaptation,json=skipOsAdaptation,proto3" json:"skip_os_adaptation,omitempty"`
}

func (x *SchedulePolicy) Reset() {
	*x = SchedulePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulePolicy) ProtoMessage() {}

func (x *SchedulePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulePolicy.ProtoReflect.Descriptor instead.
func (*SchedulePolicy) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{33}
}

func (x *SchedulePolicy) GetIdleDuration() *durationpb.Duration {
	if x != nil {
		return x.IdleDuration
	}
	return nil
}

func (x *SchedulePolicy) GetSkipOsAdaptation() bool {
	if x != nil {
		return x.SkipOsAdaptation
	}
	return false
}

// TargetProject message represents a target Compute Engine project for a
// migration or a clone.
type TargetProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The name of the target project.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The target project ID (number) or project name.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// The target project's description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The time this target project resource was created (not related
	// to when the Compute Engine project it points to was created).
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The last time the target project resource was updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *TargetProject) Reset() {
	*x = TargetProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetProject) ProtoMessage() {}

func (x *TargetProject) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetProject.ProtoReflect.Descriptor instead.
func (*TargetProject) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{34}
}

func (x *TargetProject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TargetProject) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *TargetProject) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TargetProject) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *TargetProject) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// Describes message for 'Group' resource. The Group is a collections of several
// MigratingVms.
type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The Group name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The create time timestamp.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The update time timestamp.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// User-provided description of the group.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Display name is a user defined name for this group which can be updated.
	DisplayName string `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{35}
}

func (x *Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Group) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Group) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Group) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Group) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

// Represents migration resource warning information that can be used with
// google.rpc.Status message. MigrationWarning is used to present the user with
// warning information in migration operations.
type MigrationWarning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The warning code.
	Code MigrationWarning_WarningCode `protobuf:"varint,1,opt,name=code,proto3,enum=google.events.cloud.vmmigration.v1.MigrationWarning_WarningCode" json:"code,omitempty"`
	// The localized warning message.
	WarningMessage *errdetails.LocalizedMessage `protobuf:"bytes,2,opt,name=warning_message,json=warningMessage,proto3" json:"warning_message,omitempty"`
	// Suggested action for solving the warning.
	ActionItem *errdetails.LocalizedMessage `protobuf:"bytes,3,opt,name=action_item,json=actionItem,proto3" json:"action_item,omitempty"`
	// URL(s) pointing to additional information on handling the current warning.
	HelpLinks []*errdetails.Help_Link `protobuf:"bytes,4,rep,name=help_links,json=helpLinks,proto3" json:"help_links,omitempty"`
	// The time the warning occurred.
	WarningTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=warning_time,json=warningTime,proto3" json:"warning_time,omitempty"`
}

func (x *MigrationWarning) Reset() {
	*x = MigrationWarning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationWarning) ProtoMessage() {}

func (x *MigrationWarning) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationWarning.ProtoReflect.Descriptor instead.
func (*MigrationWarning) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{36}
}

func (x *MigrationWarning) GetCode() MigrationWarning_WarningCode {
	if x != nil {
		return x.Code
	}
	return MigrationWarning_WARNING_CODE_UNSPECIFIED
}

func (x *MigrationWarning) GetWarningMessage() *errdetails.LocalizedMessage {
	if x != nil {
		return x.WarningMessage
	}
	return nil
}

func (x *MigrationWarning) GetActionItem() *errdetails.LocalizedMessage {
	if x != nil {
		return x.ActionItem
	}
	return nil
}

func (x *MigrationWarning) GetHelpLinks() []*errdetails.Help_Link {
	if x != nil {
		return x.HelpLinks
	}
	return nil
}

func (x *MigrationWarning) GetWarningTime() *timestamppb.Timestamp {
	if x != nil {
		return x.WarningTime
	}
	return nil
}

// Represent the source AWS VM details.
type AwsSourceVmDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The firmware type of the source VM.
	Firmware AwsSourceVmDetails_Firmware `protobuf:"varint,1,opt,name=firmware,proto3,enum=google.events.cloud.vmmigration.v1.AwsSourceVmDetails_Firmware" json:"firmware,omitempty"`
	// The total size of the disks being migrated in bytes.
	CommittedStorageBytes int64 `protobuf:"varint,2,opt,name=committed_storage_bytes,json=committedStorageBytes,proto3" json:"committed_storage_bytes,omitempty"`
	// The disks attached to the source VM.
	Disks []*AwsSourceVmDetails_AwsDiskDetails `protobuf:"bytes,3,rep,name=disks,proto3" json:"disks,omitempty"`
}

func (x *AwsSourceVmDetails) Reset() {
	*x = AwsSourceVmDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsSourceVmDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsSourceVmDetails) ProtoMessage() {}

func (x *AwsSourceVmDetails) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsSourceVmDetails.ProtoReflect.Descriptor instead.
func (*AwsSourceVmDetails) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{37}
}

func (x *AwsSourceVmDetails) GetFirmware() AwsSourceVmDetails_Firmware {
	if x != nil {
		return x.Firmware
	}
	return AwsSourceVmDetails_FIRMWARE_UNSPECIFIED
}

func (x *AwsSourceVmDetails) GetCommittedStorageBytes() int64 {
	if x != nil {
		return x.CommittedStorageBytes
	}
	return 0
}

func (x *AwsSourceVmDetails) GetDisks() []*AwsSourceVmDetails_AwsDiskDetails {
	if x != nil {
		return x.Disks
	}
	return nil
}

// The data within all UtilizationReport events.
type UtilizationReportEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The UtilizationReport event payload. Unset for deletion events.
	Payload *UtilizationReport `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
}

func (x *UtilizationReportEventData) Reset() {
	*x = UtilizationReportEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtilizationReportEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtilizationReportEventData) ProtoMessage() {}

func (x *UtilizationReportEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtilizationReportEventData.ProtoReflect.Descriptor instead.
func (*UtilizationReportEventData) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{38}
}

func (x *UtilizationReportEventData) GetPayload() *UtilizationReport {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all Group events.
type GroupEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The Group event payload. Unset for deletion events.
	Payload *Group `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
}

func (x *GroupEventData) Reset() {
	*x = GroupEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupEventData) ProtoMessage() {}

func (x *GroupEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupEventData.ProtoReflect.Descriptor instead.
func (*GroupEventData) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{39}
}

func (x *GroupEventData) GetPayload() *Group {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all CloneJob events.
type CloneJobEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CloneJob event payload.
	Payload *CloneJob `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CloneJobEventData) Reset() {
	*x = CloneJobEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneJobEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneJobEventData) ProtoMessage() {}

func (x *CloneJobEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneJobEventData.ProtoReflect.Descriptor instead.
func (*CloneJobEventData) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{40}
}

func (x *CloneJobEventData) GetPayload() *CloneJob {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all DatacenterConnector events.
type DatacenterConnectorEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The DatacenterConnector event payload. Unset for deletion events.
	Payload *DatacenterConnector `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
}

func (x *DatacenterConnectorEventData) Reset() {
	*x = DatacenterConnectorEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatacenterConnectorEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatacenterConnectorEventData) ProtoMessage() {}

func (x *DatacenterConnectorEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatacenterConnectorEventData.ProtoReflect.Descriptor instead.
func (*DatacenterConnectorEventData) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{41}
}

func (x *DatacenterConnectorEventData) GetPayload() *DatacenterConnector {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all TargetProject events.
type TargetProjectEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The TargetProject event payload. Unset for deletion events.
	Payload *TargetProject `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
}

func (x *TargetProjectEventData) Reset() {
	*x = TargetProjectEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetProjectEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetProjectEventData) ProtoMessage() {}

func (x *TargetProjectEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetProjectEventData.ProtoReflect.Descriptor instead.
func (*TargetProjectEventData) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{42}
}

func (x *TargetProjectEventData) GetPayload() *TargetProject {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all CutoverJob events.
type CutoverJobEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CutoverJob event payload.
	Payload *CutoverJob `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CutoverJobEventData) Reset() {
	*x = CutoverJobEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CutoverJobEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CutoverJobEventData) ProtoMessage() {}

func (x *CutoverJobEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CutoverJobEventData.ProtoReflect.Descriptor instead.
func (*CutoverJobEventData) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{43}
}

func (x *CutoverJobEventData) GetPayload() *CutoverJob {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all Source events.
type SourceEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The Source event payload. Unset for deletion events.
	Payload *Source `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
}

func (x *SourceEventData) Reset() {
	*x = SourceEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceEventData) ProtoMessage() {}

func (x *SourceEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceEventData.ProtoReflect.Descriptor instead.
func (*SourceEventData) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{44}
}

func (x *SourceEventData) GetPayload() *Source {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all MigratingVm events.
type MigratingVmEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The MigratingVm event payload. Unset for deletion events.
	Payload *MigratingVm `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
}

func (x *MigratingVmEventData) Reset() {
	*x = MigratingVmEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigratingVmEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigratingVmEventData) ProtoMessage() {}

func (x *MigratingVmEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigratingVmEventData.ProtoReflect.Descriptor instead.
func (*MigratingVmEventData) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{45}
}

func (x *MigratingVmEventData) GetPayload() *MigratingVm {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Message describing AWS Credentials using access key id and secret.
type AwsSourceDetails_AccessKeyCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AWS access key ID.
	AccessKeyId string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
}

func (x *AwsSourceDetails_AccessKeyCredentials) Reset() {
	*x = AwsSourceDetails_AccessKeyCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsSourceDetails_AccessKeyCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsSourceDetails_AccessKeyCredentials) ProtoMessage() {}

func (x *AwsSourceDetails_AccessKeyCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsSourceDetails_AccessKeyCredentials.ProtoReflect.Descriptor instead.
func (*AwsSourceDetails_AccessKeyCredentials) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{18, 0}
}

func (x *AwsSourceDetails_AccessKeyCredentials) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

// Tag is an AWS tag representation.
type AwsSourceDetails_Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key of tag.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Value of tag.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AwsSourceDetails_Tag) Reset() {
	*x = AwsSourceDetails_Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsSourceDetails_Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsSourceDetails_Tag) ProtoMessage() {}

func (x *AwsSourceDetails_Tag) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsSourceDetails_Tag.ProtoReflect.Descriptor instead.
func (*AwsSourceDetails_Tag) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{18, 1}
}

func (x *AwsSourceDetails_Tag) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AwsSourceDetails_Tag) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// The details of an AWS instance disk.
type AwsSourceVmDetails_AwsDiskDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ordinal number of the disk.
	DiskNumber int32 `protobuf:"varint,1,opt,name=disk_number,json=diskNumber,proto3" json:"disk_number,omitempty"`
	// AWS volume ID.
	VolumeId string `protobuf:"bytes,2,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// Size in GB.
	SizeGb int64 `protobuf:"varint,3,opt,name=size_gb,json=sizeGb,proto3" json:"size_gb,omitempty"`
}

func (x *AwsSourceVmDetails_AwsDiskDetails) Reset() {
	*x = AwsSourceVmDetails_AwsDiskDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsSourceVmDetails_AwsDiskDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsSourceVmDetails_AwsDiskDetails) ProtoMessage() {}

func (x *AwsSourceVmDetails_AwsDiskDetails) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_vmmigration_v1_data_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsSourceVmDetails_AwsDiskDetails.ProtoReflect.Descriptor instead.
func (*AwsSourceVmDetails_AwsDiskDetails) Descriptor() ([]byte, []int) {
	return file_cloud_vmmigration_v1_data_proto_rawDescGZIP(), []int{37, 0}
}

func (x *AwsSourceVmDetails_AwsDiskDetails) GetDiskNumber() int32 {
	if x != nil {
		return x.DiskNumber
	}
	return 0
}

func (x *AwsSourceVmDetails_AwsDiskDetails) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *AwsSourceVmDetails_AwsDiskDetails) GetSizeGb() int64 {
	if x != nil {
		return x.SizeGb
	}
	return 0
}

var File_cloud_vmmigration_v1_data_proto protoreflect.FileDescriptor

var file_cloud_vmmigration_v1_data_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x22, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72,
	0x70, 0x63, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72,
	0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x9a, 0x05, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x79, 0x63, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a,
	0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x50, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x08,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x52, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x04, 0x22, 0xbf, 0x03, 0x0a,
	0x09, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x7c, 0x0a, 0x18, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x48, 0x00, 0x52,
	0x17, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x65, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x61, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x65, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x22, 0x1d,
	0x0a, 0x1b, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x22, 0x93, 0x02,
	0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x65,
	0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x56, 0x0a,
	0x29, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x23, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x77, 0x6f, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x5c, 0x0a, 0x2c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x68,
	0x69, 0x72, 0x74, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x26, 0x6c, 0x61, 0x73,
	0x74, 0x54, 0x68, 0x69, 0x72, 0x74, 0x79, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x41, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x65, 0x70, 0x22, 0x53, 0x0a, 0x0f, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x40, 0x0a, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xbb,
	0x0d, 0x0a, 0x0b, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x6d, 0x12, 0x86,
	0x01, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d,
	0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x48, 0x00, 0x52, 0x1b, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x6b, 0x0a, 0x15, 0x61, 0x77, 0x73, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x6d, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x01,
	0x52, 0x12, 0x61, 0x77, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x6d, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4a, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x4b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x60, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x79, 0x63, 0x6c, 0x65,
	0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x6a, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x53, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x56, 0x6d, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x58, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x4a, 0x6f,
	0x62, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x4a, 0x6f,
	0x62, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x5e, 0x0a, 0x13,
	0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6a,
	0x6f, 0x62, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x74, 0x6f, 0x76, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x43, 0x75, 0x74, 0x6f, 0x76, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x5e, 0x0a, 0x10,
	0x63, 0x75, 0x74, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x74, 0x6f,
	0x76, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x0f, 0x63, 0x75, 0x74,
	0x6f, 0x76, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb7, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x55, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x07, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x55, 0x54, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x46,
	0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x4e, 0x41, 0x4c,
	0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x49, 0x4e, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x0d, 0x42, 0x14, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x6d, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x76, 0x6d, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x71, 0x0a, 0x0f,
	0x43, 0x75, 0x74, 0x6f, 0x76, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12,
	0x5e, 0x0a, 0x1e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x74,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x1b, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x43, 0x75, 0x74,
	0x6f, 0x76, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xa6, 0x05, 0x0a, 0x08, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x83, 0x01, 0x0a,
	0x1d, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x1a, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x6f, 0x6e, 0x65, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x74, 0x65,
	0x70, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x6f, 0x6e, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x22, 0x82,
	0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x49, 0x4e, 0x47,
	0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x44, 0x41, 0x50, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4f,
	0x53, 0x10, 0x07, 0x42, 0x13, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x6d,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xc5, 0x03, 0x0a, 0x09, 0x43, 0x6c, 0x6f,
	0x6e, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x55, 0x0a, 0x0b, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x53, 0x53, 0x74, 0x65, 0x70, 0x48,
	0x00, 0x52, 0x0a, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x73, 0x12, 0x68, 0x0a,
	0x12, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x6d, 0x5f, 0x64, 0x69,
	0x73, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x4d, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x53,
	0x74, 0x65, 0x70, 0x48, 0x00, 0x52, 0x10, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x7d, 0x0a, 0x19, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x76, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x56, 0x4d, 0x53, 0x74, 0x65, 0x70, 0x48, 0x00, 0x52, 0x17, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x56, 0x6d, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x22, 0x10, 0x0a, 0x0e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x53, 0x53, 0x74,
	0x65, 0x70, 0x22, 0x16, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x4d, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x53, 0x74, 0x65, 0x70, 0x22, 0x1d, 0x0a, 0x1b, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x56, 0x4d, 0x53, 0x74, 0x65, 0x70, 0x22, 0xfc, 0x05, 0x0a, 0x0a, 0x43, 0x75,
	0x74, 0x6f, 0x76, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x12, 0x83, 0x01, 0x0a, 0x1d, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x48, 0x00, 0x52, 0x1a, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3b,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x74, 0x6f, 0x76,
	0x65, 0x72, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x74, 0x6f,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x22, 0x82,
	0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x4c, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x44, 0x41, 0x50, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4f,
	0x53, 0x10, 0x07, 0x42, 0x13, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x6d,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xb4, 0x05, 0x0a, 0x0b, 0x43, 0x75, 0x74,
	0x6f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x12, 0x74, 0x0a, 0x1a, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x79, 0x63,
	0x6c, 0x65, 0x48, 0x00, 0x52, 0x18, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x75,
	0x0a, 0x17, 0x73, 0x68, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x77,
	0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x4d, 0x53, 0x74, 0x65, 0x70, 0x48, 0x00, 0x52,
	0x14, 0x73, 0x68, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x56, 0x6d, 0x12, 0x55, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73,
	0x79, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x68, 0x0a, 0x12,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x6d, 0x5f, 0x64, 0x69, 0x73,
	0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x4d, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x53, 0x74,
	0x65, 0x70, 0x48, 0x00, 0x52, 0x10, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x6d, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x7d, 0x0a, 0x19, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x76, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x56, 0x4d, 0x53, 0x74, 0x65, 0x70, 0x48, 0x00, 0x52, 0x17, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x56, 0x6d, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x22,
	0x1a, 0x0a, 0x18, 0x53, 0x68, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x4d, 0x53, 0x74, 0x65, 0x70, 0x22, 0xf2, 0x03, 0x0a, 0x06,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x76, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48,
	0x00, 0x52, 0x06, 0x76, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x12, 0x48, 0x0a, 0x03, 0x61, 0x77, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x03,
	0x61, 0x77, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x4e, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x10,
	0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0xa4, 0x01, 0x0a, 0x13, 0x56, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x49, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f,
	0x76, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x56, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x22, 0x9b, 0x07, 0x0a, 0x10, 0x41, 0x77, 0x73, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x75, 0x0a, 0x10,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x43, 0x72,
	0x65, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x77, 0x73, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x66,
	0x0a, 0x12, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x61, 0x67, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x77, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x54, 0x61, 0x67, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x54,
	0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x1e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1b,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x1d,
	0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1a, 0x6d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x49, 0x70, 0x1a, 0x3a, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x1a, 0x2d,
	0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x4d, 0x0a,
	0x1f, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x43, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x03, 0x42, 0x12, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xfa, 0x06, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x53, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x20, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x63, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0d, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x50, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x04, 0x22, 0xd0, 0x02, 0x0a, 0x0d, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45,
	0x44, 0x45, 0x44, 0x10, 0x03, 0x22, 0xe0, 0x01, 0x0a, 0x10, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x6e, 0x0a, 0x18, 0x6e, 0x65,
	0x77, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x16, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x0f, 0x69, 0x6e,
	0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x6e, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x55, 0x72,
	0x69, 0x22, 0xbc, 0x05, 0x0a, 0x0f, 0x56, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x6d, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x16, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5f, 0x0a,
	0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x6d,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x62, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69,
	0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x62, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x62, 0x12, 0x2b, 0x0a, 0x11, 0x67, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x62, 0x6f, 0x6f,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x0a, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46,
	0x46, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44,
	0x10, 0x03, 0x22, 0x3c, 0x0a, 0x0a, 0x42, 0x6f, 0x6f, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x17, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x45, 0x46, 0x49, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x49, 0x4f, 0x53, 0x10, 0x02,
	0x22, 0xd6, 0x05, 0x0a, 0x11, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x47, 0x0a, 0x03, 0x76, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x6d, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x03, 0x76, 0x6d, 0x73, 0x22, 0x47, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45,
	0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x03, 0x22, 0x46, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x16, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x45,
	0x45, 0x4b, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x59, 0x45, 0x41, 0x52, 0x10, 0x03, 0x22, 0xf4, 0x01, 0x0a, 0x11, 0x56, 0x6d,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x61, 0x0a, 0x11, 0x76, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x6d, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48,
	0x00, 0x52, 0x0f, 0x76, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x0b, 0x75, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x6d, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x56, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0xc4, 0x03, 0x0a, 0x14, 0x56, 0x6d, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x70, 0x75,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x63, 0x70, 0x75, 0x4d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x70, 0x75, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x63, 0x70, 0x75, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x16, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x6f,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6b, 0x62, 0x70, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x6f, 0x52, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x78, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x38, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x6b, 0x5f,
	0x69, 0x6f, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x6b, 0x62, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x64, 0x69, 0x73, 0x6b,
	0x49, 0x6f, 0x52, 0x61, 0x74, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4b, 0x62, 0x70,
	0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6b, 0x62, 0x70, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x78, 0x4b, 0x62, 0x70, 0x73,
	0x12, 0x45, 0x0a, 0x1f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6b,
	0x62, 0x70, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x4b, 0x62, 0x70, 0x73, 0x22, 0x85, 0x0a, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x63, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x56, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x63, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d,
	0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x5f, 0x0a, 0x0c,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a,
	0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x12, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x42, 0x6f, 0x6f,
	0x74, 0x12, 0x5c, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x69, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xf5, 0x09, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x76, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x67, 0x73, 0x12, 0x63, 0x0a, 0x12, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d,
	0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x11, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x09, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x44,
	0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x62, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x5f, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x12, 0x5c, 0x0a, 0x0b, 0x62, 0x6f,
	0x6f, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x62, 0x6f,
	0x6f, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e, 0x01, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x22, 0xb8, 0x01, 0x0a, 0x0e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x41, 0x59, 0x47, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x59, 0x4f,
	0x4c, 0x10, 0x03, 0x22, 0xdd, 0x01, 0x0a, 0x16, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x5f, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x38, 0x0a, 0x08, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x5f, 0x49,
	0x4e, 0x10, 0x02, 0x22, 0xaf, 0x04, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x77, 0x0a, 0x13, 0x6f, 0x6e, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x6e,
	0x48, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x11, 0x6f, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x64, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x63, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x6e,
	0x6f, 0x64, 0x65, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x70, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x70, 0x75,
	0x73, 0x22, 0x54, 0x0a, 0x11, 0x4f, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x53,
	0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54,
	0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49,
	0x47, 0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x22, 0x5c, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49,
	0x43, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4e,
	0x4f, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x10, 0x02, 0x22, 0x7e, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x69, 0x64, 0x6c, 0x65, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x6f, 0x73, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x4f, 0x73, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd9, 0x01, 0x0a, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xda, 0x01, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa8,
	0x03, 0x0a, 0x10, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x54, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x0e, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x34, 0x0a, 0x0a, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x48, 0x65, 0x6c, 0x70, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x09, 0x68, 0x65, 0x6c, 0x70,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x0b, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x44, 0x41, 0x50, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x22, 0xa8, 0x03, 0x0a, 0x12, 0x41, 0x77,
	0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x5b, 0x0a, 0x08, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x56, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x52, 0x08, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x12, 0x36, 0x0a,
	0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x56, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x41, 0x77, 0x73,
	0x44, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x05, 0x64, 0x69, 0x73,
	0x6b, 0x73, 0x1a, 0x67, 0x0a, 0x0e, 0x41, 0x77, 0x73, 0x44, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x62, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x69, 0x7a, 0x65, 0x47, 0x62, 0x22, 0x37, 0x0a, 0x08, 0x46,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x49, 0x52, 0x4d, 0x57,
	0x41, 0x52, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x46, 0x49, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x49,
	0x4f, 0x53, 0x10, 0x02, 0x22, 0x7e, 0x0a, 0x1a, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x54, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x66, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d,
	0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x5b, 0x0a, 0x11,
	0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x4a, 0x6f, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x46, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x4a, 0x6f, 0x62,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x1c, 0x44, 0x61,
	0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x56, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x76,
	0x0a, 0x16, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x5f, 0x0a, 0x13, 0x43, 0x75, 0x74, 0x6f, 0x76, 0x65,
	0x72, 0x4a, 0x6f, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x74, 0x6f, 0x76, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x68, 0x0a, 0x0f, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0x72, 0x0a, 0x14, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x6d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x6d, 0x48, 0x00, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2a, 0xb1, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x28, 0x0a, 0x24, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e,
	0x45, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4d,
	0x50, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x4b,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x01,
	0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x47, 0x49,
	0x4e, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x53, 0x44,
	0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x4e,
	0x47, 0x49, 0x4e, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x8f, 0x01, 0x0a, 0x18, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54,
	0x45, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12,
	0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e,
	0x45, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x41, 0x59, 0x47, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45,
	0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x59, 0x4f, 0x4c, 0x10, 0x02, 0x2a, 0x8e, 0x01, 0x0a, 0x17,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x42, 0x6f, 0x6f,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x26, 0x43, 0x4f, 0x4d, 0x50, 0x55,
	0x54, 0x45, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x45,
	0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x46, 0x49, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4d, 0x50, 0x55,
	0x54, 0x45, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x4f, 0x53, 0x10, 0x02, 0x42, 0x7c, 0xaa, 0x02,
	0x2b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x56, 0x4d,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x22, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x5c, 0x56, 0x4d, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x56,
	0x31, 0xea, 0x02, 0x26, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x56, 0x4d, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_cloud_vmmigration_v1_data_proto_rawDescOnce sync.Once
	file_cloud_vmmigration_v1_data_proto_rawDescData = file_cloud_vmmigration_v1_data_proto_rawDesc
)

func file_cloud_vmmigration_v1_data_proto_rawDescGZIP() []byte {
	file_cloud_vmmigration_v1_data_proto_rawDescOnce.Do(func() {
		file_cloud_vmmigration_v1_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_vmmigration_v1_data_proto_rawDescData)
	})
	return file_cloud_vmmigration_v1_data_proto_rawDescData
}

var file_cloud_vmmigration_v1_data_proto_enumTypes = make([]protoimpl.EnumInfo, 20)
var file_cloud_vmmigration_v1_data_proto_msgTypes = make([]protoimpl.MessageInfo, 56)
var file_cloud_vmmigration_v1_data_proto_goTypes = []interface{}{
	(ComputeEngineDiskType)(0),                    // 0: google.events.cloud.vmmigration.v1.ComputeEngineDiskType
	(ComputeEngineLicenseType)(0),                 // 1: google.events.cloud.vmmigration.v1.ComputeEngineLicenseType
	(ComputeEngineBootOption)(0),                  // 2: google.events.cloud.vmmigration.v1.ComputeEngineBootOption
	(ReplicationCycle_State)(0),                   // 3: google.events.cloud.vmmigration.v1.ReplicationCycle.State
	(MigratingVm_State)(0),                        // 4: google.events.cloud.vmmigration.v1.MigratingVm.State
	(CloneJob_State)(0),                           // 5: google.events.cloud.vmmigration.v1.CloneJob.State
	(CutoverJob_State)(0),                         // 6: google.events.cloud.vmmigration.v1.CutoverJob.State
	(AwsSourceDetails_State)(0),                   // 7: google.events.cloud.vmmigration.v1.AwsSourceDetails.State
	(DatacenterConnector_State)(0),                // 8: google.events.cloud.vmmigration.v1.DatacenterConnector.State
	(UpgradeStatus_State)(0),                      // 9: google.events.cloud.vmmigration.v1.UpgradeStatus.State
	(VmwareVmDetails_PowerState)(0),               // 10: google.events.cloud.vmmigration.v1.VmwareVmDetails.PowerState
	(VmwareVmDetails_BootOption)(0),               // 11: google.events.cloud.vmmigration.v1.VmwareVmDetails.BootOption
	(UtilizationReport_State)(0),                  // 12: google.events.cloud.vmmigration.v1.UtilizationReport.State
	(UtilizationReport_TimeFrame)(0),              // 13: google.events.cloud.vmmigration.v1.UtilizationReport.TimeFrame
	(AppliedLicense_Type)(0),                      // 14: google.events.cloud.vmmigration.v1.AppliedLicense.Type
	(SchedulingNodeAffinity_Operator)(0),          // 15: google.events.cloud.vmmigration.v1.SchedulingNodeAffinity.Operator
	(ComputeScheduling_OnHostMaintenance)(0),      // 16: google.events.cloud.vmmigration.v1.ComputeScheduling.OnHostMaintenance
	(ComputeScheduling_RestartType)(0),            // 17: google.events.cloud.vmmigration.v1.ComputeScheduling.RestartType
	(MigrationWarning_WarningCode)(0),             // 18: google.events.cloud.vmmigration.v1.MigrationWarning.WarningCode
	(AwsSourceVmDetails_Firmware)(0),              // 19: google.events.cloud.vmmigration.v1.AwsSourceVmDetails.Firmware
	(*ReplicationCycle)(nil),                      // 20: google.events.cloud.vmmigration.v1.ReplicationCycle
	(*CycleStep)(nil),                             // 21: google.events.cloud.vmmigration.v1.CycleStep
	(*InitializingReplicationStep)(nil),           // 22: google.events.cloud.vmmigration.v1.InitializingReplicationStep
	(*ReplicatingStep)(nil),                       // 23: google.events.cloud.vmmigration.v1.ReplicatingStep
	(*PostProcessingStep)(nil),                    // 24: google.events.cloud.vmmigration.v1.PostProcessingStep
	(*ReplicationSync)(nil),                       // 25: google.events.cloud.vmmigration.v1.ReplicationSync
	(*MigratingVm)(nil),                           // 26: google.events.cloud.vmmigration.v1.MigratingVm
	(*CutoverForecast)(nil),                       // 27: google.events.cloud.vmmigration.v1.CutoverForecast
	(*CloneJob)(nil),                              // 28: google.events.cloud.vmmigration.v1.CloneJob
	(*CloneStep)(nil),                             // 29: google.events.cloud.vmmigration.v1.CloneStep
	(*AdaptingOSStep)(nil),                        // 30: google.events.cloud.vmmigration.v1.AdaptingOSStep
	(*PreparingVMDisksStep)(nil),                  // 31: google.events.cloud.vmmigration.v1.PreparingVMDisksStep
	(*InstantiatingMigratedVMStep)(nil),           // 32: google.events.cloud.vmmigration.v1.InstantiatingMigratedVMStep
	(*CutoverJob)(nil),                            // 33: google.events.cloud.vmmigration.v1.CutoverJob
	(*CutoverStep)(nil),                           // 34: google.events.cloud.vmmigration.v1.CutoverStep
	(*ShuttingDownSourceVMStep)(nil),              // 35: google.events.cloud.vmmigration.v1.ShuttingDownSourceVMStep
	(*Source)(nil),                                // 36: google.events.cloud.vmmigration.v1.Source
	(*VmwareSourceDetails)(nil),                   // 37: google.events.cloud.vmmigration.v1.VmwareSourceDetails
	(*AwsSourceDetails)(nil),                      // 38: google.events.cloud.vmmigration.v1.AwsSourceDetails
	(*DatacenterConnector)(nil),                   // 39: google.events.cloud.vmmigration.v1.DatacenterConnector
	(*UpgradeStatus)(nil),                         // 40: google.events.cloud.vmmigration.v1.UpgradeStatus
	(*AvailableUpdates)(nil),                      // 41: google.events.cloud.vmmigration.v1.AvailableUpdates
	(*ApplianceVersion)(nil),                      // 42: google.events.cloud.vmmigration.v1.ApplianceVersion
	(*VmwareVmDetails)(nil),                       // 43: google.events.cloud.vmmigration.v1.VmwareVmDetails
	(*UtilizationReport)(nil),                     // 44: google.events.cloud.vmmigration.v1.UtilizationReport
	(*VmUtilizationInfo)(nil),                     // 45: google.events.cloud.vmmigration.v1.VmUtilizationInfo
	(*VmUtilizationMetrics)(nil),                  // 46: google.events.cloud.vmmigration.v1.VmUtilizationMetrics
	(*ComputeEngineTargetDefaults)(nil),           // 47: google.events.cloud.vmmigration.v1.ComputeEngineTargetDefaults
	(*ComputeEngineTargetDetails)(nil),            // 48: google.events.cloud.vmmigration.v1.ComputeEngineTargetDetails
	(*NetworkInterface)(nil),                      // 49: google.events.cloud.vmmigration.v1.NetworkInterface
	(*AppliedLicense)(nil),                        // 50: google.events.cloud.vmmigration.v1.AppliedLicense
	(*SchedulingNodeAffinity)(nil),                // 51: google.events.cloud.vmmigration.v1.SchedulingNodeAffinity
	(*ComputeScheduling)(nil),                     // 52: google.events.cloud.vmmigration.v1.ComputeScheduling
	(*SchedulePolicy)(nil),                        // 53: google.events.cloud.vmmigration.v1.SchedulePolicy
	(*TargetProject)(nil),                         // 54: google.events.cloud.vmmigration.v1.TargetProject
	(*Group)(nil),                                 // 55: google.events.cloud.vmmigration.v1.Group
	(*MigrationWarning)(nil),                      // 56: google.events.cloud.vmmigration.v1.MigrationWarning
	(*AwsSourceVmDetails)(nil),                    // 57: google.events.cloud.vmmigration.v1.AwsSourceVmDetails
	(*UtilizationReportEventData)(nil),            // 58: google.events.cloud.vmmigration.v1.UtilizationReportEventData
	(*GroupEventData)(nil),                        // 59: google.events.cloud.vmmigration.v1.GroupEventData
	(*CloneJobEventData)(nil),                     // 60: google.events.cloud.vmmigration.v1.CloneJobEventData
	(*DatacenterConnectorEventData)(nil),          // 61: google.events.cloud.vmmigration.v1.DatacenterConnectorEventData
	(*TargetProjectEventData)(nil),                // 62: google.events.cloud.vmmigration.v1.TargetProjectEventData
	(*CutoverJobEventData)(nil),                   // 63: google.events.cloud.vmmigration.v1.CutoverJobEventData
	(*SourceEventData)(nil),                       // 64: google.events.cloud.vmmigration.v1.SourceEventData
	(*MigratingVmEventData)(nil),                  // 65: google.events.cloud.vmmigration.v1.MigratingVmEventData
	nil,                                           // 66: google.events.cloud.vmmigration.v1.MigratingVm.LabelsEntry
	nil,                                           // 67: google.events.cloud.vmmigration.v1.Source.LabelsEntry
	(*AwsSourceDetails_AccessKeyCredentials)(nil), // 68: google.events.cloud.vmmigration.v1.AwsSourceDetails.AccessKeyCredentials
	(*AwsSourceDetails_Tag)(nil),                  // 69: google.events.cloud.vmmigration.v1.AwsSourceDetails.Tag
	nil,                                           // 70: google.events.cloud.vmmigration.v1.AwsSourceDetails.MigrationResourcesUserTagsEntry
	nil,                                           // 71: google.events.cloud.vmmigration.v1.ComputeEngineTargetDefaults.LabelsEntry
	nil,                                           // 72: google.events.cloud.vmmigration.v1.ComputeEngineTargetDefaults.MetadataEntry
	nil,                                           // 73: google.events.cloud.vmmigration.v1.ComputeEngineTargetDetails.LabelsEntry
	nil,                                           // 74: google.events.cloud.vmmigration.v1.ComputeEngineTargetDetails.MetadataEntry
	(*AwsSourceVmDetails_AwsDiskDetails)(nil),     // 75: google.events.cloud.vmmigration.v1.AwsSourceVmDetails.AwsDiskDetails
	(*timestamppb.Timestamp)(nil),                 // 76: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                   // 77: google.protobuf.Duration
	(*status.Status)(nil),                         // 78: google.rpc.Status
	(*errdetails.LocalizedMessage)(nil),           // 79: google.rpc.LocalizedMessage
	(*errdetails.Help_Link)(nil),                  // 80: google.rpc.Help.Link
}
var file_cloud_vmmigration_v1_data_proto_depIdxs = []int32{
	76,  // 0: google.events.cloud.vmmigration.v1.ReplicationCycle.start_time:type_name -> google.protobuf.Timestamp
	76,  // 1: google.events.cloud.vmmigration.v1.ReplicationCycle.end_time:type_name -> google.protobuf.Timestamp
	77,  // 2: google.events.cloud.vmmigration.v1.ReplicationCycle.total_pause_duration:type_name -> google.protobuf.Duration
	21,  // 3: google.events.cloud.vmmigration.v1.ReplicationCycle.steps:type_name -> google.events.cloud.vmmigration.v1.CycleStep
	3,   // 4: google.events.cloud.vmmigration.v1.ReplicationCycle.state:type_name -> google.events.cloud.vmmigration.v1.ReplicationCycle.State
	78,  // 5: google.events.cloud.vmmigration.v1.ReplicationCycle.error:type_name -> google.rpc.Status
	56,  // 6: google.events.cloud.vmmigration.v1.ReplicationCycle.warnings:type_name -> google.events.cloud.vmmigration.v1.MigrationWarning
	22,  // 7: google.events.cloud.vmmigration.v1.CycleStep.initializing_replication:type_name -> google.events.cloud.vmmigration.v1.InitializingReplicationStep
	23,  // 8: google.events.cloud.vmmigration.v1.CycleStep.replicating:type_name -> google.events.cloud.vmmigration.v1.ReplicatingStep
	24,  // 9: google.events.cloud.vmmigration.v1.CycleStep.post_processing:type_name -> google.events.cloud.vmmigration.v1.PostProcessingStep
	76,  // 10: google.events.cloud.vmmigration.v1.CycleStep.start_time:type_name -> google.protobuf.Timestamp
	76,  // 11: google.events.cloud.vmmigration.v1.CycleStep.end_time:type_name -> google.protobuf.Timestamp
	76,  // 12: google.events.cloud.vmmigration.v1.ReplicationSync.last_sync_time:type_name -> google.protobuf.Timestamp
	47,  // 13: google.events.cloud.vmmigration.v1.MigratingVm.compute_engine_target_defaults:type_name -> google.events.cloud.vmmigration.v1.ComputeEngineTargetDefaults
	57,  // 14: google.events.cloud.vmmigration.v1.MigratingVm.aws_source_vm_details:type_name -> google.events.cloud.vmmigration.v1.AwsSourceVmDetails
	53,  // 15: google.events.cloud.vmmigration.v1.MigratingVm.policy:type_name -> google.events.cloud.vmmigration.v1.SchedulePolicy
	76,  // 16: google.events.cloud.vmmigration.v1.MigratingVm.create_time:type_name -> google.protobuf.Timestamp
	76,  // 17: google.events.cloud.vmmigration.v1.MigratingVm.update_time:type_name -> google.protobuf.Timestamp
	25,  // 18: google.events.cloud.vmmigration.v1.MigratingVm.last_sync:type_name -> google.events.cloud.vmmigration.v1.ReplicationSync
	4,   // 19: google.events.cloud.vmmigration.v1.MigratingVm.state:type_name -> google.events.cloud.vmmigration.v1.MigratingVm.State
	76,  // 20: google.events.cloud.vmmigration.v1.MigratingVm.state_time:type_name -> google.protobuf.Timestamp
	20,  // 21: google.events.cloud.vmmigration.v1.MigratingVm.current_sync_info:type_name -> google.events.cloud.vmmigration.v1.ReplicationCycle
	20,  // 22: google.events.cloud.vmmigration.v1.MigratingVm.last_replication_cycle:type_name -> google.events.cloud.vmmigration.v1.ReplicationCycle
	66,  // 23: google.events.cloud.vmmigration.v1.MigratingVm.labels:type_name -> google.events.cloud.vmmigration.v1.MigratingVm.LabelsEntry
	28,  // 24: google.events.cloud.vmmigration.v1.MigratingVm.recent_clone_jobs:type_name -> google.events.cloud.vmmigration.v1.CloneJob
	78,  // 25: google.events.cloud.vmmigration.v1.MigratingVm.error:type_name -> google.rpc.Status
	33,  // 26: google.events.cloud.vmmigration.v1.MigratingVm.recent_cutover_jobs:type_name -> google.events.cloud.vmmigration.v1.CutoverJob
	27,  // 27: google.events.cloud.vmmigration.v1.MigratingVm.cutover_forecast:type_name -> google.events.cloud.vmmigration.v1.CutoverForecast
	77,  // 28: google.events.cloud.vmmigration.v1.CutoverForecast.estimated_cutover_job_duration:type_name -> google.protobuf.Duration
	48,  // 29: google.events.cloud.vmmigration.v1.CloneJob.compute_engine_target_details:type_name -> google.events.cloud.vmmigration.v1.ComputeEngineTargetDetails
	76,  // 30: google.events.cloud.vmmigration.v1.CloneJob.create_time:type_name -> google.protobuf.Timestamp
	76,  // 31: google.events.cloud.vmmigration.v1.CloneJob.end_time:type_name -> google.protobuf.Timestamp
	5,   // 32: google.events.cloud.vmmigration.v1.CloneJob.state:type_name -> google.events.cloud.vmmigration.v1.CloneJob.State
	76,  // 33: google.events.cloud.vmmigration.v1.CloneJob.state_time:type_name -> google.protobuf.Timestamp
	78,  // 34: google.events.cloud.vmmigration.v1.CloneJob.error:type_name -> google.rpc.Status
	29,  // 35: google.events.cloud.vmmigration.v1.CloneJob.steps:type_name -> google.events.cloud.vmmigration.v1.CloneStep
	30,  // 36: google.events.cloud.vmmigration.v1.CloneStep.adapting_os:type_name -> google.events.cloud.vmmigration.v1.AdaptingOSStep
	31,  // 37: google.events.cloud.vmmigration.v1.CloneStep.preparing_vm_disks:type_name -> google.events.cloud.vmmigration.v1.PreparingVMDisksStep
	32,  // 38: google.events.cloud.vmmigration.v1.CloneStep.instantiating_migrated_vm:type_name -> google.events.cloud.vmmigration.v1.InstantiatingMigratedVMStep
	76,  // 39: google.events.cloud.vmmigration.v1.CloneStep.start_time:type_name -> google.protobuf.Timestamp
	76,  // 40: google.events.cloud.vmmigration.v1.CloneStep.end_time:type_name -> google.protobuf.Timestamp
	48,  // 41: google.events.cloud.vmmigration.v1.CutoverJob.compute_engine_target_details:type_name -> google.events.cloud.vmmigration.v1.ComputeEngineTargetDetails
	76,  // 42: google.events.cloud.vmmigration.v1.CutoverJob.create_time:type_name -> google.protobuf.Timestamp
	76,  // 43: google.events.cloud.vmmigration.v1.CutoverJob.end_time:type_name -> google.protobuf.Timestamp
	6,   // 44: google.events.cloud.vmmigration.v1.CutoverJob.state:type_name -> google.events.cloud.vmmigration.v1.CutoverJob.State
	76,  // 45: google.events.cloud.vmmigration.v1.CutoverJob.state_time:type_name -> google.protobuf.Timestamp
	78,  // 46: google.events.cloud.vmmigration.v1.CutoverJob.error:type_name -> google.rpc.Status
	34,  // 47: google.events.cloud.vmmigration.v1.CutoverJob.steps:type_name -> google.events.cloud.vmmigration.v1.CutoverStep
	20,  // 48: google.events.cloud.vmmigration.v1.CutoverStep.previous_replication_cycle:type_name -> google.events.cloud.vmmigration.v1.ReplicationCycle
	35,  // 49: google.events.cloud.vmmigration.v1.CutoverStep.shutting_down_source_vm:type_name -> google.events.cloud.vmmigration.v1.ShuttingDownSourceVMStep
	20,  // 50: google.events.cloud.vmmigration.v1.CutoverStep.final_sync:type_name -> google.events.cloud.vmmigration.v1.ReplicationCycle
	31,  // 51: google.events.cloud.vmmigration.v1.CutoverStep.preparing_vm_disks:type_name -> google.events.cloud.vmmigration.v1.PreparingVMDisksStep
	32,  // 52: google.events.cloud.vmmigration.v1.CutoverStep.instantiating_migrated_vm:type_name -> google.events.cloud.vmmigration.v1.InstantiatingMigratedVMStep
	76,  // 53: google.events.cloud.vmmigration.v1.CutoverStep.start_time:type_name -> google.protobuf.Timestamp
	76,  // 54: google.events.cloud.vmmigration.v1.CutoverStep.end_time:type_name -> google.protobuf.Timestamp
	37,  // 55: google.events.cloud.vmmigration.v1.Source.vmware:type_name -> google.events.cloud.vmmigration.v1.VmwareSourceDetails
	38,  // 56: google.events.cloud.vmmigration.v1.Source.aws:type_name -> google.events.cloud.vmmigration.v1.AwsSourceDetails
	76,  // 57: google.events.cloud.vmmigration.v1.Source.create_time:type_name -> google.protobuf.Timestamp
	76,  // 58: google.events.cloud.vmmigration.v1.Source.update_time:type_name -> google.protobuf.Timestamp
	67,  // 59: google.events.cloud.vmmigration.v1.Source.labels:type_name -> google.events.cloud.vmmigration.v1.Source.LabelsEntry
	68,  // 60: google.events.cloud.vmmigration.v1.AwsSourceDetails.access_key_creds:type_name -> google.events.cloud.vmmigration.v1.AwsSourceDetails.AccessKeyCredentials
	7,   // 61: google.events.cloud.vmmigration.v1.AwsSourceDetails.state:type_name -> google.events.cloud.vmmigration.v1.AwsSourceDetails.State
	78,  // 62: google.events.cloud.vmmigration.v1.AwsSourceDetails.error:type_name -> google.rpc.Status
	69,  // 63: google.events.cloud.vmmigration.v1.AwsSourceDetails.inventory_tag_list:type_name -> google.events.cloud.vmmigration.v1.AwsSourceDetails.Tag
	70,  // 64: google.events.cloud.vmmigration.v1.AwsSourceDetails.migration_resources_user_tags:type_name -> google.events.cloud.vmmigration.v1.AwsSourceDetails.MigrationResourcesUserTagsEntry
	76,  // 65: google.events.cloud.vmmigration.v1.DatacenterConnector.create_time:type_name -> google.protobuf.Timestamp
	76,  // 66: google.events.cloud.vmmigration.v1.DatacenterConnector.update_time:type_name -> google.protobuf.Timestamp
	8,   // 67: google.events.cloud.vmmigration.v1.DatacenterConnector.state:type_name -> google.events.cloud.vmmigration.v1.DatacenterConnector.State
	76,  // 68: google.events.cloud.vmmigration.v1.DatacenterConnector.state_time:type_name -> google.protobuf.Timestamp
	78,  // 69: google.events.cloud.vmmigration.v1.DatacenterConnector.error:type_name -> google.rpc.Status
	41,  // 70: google.events.cloud.vmmigration.v1.DatacenterConnector.available_versions:type_name -> google.events.cloud.vmmigration.v1.AvailableUpdates
	40,  // 71: google.events.cloud.vmmigration.v1.DatacenterConnector.upgrade_status:type_name -> google.events.cloud.vmmigration.v1.UpgradeStatus
	9,   // 72: google.events.cloud.vmmigration.v1.UpgradeStatus.state:type_name -> google.events.cloud.vmmigration.v1.UpgradeStatus.State
	78,  // 73: google.events.cloud.vmmigration.v1.UpgradeStatus.error:type_name -> google.rpc.Status
	76,  // 74: google.events.cloud.vmmigration.v1.UpgradeStatus.start_time:type_name -> google.protobuf.Timestamp
	42,  // 75: google.events.cloud.vmmigration.v1.AvailableUpdates.new_deployable_appliance:type_name -> google.events.cloud.vmmigration.v1.ApplianceVersion
	42,  // 76: google.events.cloud.vmmigration.v1.AvailableUpdates.in_place_update:type_name -> google.events.cloud.vmmigration.v1.ApplianceVersion
	10,  // 77: google.events.cloud.vmmigration.v1.VmwareVmDetails.power_state:type_name -> google.events.cloud.vmmigration.v1.VmwareVmDetails.PowerState
	11,  // 78: google.events.cloud.vmmigration.v1.VmwareVmDetails.boot_option:type_name -> google.events.cloud.vmmigration.v1.VmwareVmDetails.BootOption
	12,  // 79: google.events.cloud.vmmigration.v1.UtilizationReport.state:type_name -> google.events.cloud.vmmigration.v1.UtilizationReport.State
	76,  // 80: google.events.cloud.vmmigration.v1.UtilizationReport.state_time:type_name -> google.protobuf.Timestamp
	78,  // 81: google.events.cloud.vmmigration.v1.UtilizationReport.error:type_name -> google.rpc.Status
	76,  // 82: google.events.cloud.vmmigration.v1.UtilizationReport.create_time:type_name -> google.protobuf.Timestamp
	13,  // 83: google.events.cloud.vmmigration.v1.UtilizationReport.time_frame:type_name -> google.events.cloud.vmmigration.v1.UtilizationReport.TimeFrame
	76,  // 84: google.events.cloud.vmmigration.v1.UtilizationReport.frame_end_time:type_name -> google.protobuf.Timestamp
	45,  // 85: google.events.cloud.vmmigration.v1.UtilizationReport.vms:type_name -> google.events.cloud.vmmigration.v1.VmUtilizationInfo
	43,  // 86: google.events.cloud.vmmigration.v1.VmUtilizationInfo.vmware_vm_details:type_name -> google.events.cloud.vmmigration.v1.VmwareVmDetails
	46,  // 87: google.events.cloud.vmmigration.v1.VmUtilizationInfo.utilization:type_name -> google.events.cloud.vmmigration.v1.VmUtilizationMetrics
	49,  // 88: google.events.cloud.vmmigration.v1.ComputeEngineTargetDefaults.network_interfaces:type_name -> google.events.cloud.vmmigration.v1.NetworkInterface
	0,   // 89: google.events.cloud.vmmigration.v1.ComputeEngineTargetDefaults.disk_type:type_name -> google.events.cloud.vmmigration.v1.ComputeEngineDiskType
	71,  // 90: google.events.cloud.vmmigration.v1.ComputeEngineTargetDefaults.labels:type_name -> google.events.cloud.vmmigration.v1.ComputeEngineTargetDefaults.LabelsEntry
	1,   // 91: google.events.cloud.vmmigration.v1.ComputeEngineTargetDefaults.license_type:type_name -> google.events.cloud.vmmigration.v1.ComputeEngineLicenseType
	50,  // 92: google.events.cloud.vmmigration.v1.ComputeEngineTargetDefaults.applied_license:type_name -> google.events.cloud.vmmigration.v1.AppliedLicense
	52,  // 93: google.events.cloud.vmmigration.v1.ComputeEngineTargetDefaults.compute_scheduling:type_name -> google.events.cloud.vmmigration.v1.ComputeScheduling
	2,   // 94: google.events.cloud.vmmigration.v1.ComputeEngineTargetDefaults.boot_option:type_name -> google.events.cloud.vmmigration.v1.ComputeEngineBootOption
	72,  // 95: google.events.cloud.vmmigration.v1.ComputeEngineTargetDefaults.metadata:type_name -> google.events.cloud.vmmigration.v1.ComputeEngineTargetDefaults.MetadataEntry
	49,  // 96: google.events.cloud.vmmigration.v1.ComputeEngineTargetDetails.network_interfaces:type_name -> google.events.cloud.vmmigration.v1.NetworkInterface
	0,   // 97: google.events.cloud.vmmigration.v1.ComputeEngineTargetDetails.disk_type:type_name -> google.events.cloud.vmmigration.v1.ComputeEngineDiskType
	73,  // 98: google.events.cloud.vmmigration.v1.ComputeEngineTargetDetails.labels:type_name -> google.events.cloud.vmmigration.v1.ComputeEngineTargetDetails.LabelsEntry
	1,   // 99: google.events.cloud.vmmigration.v1.ComputeEngineTargetDetails.license_type:type_name -> google.events.cloud.vmmigration.v1.ComputeEngineLicenseType
	50,  // 100: google.events.cloud.vmmigration.v1.ComputeEngineTargetDetails.applied_license:type_name -> google.events.cloud.vmmigration.v1.AppliedLicense
	52,  // 101: google.events.cloud.vmmigration.v1.ComputeEngineTargetDetails.compute_scheduling:type_name -> google.events.cloud.vmmigration.v1.ComputeScheduling
	2,   // 102: google.events.cloud.vmmigration.v1.ComputeEngineTargetDetails.boot_option:type_name -> google.events.cloud.vmmigration.v1.ComputeEngineBootOption
	74,  // 103: google.events.cloud.vmmigration.v1.ComputeEngineTargetDetails.metadata:type_name -> google.events.cloud.vmmigration.v1.ComputeEngineTargetDetails.MetadataEntry
	14,  // 104: google.events.cloud.vmmigration.v1.AppliedLicense.type:type_name -> google.events.cloud.vmmigration.v1.AppliedLicense.Type
	15,  // 105: google.events.cloud.vmmigration.v1.SchedulingNodeAffinity.operator:type_name -> google.events.cloud.vmmigration.v1.SchedulingNodeAffinity.Operator
	16,  // 106: google.events.cloud.vmmigration.v1.ComputeScheduling.on_host_maintenance:type_name -> google.events.cloud.vmmigration.v1.ComputeScheduling.OnHostMaintenance
	17,  // 107: google.events.cloud.vmmigration.v1.ComputeScheduling.restart_type:type_name -> google.events.cloud.vmmigration.v1.ComputeScheduling.RestartType
	51,  // 108: google.events.cloud.vmmigration.v1.ComputeScheduling.node_affinities:type_name -> google.events.cloud.vmmigration.v1.SchedulingNodeAffinity
	77,  // 109: google.events.cloud.vmmigration.v1.SchedulePolicy.idle_duration:type_name -> google.protobuf.Duration
	76,  // 110: google.events.cloud.vmmigration.v1.TargetProject.create_time:type_name -> google.protobuf.Timestamp
	76,  // 111: google.events.cloud.vmmigration.v1.TargetProject.update_time:type_name -> google.protobuf.Timestamp
	76,  // 112: google.events.cloud.vmmigration.v1.Group.create_time:type_name -> google.protobuf.Timestamp
	76,  // 113: google.events.cloud.vmmigration.v1.Group.update_time:type_name -> google.protobuf.Timestamp
	18,  // 114: google.events.cloud.vmmigration.v1.MigrationWarning.code:type_name -> google.events.cloud.vmmigration.v1.MigrationWarning.WarningCode
	79,  // 115: google.events.cloud.vmmigration.v1.MigrationWarning.warning_message:type_name -> google.rpc.LocalizedMessage
	79,  // 116: google.events.cloud.vmmigration.v1.MigrationWarning.action_item:type_name -> google.rpc.LocalizedMessage
	80,  // 117: google.events.cloud.vmmigration.v1.MigrationWarning.help_links:type_name -> google.rpc.Help.Link
	76,  // 118: google.events.cloud.vmmigration.v1.MigrationWarning.warning_time:type_name -> google.protobuf.Timestamp
	19,  // 119: google.events.cloud.vmmigration.v1.AwsSourceVmDetails.firmware:type_name -> google.events.cloud.vmmigration.v1.AwsSourceVmDetails.Firmware
	75,  // 120: google.events.cloud.vmmigration.v1.AwsSourceVmDetails.disks:type_name -> google.events.cloud.vmmigration.v1.AwsSourceVmDetails.AwsDiskDetails
	44,  // 121: google.events.cloud.vmmigration.v1.UtilizationReportEventData.payload:type_name -> google.events.cloud.vmmigration.v1.UtilizationReport
	55,  // 122: google.events.cloud.vmmigration.v1.GroupEventData.payload:type_name -> google.events.cloud.vmmigration.v1.Group
	28,  // 123: google.events.cloud.vmmigration.v1.CloneJobEventData.payload:type_name -> google.events.cloud.vmmigration.v1.CloneJob
	39,  // 124: google.events.cloud.vmmigration.v1.DatacenterConnectorEventData.payload:type_name -> google.events.cloud.vmmigration.v1.DatacenterConnector
	54,  // 125: google.events.cloud.vmmigration.v1.TargetProjectEventData.payload:type_name -> google.events.cloud.vmmigration.v1.TargetProject
	33,  // 126: google.events.cloud.vmmigration.v1.CutoverJobEventData.payload:type_name -> google.events.cloud.vmmigration.v1.CutoverJob
	36,  // 127: google.events.cloud.vmmigration.v1.SourceEventData.payload:type_name -> google.events.cloud.vmmigration.v1.Source
	26,  // 128: google.events.cloud.vmmigration.v1.MigratingVmEventData.payload:type_name -> google.events.cloud.vmmigration.v1.MigratingVm
	129, // [129:129] is the sub-list for method output_type
	129, // [129:129] is the sub-list for method input_type
	129, // [129:129] is the sub-list for extension type_name
	129, // [129:129] is the sub-list for extension extendee
	0,   // [0:129] is the sub-list for field type_name
}

func init() { file_cloud_vmmigration_v1_data_proto_init() }
func file_cloud_vmmigration_v1_data_proto_init() {
	if File_cloud_vmmigration_v1_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloud_vmmigration_v1_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicationCycle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CycleStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializingReplicationStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicatingStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostProcessingStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicationSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigratingVm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CutoverForecast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdaptingOSStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreparingVMDisksStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstantiatingMigratedVMStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CutoverJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CutoverStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShuttingDownSourceVMStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VmwareSourceDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsSourceDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatacenterConnector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableUpdates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplianceVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VmwareVmDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtilizationReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VmUtilizationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VmUtilizationMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeEngineTargetDefaults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeEngineTargetDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppliedLicense); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulingNodeAffinity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeScheduling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationWarning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsSourceVmDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtilizationReportEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneJobEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatacenterConnectorEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetProjectEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CutoverJobEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigratingVmEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsSourceDetails_AccessKeyCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsSourceDetails_Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_vmmigration_v1_data_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsSourceVmDetails_AwsDiskDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cloud_vmmigration_v1_data_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*CycleStep_InitializingReplication)(nil),
		(*CycleStep_Replicating)(nil),
		(*CycleStep_PostProcessing)(nil),
	}
	file_cloud_vmmigration_v1_data_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*MigratingVm_ComputeEngineTargetDefaults)(nil),
		(*MigratingVm_AwsSourceVmDetails)(nil),
	}
	file_cloud_vmmigration_v1_data_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*CloneJob_ComputeEngineTargetDetails)(nil),
	}
	file_cloud_vmmigration_v1_data_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*CloneStep_AdaptingOs)(nil),
		(*CloneStep_PreparingVmDisks)(nil),
		(*CloneStep_InstantiatingMigratedVm)(nil),
	}
	file_cloud_vmmigration_v1_data_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*CutoverJob_ComputeEngineTargetDetails)(nil),
	}
	file_cloud_vmmigration_v1_data_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*CutoverStep_PreviousReplicationCycle)(nil),
		(*CutoverStep_ShuttingDownSourceVm)(nil),
		(*CutoverStep_FinalSync)(nil),
		(*CutoverStep_PreparingVmDisks)(nil),
		(*CutoverStep_InstantiatingMigratedVm)(nil),
	}
	file_cloud_vmmigration_v1_data_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*Source_Vmware)(nil),
		(*Source_Aws)(nil),
	}
	file_cloud_vmmigration_v1_data_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*AwsSourceDetails_AccessKeyCreds)(nil),
	}
	file_cloud_vmmigration_v1_data_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*VmUtilizationInfo_VmwareVmDetails)(nil),
	}
	file_cloud_vmmigration_v1_data_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_cloud_vmmigration_v1_data_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_cloud_vmmigration_v1_data_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_cloud_vmmigration_v1_data_proto_msgTypes[42].OneofWrappers = []interface{}{}
	file_cloud_vmmigration_v1_data_proto_msgTypes[44].OneofWrappers = []interface{}{}
	file_cloud_vmmigration_v1_data_proto_msgTypes[45].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_vmmigration_v1_data_proto_rawDesc,
			NumEnums:      20,
			NumMessages:   56,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_vmmigration_v1_data_proto_goTypes,
		DependencyIndexes: file_cloud_vmmigration_v1_data_proto_depIdxs,
		EnumInfos:         file_cloud_vmmigration_v1_data_proto_enumTypes,
		MessageInfos:      file_cloud_vmmigration_v1_data_proto_msgTypes,
	}.Build()
	File_cloud_vmmigration_v1_data_proto = out.File
	file_cloud_vmmigration_v1_data_proto_rawDesc = nil
	file_cloud_vmmigration_v1_data_proto_goTypes = nil
	file_cloud_vmmigration_v1_data_proto_depIdxs = nil
}
