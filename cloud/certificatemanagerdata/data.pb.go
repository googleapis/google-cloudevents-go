// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.6
// source: cloud/certificatemanager/v1/data.proto

package certificatemanagerdata

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Defines set of serving states associated with a resource.
type ServingState int32

const (
	// The status is undefined.
	ServingState_SERVING_STATE_UNSPECIFIED ServingState = 0
	// The configuration is serving.
	ServingState_ACTIVE ServingState = 1
	// Update is in progress. Some frontends may serve this configuration.
	ServingState_PENDING ServingState = 2
)

// Enum value maps for ServingState.
var (
	ServingState_name = map[int32]string{
		0: "SERVING_STATE_UNSPECIFIED",
		1: "ACTIVE",
		2: "PENDING",
	}
	ServingState_value = map[string]int32{
		"SERVING_STATE_UNSPECIFIED": 0,
		"ACTIVE":                    1,
		"PENDING":                   2,
	}
)

func (x ServingState) Enum() *ServingState {
	p := new(ServingState)
	*p = x
	return p
}

func (x ServingState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServingState) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_certificatemanager_v1_data_proto_enumTypes[0].Descriptor()
}

func (ServingState) Type() protoreflect.EnumType {
	return &file_cloud_certificatemanager_v1_data_proto_enumTypes[0]
}

func (x ServingState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServingState.Descriptor instead.
func (ServingState) EnumDescriptor() ([]byte, []int) {
	return file_cloud_certificatemanager_v1_data_proto_rawDescGZIP(), []int{0}
}

// The type of keypair to generate.
type CertificateIssuanceConfig_KeyAlgorithm int32

const (
	// Unspecified key algorithm.
	CertificateIssuanceConfig_KEY_ALGORITHM_UNSPECIFIED CertificateIssuanceConfig_KeyAlgorithm = 0
	// Specifies RSA with a 2048-bit modulus.
	CertificateIssuanceConfig_RSA_2048 CertificateIssuanceConfig_KeyAlgorithm = 1
	// Specifies ECDSA with curve P256.
	CertificateIssuanceConfig_ECDSA_P256 CertificateIssuanceConfig_KeyAlgorithm = 4
)

// Enum value maps for CertificateIssuanceConfig_KeyAlgorithm.
var (
	CertificateIssuanceConfig_KeyAlgorithm_name = map[int32]string{
		0: "KEY_ALGORITHM_UNSPECIFIED",
		1: "RSA_2048",
		4: "ECDSA_P256",
	}
	CertificateIssuanceConfig_KeyAlgorithm_value = map[string]int32{
		"KEY_ALGORITHM_UNSPECIFIED": 0,
		"RSA_2048":                  1,
		"ECDSA_P256":                4,
	}
)

func (x CertificateIssuanceConfig_KeyAlgorithm) Enum() *CertificateIssuanceConfig_KeyAlgorithm {
	p := new(CertificateIssuanceConfig_KeyAlgorithm)
	*p = x
	return p
}

func (x CertificateIssuanceConfig_KeyAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateIssuanceConfig_KeyAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_certificatemanager_v1_data_proto_enumTypes[1].Descriptor()
}

func (CertificateIssuanceConfig_KeyAlgorithm) Type() protoreflect.EnumType {
	return &file_cloud_certificatemanager_v1_data_proto_enumTypes[1]
}

func (x CertificateIssuanceConfig_KeyAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateIssuanceConfig_KeyAlgorithm.Descriptor instead.
func (CertificateIssuanceConfig_KeyAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_cloud_certificatemanager_v1_data_proto_rawDescGZIP(), []int{0, 0}
}

// Certificate scope.
type Certificate_Scope int32

const (
	// Certificates with default scope are served from core Google data centers.
	// If unsure, choose this option.
	Certificate_DEFAULT Certificate_Scope = 0
	// Certificates with scope EDGE_CACHE are special-purposed certificates,
	// served from non-core Google data centers.
	Certificate_EDGE_CACHE Certificate_Scope = 1
)

// Enum value maps for Certificate_Scope.
var (
	Certificate_Scope_name = map[int32]string{
		0: "DEFAULT",
		1: "EDGE_CACHE",
	}
	Certificate_Scope_value = map[string]int32{
		"DEFAULT":    0,
		"EDGE_CACHE": 1,
	}
)

func (x Certificate_Scope) Enum() *Certificate_Scope {
	p := new(Certificate_Scope)
	*p = x
	return p
}

func (x Certificate_Scope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Certificate_Scope) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_certificatemanager_v1_data_proto_enumTypes[2].Descriptor()
}

func (Certificate_Scope) Type() protoreflect.EnumType {
	return &file_cloud_certificatemanager_v1_data_proto_enumTypes[2]
}

func (x Certificate_Scope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Certificate_Scope.Descriptor instead.
func (Certificate_Scope) EnumDescriptor() ([]byte, []int) {
	return file_cloud_certificatemanager_v1_data_proto_rawDescGZIP(), []int{1, 0}
}

type Certificate_ManagedCertificate_State int32

const (
	Certificate_ManagedCertificate_STATE_UNSPECIFIED Certificate_ManagedCertificate_State = 0
	// Certificate Manager attempts to provision or renew the certificate.
	// If the process takes longer than expected, consult the
	// `provisioning_issue` field.
	Certificate_ManagedCertificate_PROVISIONING Certificate_ManagedCertificate_State = 1
	// Multiple certificate provisioning attempts failed and Certificate
	// Manager gave up. To try again, delete and create a new managed
	// Certificate resource.
	// For details see the `provisioning_issue` field.
	Certificate_ManagedCertificate_FAILED Certificate_ManagedCertificate_State = 2
	// The certificate management is working, and a certificate has been
	// provisioned.
	Certificate_ManagedCertificate_ACTIVE Certificate_ManagedCertificate_State = 3
)

// Enum value maps for Certificate_ManagedCertificate_State.
var (
	Certificate_ManagedCertificate_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "PROVISIONING",
		2: "FAILED",
		3: "ACTIVE",
	}
	Certificate_ManagedCertificate_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"PROVISIONING":      1,
		"FAILED":            2,
		"ACTIVE":            3,
	}
)

func (x Certificate_ManagedCertificate_State) Enum() *Certificate_ManagedCertificate_State {
	p := new(Certificate_ManagedCertificate_State)
	*p = x
	return p
}

func (x Certificate_ManagedCertificate_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Certificate_ManagedCertificate_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_certificatemanager_v1_data_proto_enumTypes[3].Descriptor()
}

func (Certificate_ManagedCertificate_State) Type() protoreflect.EnumType {
	return &file_cloud_certificatemanager_v1_data_proto_enumTypes[3]
}

func (x Certificate_ManagedCertificate_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Certificate_ManagedCertificate_State.Descriptor instead.
func (Certificate_ManagedCertificate_State) EnumDescriptor() ([]byte, []int) {
	return file_cloud_certificatemanager_v1_data_proto_rawDescGZIP(), []int{1, 1, 0}
}

type Certificate_ManagedCertificate_ProvisioningIssue_Reason int32

const (
	Certificate_ManagedCertificate_ProvisioningIssue_REASON_UNSPECIFIED Certificate_ManagedCertificate_ProvisioningIssue_Reason = 0
	// Certificate provisioning failed due to an issue with one or more of
	// the domains on the certificate.
	// For details of which domains failed, consult the
	// `authorization_attempt_info` field.
	Certificate_ManagedCertificate_ProvisioningIssue_AUTHORIZATION_ISSUE Certificate_ManagedCertificate_ProvisioningIssue_Reason = 1
	// Exceeded Certificate Authority quotas or internal rate limits of the
	// system. Provisioning may take longer to complete.
	Certificate_ManagedCertificate_ProvisioningIssue_RATE_LIMITED Certificate_ManagedCertificate_ProvisioningIssue_Reason = 2
)

// Enum value maps for Certificate_ManagedCertificate_ProvisioningIssue_Reason.
var (
	Certificate_ManagedCertificate_ProvisioningIssue_Reason_name = map[int32]string{
		0: "REASON_UNSPECIFIED",
		1: "AUTHORIZATION_ISSUE",
		2: "RATE_LIMITED",
	}
	Certificate_ManagedCertificate_ProvisioningIssue_Reason_value = map[string]int32{
		"REASON_UNSPECIFIED":  0,
		"AUTHORIZATION_ISSUE": 1,
		"RATE_LIMITED":        2,
	}
)

func (x Certificate_ManagedCertificate_ProvisioningIssue_Reason) Enum() *Certificate_ManagedCertificate_ProvisioningIssue_Reason {
	p := new(Certificate_ManagedCertificate_ProvisioningIssue_Reason)
	*p = x
	return p
}

func (x Certificate_ManagedCertificate_ProvisioningIssue_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Certificate_ManagedCertificate_ProvisioningIssue_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_certificatemanager_v1_data_proto_enumTypes[4].Descriptor()
}

func (Certificate_ManagedCertificate_ProvisioningIssue_Reason) Type() protoreflect.EnumType {
	return &file_cloud_certificatemanager_v1_data_proto_enumTypes[4]
}

func (x Certificate_ManagedCertificate_ProvisioningIssue_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Certificate_ManagedCertificate_ProvisioningIssue_Reason.Descriptor instead.
func (Certificate_ManagedCertificate_ProvisioningIssue_Reason) EnumDescriptor() ([]byte, []int) {
	return file_cloud_certificatemanager_v1_data_proto_rawDescGZIP(), []int{1, 1, 0, 0}
}

type Certificate_ManagedCertificate_AuthorizationAttemptInfo_State int32

const (
	Certificate_ManagedCertificate_AuthorizationAttemptInfo_STATE_UNSPECIFIED Certificate_ManagedCertificate_AuthorizationAttemptInfo_State = 0
	// Certificate provisioning for this domain is under way. GCP will
	// attempt to authorize the domain.
	Certificate_ManagedCertificate_AuthorizationAttemptInfo_AUTHORIZING Certificate_ManagedCertificate_AuthorizationAttemptInfo_State = 1
	// A managed certificate can be provisioned, no issues for this domain.
	Certificate_ManagedCertificate_AuthorizationAttemptInfo_AUTHORIZED Certificate_ManagedCertificate_AuthorizationAttemptInfo_State = 6
	// Attempt to authorize the domain failed. This prevents the Managed
	// Certificate from being issued.
	// See `failure_reason` and `details` fields for more information.
	Certificate_ManagedCertificate_AuthorizationAttemptInfo_FAILED Certificate_ManagedCertificate_AuthorizationAttemptInfo_State = 7
)

// Enum value maps for Certificate_ManagedCertificate_AuthorizationAttemptInfo_State.
var (
	Certificate_ManagedCertificate_AuthorizationAttemptInfo_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "AUTHORIZING",
		6: "AUTHORIZED",
		7: "FAILED",
	}
	Certificate_ManagedCertificate_AuthorizationAttemptInfo_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"AUTHORIZING":       1,
		"AUTHORIZED":        6,
		"FAILED":            7,
	}
)

func (x Certificate_ManagedCertificate_AuthorizationAttemptInfo_State) Enum() *Certificate_ManagedCertificate_AuthorizationAttemptInfo_State {
	p := new(Certificate_ManagedCertificate_AuthorizationAttemptInfo_State)
	*p = x
	return p
}

func (x Certificate_ManagedCertificate_AuthorizationAttemptInfo_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Certificate_ManagedCertificate_AuthorizationAttemptInfo_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_certificatemanager_v1_data_proto_enumTypes[5].Descriptor()
}

func (Certificate_ManagedCertificate_AuthorizationAttemptInfo_State) Type() protoreflect.EnumType {
	return &file_cloud_certificatemanager_v1_data_proto_enumTypes[5]
}

func (x Certificate_ManagedCertificate_AuthorizationAttemptInfo_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Certificate_ManagedCertificate_AuthorizationAttemptInfo_State.Descriptor instead.
func (Certificate_ManagedCertificate_AuthorizationAttemptInfo_State) EnumDescriptor() ([]byte, []int) {
	return file_cloud_certificatemanager_v1_data_proto_rawDescGZIP(), []int{1, 1, 1, 0}
}

type Certificate_ManagedCertificate_AuthorizationAttemptInfo_FailureReason int32

const (
	Certificate_ManagedCertificate_AuthorizationAttemptInfo_FAILURE_REASON_UNSPECIFIED Certificate_ManagedCertificate_AuthorizationAttemptInfo_FailureReason = 0
	// There was a problem with the user's DNS or load balancer
	// configuration for this domain.
	Certificate_ManagedCertificate_AuthorizationAttemptInfo_CONFIG Certificate_ManagedCertificate_AuthorizationAttemptInfo_FailureReason = 1
	// Certificate issuance forbidden by an explicit CAA record for the
	// domain or a failure to check CAA records for the domain.
	Certificate_ManagedCertificate_AuthorizationAttemptInfo_CAA Certificate_ManagedCertificate_AuthorizationAttemptInfo_FailureReason = 2
	// Reached a CA or internal rate-limit for the domain,
	// e.g. for certificates per top-level private domain.
	Certificate_ManagedCertificate_AuthorizationAttemptInfo_RATE_LIMITED Certificate_ManagedCertificate_AuthorizationAttemptInfo_FailureReason = 3
)

// Enum value maps for Certificate_ManagedCertificate_AuthorizationAttemptInfo_FailureReason.
var (
	Certificate_ManagedCertificate_AuthorizationAttemptInfo_FailureReason_name = map[int32]string{
		0: "FAILURE_REASON_UNSPECIFIED",
		1: "CONFIG",
		2: "CAA",
		3: "RATE_LIMITED",
	}
	Certificate_ManagedCertificate_AuthorizationAttemptInfo_FailureReason_value = map[string]int32{
		"FAILURE_REASON_UNSPECIFIED": 0,
		"CONFIG":                     1,
		"CAA":                        2,
		"RATE_LIMITED":               3,
	}
)

func (x Certificate_ManagedCertificate_AuthorizationAttemptInfo_FailureReason) Enum() *Certificate_ManagedCertificate_AuthorizationAttemptInfo_FailureReason {
	p := new(Certificate_ManagedCertificate_AuthorizationAttemptInfo_FailureReason)
	*p = x
	return p
}

func (x Certificate_ManagedCertificate_AuthorizationAttemptInfo_FailureReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Certificate_ManagedCertificate_AuthorizationAttemptInfo_FailureReason) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_certificatemanager_v1_data_proto_enumTypes[6].Descriptor()
}

func (Certificate_ManagedCertificate_AuthorizationAttemptInfo_FailureReason) Type() protoreflect.EnumType {
	return &file_cloud_certificatemanager_v1_data_proto_enumTypes[6]
}

func (x Certificate_ManagedCertificate_AuthorizationAttemptInfo_FailureReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Certificate_ManagedCertificate_AuthorizationAttemptInfo_FailureReason.Descriptor instead.
func (Certificate_ManagedCertificate_AuthorizationAttemptInfo_FailureReason) EnumDescriptor() ([]byte, []int) {
	return file_cloud_certificatemanager_v1_data_proto_rawDescGZIP(), []int{1, 1, 1, 1}
}

// Defines predefined cases other than SNI-hostname match when this
// configuration should be applied.
type CertificateMapEntry_Matcher int32

const (
	// A matcher has't been recognized.
	CertificateMapEntry_MATCHER_UNSPECIFIED CertificateMapEntry_Matcher = 0
	// A primary certificate that is served when SNI wasn't specified in the
	// request or SNI couldn't be found in the map.
	CertificateMapEntry_PRIMARY CertificateMapEntry_Matcher = 1
)

// Enum value maps for CertificateMapEntry_Matcher.
var (
	CertificateMapEntry_Matcher_name = map[int32]string{
		0: "MATCHER_UNSPECIFIED",
		1: "PRIMARY",
	}
	CertificateMapEntry_Matcher_value = map[string]int32{
		"MATCHER_UNSPECIFIED": 0,
		"PRIMARY":             1,
	}
)

func (x CertificateMapEntry_Matcher) Enum() *CertificateMapEntry_Matcher {
	p := new(CertificateMapEntry_Matcher)
	*p = x
	return p
}

func (x CertificateMapEntry_Matcher) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateMapEntry_Matcher) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_certificatemanager_v1_data_proto_enumTypes[7].Descriptor()
}

func (CertificateMapEntry_Matcher) Type() protoreflect.EnumType {
	return &file_cloud_certificatemanager_v1_data_proto_enumTypes[7]
}

func (x CertificateMapEntry_Matcher) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateMapEntry_Matcher.Descriptor instead.
func (CertificateMapEntry_Matcher) EnumDescriptor() ([]byte, []int) {
	return file_cloud_certificatemanager_v1_data_proto_rawDescGZIP(), []int{3, 0}
}

// CertificateIssuanceConfig specifies how to issue and manage a certificate.
type CertificateIssuanceConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A user-defined name of the certificate issuance config.
	// CertificateIssuanceConfig names must be unique globally and match pattern
	// `projects/*/locations/*/certificateIssuanceConfigs/*`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The creation timestamp of a CertificateIssuanceConfig.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The last update timestamp of a CertificateIssuanceConfig.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Set of labels associated with a CertificateIssuanceConfig.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// One or more paragraphs of text description of a CertificateIssuanceConfig.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Required. The CA that issues the workload certificate. It includes the CA
	// address, type, authentication to CA service, etc.
	CertificateAuthorityConfig *CertificateIssuanceConfig_CertificateAuthorityConfig `protobuf:"bytes,6,opt,name=certificate_authority_config,json=certificateAuthorityConfig,proto3" json:"certificate_authority_config,omitempty"`
	// Required. Workload certificate lifetime requested.
	Lifetime *durationpb.Duration `protobuf:"bytes,7,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
	// Required. Specifies the percentage of elapsed time of the certificate
	// lifetime to wait before renewing the certificate. Must be a number between
	// 1-99, inclusive.
	RotationWindowPercentage int32 `protobuf:"varint,8,opt,name=rotation_window_percentage,json=rotationWindowPercentage,proto3" json:"rotation_window_percentage,omitempty"`
	// Required. The key algorithm to use when generating the private key.
	KeyAlgorithm  CertificateIssuanceConfig_KeyAlgorithm `protobuf:"varint,9,opt,name=key_algorithm,json=keyAlgorithm,proto3,enum=google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig_KeyAlgorithm" json:"key_algorithm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertificateIssuanceConfig) Reset() {
	*x = CertificateIssuanceConfig{}
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateIssuanceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateIssuanceConfig) ProtoMessage() {}

func (x *CertificateIssuanceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateIssuanceConfig.ProtoReflect.Descriptor instead.
func (*CertificateIssuanceConfig) Descriptor() ([]byte, []int) {
	return file_cloud_certificatemanager_v1_data_proto_rawDescGZIP(), []int{0}
}

func (x *CertificateIssuanceConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CertificateIssuanceConfig) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *CertificateIssuanceConfig) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *CertificateIssuanceConfig) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CertificateIssuanceConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CertificateIssuanceConfig) GetCertificateAuthorityConfig() *CertificateIssuanceConfig_CertificateAuthorityConfig {
	if x != nil {
		return x.CertificateAuthorityConfig
	}
	return nil
}

func (x *CertificateIssuanceConfig) GetLifetime() *durationpb.Duration {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

func (x *CertificateIssuanceConfig) GetRotationWindowPercentage() int32 {
	if x != nil {
		return x.RotationWindowPercentage
	}
	return 0
}

func (x *CertificateIssuanceConfig) GetKeyAlgorithm() CertificateIssuanceConfig_KeyAlgorithm {
	if x != nil {
		return x.KeyAlgorithm
	}
	return CertificateIssuanceConfig_KEY_ALGORITHM_UNSPECIFIED
}

// Defines TLS certificate.
type Certificate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A user-defined name of the certificate. Certificate names must be unique
	// globally and match pattern `projects/*/locations/*/certificates/*`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// One or more paragraphs of text description of a certificate.
	Description string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The creation timestamp of a Certificate.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The last update timestamp of a Certificate.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Set of labels associated with a Certificate.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Types that are valid to be assigned to Type:
	//
	//	*Certificate_SelfManaged
	//	*Certificate_Managed
	Type isCertificate_Type `protobuf_oneof:"type"`
	// Output only. The list of Subject Alternative Names of dnsName type defined
	// in the certificate (see RFC 5280 4.2.1.6). Managed certificates that
	// haven't been provisioned yet have this field populated with a value of the
	// managed.domains field.
	SanDnsnames []string `protobuf:"bytes,6,rep,name=san_dnsnames,json=sanDnsnames,proto3" json:"san_dnsnames,omitempty"`
	// Output only. The PEM-encoded certificate chain.
	PemCertificate string `protobuf:"bytes,9,opt,name=pem_certificate,json=pemCertificate,proto3" json:"pem_certificate,omitempty"`
	// Output only. The expiry timestamp of a Certificate.
	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// Immutable. The scope of the certificate.
	Scope         Certificate_Scope `protobuf:"varint,12,opt,name=scope,proto3,enum=google.events.cloud.certificatemanager.v1.Certificate_Scope" json:"scope,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_cloud_certificatemanager_v1_data_proto_rawDescGZIP(), []int{1}
}

func (x *Certificate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Certificate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Certificate) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Certificate) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Certificate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Certificate) GetType() isCertificate_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Certificate) GetSelfManaged() *Certificate_SelfManagedCertificate {
	if x != nil {
		if x, ok := x.Type.(*Certificate_SelfManaged); ok {
			return x.SelfManaged
		}
	}
	return nil
}

func (x *Certificate) GetManaged() *Certificate_ManagedCertificate {
	if x != nil {
		if x, ok := x.Type.(*Certificate_Managed); ok {
			return x.Managed
		}
	}
	return nil
}

func (x *Certificate) GetSanDnsnames() []string {
	if x != nil {
		return x.SanDnsnames
	}
	return nil
}

func (x *Certificate) GetPemCertificate() string {
	if x != nil {
		return x.PemCertificate
	}
	return ""
}

func (x *Certificate) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *Certificate) GetScope() Certificate_Scope {
	if x != nil {
		return x.Scope
	}
	return Certificate_DEFAULT
}

type isCertificate_Type interface {
	isCertificate_Type()
}

type Certificate_SelfManaged struct {
	// If set, defines data of a self-managed certificate.
	SelfManaged *Certificate_SelfManagedCertificate `protobuf:"bytes,5,opt,name=self_managed,json=selfManaged,proto3,oneof"`
}

type Certificate_Managed struct {
	// If set, contains configuration and state of a managed certificate.
	Managed *Certificate_ManagedCertificate `protobuf:"bytes,11,opt,name=managed,proto3,oneof"`
}

func (*Certificate_SelfManaged) isCertificate_Type() {}

func (*Certificate_Managed) isCertificate_Type() {}

// Defines a collection of certificate configurations.
type CertificateMap struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A user-defined name of the Certificate Map. Certificate Map names must be
	// unique globally and match pattern
	// `projects/*/locations/*/certificateMaps/*`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// One or more paragraphs of text description of a certificate map.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The creation timestamp of a Certificate Map.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The update timestamp of a Certificate Map.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Set of labels associated with a Certificate Map.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Output only. A list of GCLB targets that use this Certificate Map.
	// A Target Proxy is only present on this list if it's attached to a
	// Forwarding Rule.
	GclbTargets   []*CertificateMap_GclbTarget `protobuf:"bytes,4,rep,name=gclb_targets,json=gclbTargets,proto3" json:"gclb_targets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertificateMap) Reset() {
	*x = CertificateMap{}
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateMap) ProtoMessage() {}

func (x *CertificateMap) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateMap.ProtoReflect.Descriptor instead.
func (*CertificateMap) Descriptor() ([]byte, []int) {
	return file_cloud_certificatemanager_v1_data_proto_rawDescGZIP(), []int{2}
}

func (x *CertificateMap) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CertificateMap) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CertificateMap) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *CertificateMap) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *CertificateMap) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CertificateMap) GetGclbTargets() []*CertificateMap_GclbTarget {
	if x != nil {
		return x.GclbTargets
	}
	return nil
}

// Defines a certificate map entry.
type CertificateMapEntry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A user-defined name of the Certificate Map Entry. Certificate Map Entry
	// names must be unique globally and match pattern
	// `projects/*/locations/*/certificateMaps/*/certificateMapEntries/*`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// One or more paragraphs of text description of a certificate map entry.
	Description string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The creation timestamp of a Certificate Map Entry.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The update timestamp of a Certificate Map Entry.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Set of labels associated with a Certificate Map Entry.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Types that are valid to be assigned to Match:
	//
	//	*CertificateMapEntry_Hostname
	//	*CertificateMapEntry_Matcher_
	Match isCertificateMapEntry_Match `protobuf_oneof:"match"`
	// A set of Certificates defines for the given `hostname`. There can be
	// defined up to fifteen certificates in each Certificate Map Entry. Each
	// certificate must match pattern `projects/*/locations/*/certificates/*`.
	Certificates []string `protobuf:"bytes,7,rep,name=certificates,proto3" json:"certificates,omitempty"`
	// Output only. A serving state of this Certificate Map Entry.
	State         ServingState `protobuf:"varint,8,opt,name=state,proto3,enum=google.events.cloud.certificatemanager.v1.ServingState" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertificateMapEntry) Reset() {
	*x = CertificateMapEntry{}
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateMapEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateMapEntry) ProtoMessage() {}

func (x *CertificateMapEntry) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateMapEntry.ProtoReflect.Descriptor instead.
func (*CertificateMapEntry) Descriptor() ([]byte, []int) {
	return file_cloud_certificatemanager_v1_data_proto_rawDescGZIP(), []int{3}
}

func (x *CertificateMapEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CertificateMapEntry) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CertificateMapEntry) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *CertificateMapEntry) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *CertificateMapEntry) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CertificateMapEntry) GetMatch() isCertificateMapEntry_Match {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *CertificateMapEntry) GetHostname() string {
	if x != nil {
		if x, ok := x.Match.(*CertificateMapEntry_Hostname); ok {
			return x.Hostname
		}
	}
	return ""
}

func (x *CertificateMapEntry) GetMatcher() CertificateMapEntry_Matcher {
	if x != nil {
		if x, ok := x.Match.(*CertificateMapEntry_Matcher_); ok {
			return x.Matcher
		}
	}
	return CertificateMapEntry_MATCHER_UNSPECIFIED
}

func (x *CertificateMapEntry) GetCertificates() []string {
	if x != nil {
		return x.Certificates
	}
	return nil
}

func (x *CertificateMapEntry) GetState() ServingState {
	if x != nil {
		return x.State
	}
	return ServingState_SERVING_STATE_UNSPECIFIED
}

type isCertificateMapEntry_Match interface {
	isCertificateMapEntry_Match()
}

type CertificateMapEntry_Hostname struct {
	// A Hostname (FQDN, e.g. `example.com`) or a wildcard hostname expression
	// (`*.example.com`) for a set of hostnames with common suffix. Used as
	// Server Name Indication (SNI) for selecting a proper certificate.
	Hostname string `protobuf:"bytes,5,opt,name=hostname,proto3,oneof"`
}

type CertificateMapEntry_Matcher_ struct {
	// A predefined matcher for particular cases, other than SNI selection.
	Matcher CertificateMapEntry_Matcher `protobuf:"varint,10,opt,name=matcher,proto3,enum=google.events.cloud.certificatemanager.v1.CertificateMapEntry_Matcher,oneof"`
}

func (*CertificateMapEntry_Hostname) isCertificateMapEntry_Match() {}

func (*CertificateMapEntry_Matcher_) isCertificateMapEntry_Match() {}

// A DnsAuthorization resource describes a way to perform domain authorization
// for certificate issuance.
type DnsAuthorization struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A user-defined name of the dns authorization. DnsAuthorization names must
	// be unique globally and match pattern
	// `projects/*/locations/*/dnsAuthorizations/*`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The creation timestamp of a DnsAuthorization.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The last update timestamp of a DnsAuthorization.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Set of labels associated with a DnsAuthorization.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// One or more paragraphs of text description of a DnsAuthorization.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Required. Immutable. A domain that is being authorized. A DnsAuthorization
	// resource covers a single domain and its wildcard, e.g. authorization for
	// `example.com` can be used to issue certificates for `example.com` and
	// `*.example.com`.
	Domain string `protobuf:"bytes,6,opt,name=domain,proto3" json:"domain,omitempty"`
	// Output only. DNS Resource Record that needs to be added to DNS
	// configuration.
	DnsResourceRecord *DnsAuthorization_DnsResourceRecord `protobuf:"bytes,10,opt,name=dns_resource_record,json=dnsResourceRecord,proto3" json:"dns_resource_record,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DnsAuthorization) Reset() {
	*x = DnsAuthorization{}
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DnsAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsAuthorization) ProtoMessage() {}

func (x *DnsAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsAuthorization.ProtoReflect.Descriptor instead.
func (*DnsAuthorization) Descriptor() ([]byte, []int) {
	return file_cloud_certificatemanager_v1_data_proto_rawDescGZIP(), []int{4}
}

func (x *DnsAuthorization) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DnsAuthorization) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *DnsAuthorization) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *DnsAuthorization) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DnsAuthorization) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DnsAuthorization) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DnsAuthorization) GetDnsResourceRecord() *DnsAuthorization_DnsResourceRecord {
	if x != nil {
		return x.DnsResourceRecord
	}
	return nil
}

// The data within all DnsAuthorization events.
type DnsAuthorizationEventData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The DnsAuthorization event payload. Unset for deletion events.
	Payload       *DnsAuthorization `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DnsAuthorizationEventData) Reset() {
	*x = DnsAuthorizationEventData{}
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DnsAuthorizationEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsAuthorizationEventData) ProtoMessage() {}

func (x *DnsAuthorizationEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsAuthorizationEventData.ProtoReflect.Descriptor instead.
func (*DnsAuthorizationEventData) Descriptor() ([]byte, []int) {
	return file_cloud_certificatemanager_v1_data_proto_rawDescGZIP(), []int{5}
}

func (x *DnsAuthorizationEventData) GetPayload() *DnsAuthorization {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all CertificateIssuanceConfig events.
type CertificateIssuanceConfigEventData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The CertificateIssuanceConfig event payload. Unset for deletion
	// events.
	Payload       *CertificateIssuanceConfig `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertificateIssuanceConfigEventData) Reset() {
	*x = CertificateIssuanceConfigEventData{}
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateIssuanceConfigEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateIssuanceConfigEventData) ProtoMessage() {}

func (x *CertificateIssuanceConfigEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateIssuanceConfigEventData.ProtoReflect.Descriptor instead.
func (*CertificateIssuanceConfigEventData) Descriptor() ([]byte, []int) {
	return file_cloud_certificatemanager_v1_data_proto_rawDescGZIP(), []int{6}
}

func (x *CertificateIssuanceConfigEventData) GetPayload() *CertificateIssuanceConfig {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all CertificateMapEntry events.
type CertificateMapEntryEventData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The CertificateMapEntry event payload. Unset for deletion events.
	Payload       *CertificateMapEntry `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertificateMapEntryEventData) Reset() {
	*x = CertificateMapEntryEventData{}
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateMapEntryEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateMapEntryEventData) ProtoMessage() {}

func (x *CertificateMapEntryEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateMapEntryEventData.ProtoReflect.Descriptor instead.
func (*CertificateMapEntryEventData) Descriptor() ([]byte, []int) {
	return file_cloud_certificatemanager_v1_data_proto_rawDescGZIP(), []int{7}
}

func (x *CertificateMapEntryEventData) GetPayload() *CertificateMapEntry {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all CertificateMap events.
type CertificateMapEventData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The CertificateMap event payload. Unset for deletion events.
	Payload       *CertificateMap `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertificateMapEventData) Reset() {
	*x = CertificateMapEventData{}
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateMapEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateMapEventData) ProtoMessage() {}

func (x *CertificateMapEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateMapEventData.ProtoReflect.Descriptor instead.
func (*CertificateMapEventData) Descriptor() ([]byte, []int) {
	return file_cloud_certificatemanager_v1_data_proto_rawDescGZIP(), []int{8}
}

func (x *CertificateMapEventData) GetPayload() *CertificateMap {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The data within all Certificate events.
type CertificateEventData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The Certificate event payload. Unset for deletion events.
	Payload       *Certificate `protobuf:"bytes,1,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertificateEventData) Reset() {
	*x = CertificateEventData{}
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateEventData) ProtoMessage() {}

func (x *CertificateEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateEventData.ProtoReflect.Descriptor instead.
func (*CertificateEventData) Descriptor() ([]byte, []int) {
	return file_cloud_certificatemanager_v1_data_proto_rawDescGZIP(), []int{9}
}

func (x *CertificateEventData) GetPayload() *Certificate {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The CA that issues the workload certificate. It includes CA address, type,
// authentication to CA service, etc.
type CertificateIssuanceConfig_CertificateAuthorityConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Kind:
	//
	//	*CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig_
	Kind          isCertificateIssuanceConfig_CertificateAuthorityConfig_Kind `protobuf_oneof:"kind"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertificateIssuanceConfig_CertificateAuthorityConfig) Reset() {
	*x = CertificateIssuanceConfig_CertificateAuthorityConfig{}
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateIssuanceConfig_CertificateAuthorityConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateIssuanceConfig_CertificateAuthorityConfig) ProtoMessage() {}

func (x *CertificateIssuanceConfig_CertificateAuthorityConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateIssuanceConfig_CertificateAuthorityConfig.ProtoReflect.Descriptor instead.
func (*CertificateIssuanceConfig_CertificateAuthorityConfig) Descriptor() ([]byte, []int) {
	return file_cloud_certificatemanager_v1_data_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CertificateIssuanceConfig_CertificateAuthorityConfig) GetKind() isCertificateIssuanceConfig_CertificateAuthorityConfig_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *CertificateIssuanceConfig_CertificateAuthorityConfig) GetCertificateAuthorityServiceConfig() *CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig {
	if x != nil {
		if x, ok := x.Kind.(*CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig_); ok {
			return x.CertificateAuthorityServiceConfig
		}
	}
	return nil
}

type isCertificateIssuanceConfig_CertificateAuthorityConfig_Kind interface {
	isCertificateIssuanceConfig_CertificateAuthorityConfig_Kind()
}

type CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig_ struct {
	// Defines a CertificateAuthorityServiceConfig.
	CertificateAuthorityServiceConfig *CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig `protobuf:"bytes,1,opt,name=certificate_authority_service_config,json=certificateAuthorityServiceConfig,proto3,oneof"`
}

func (*CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig_) isCertificateIssuanceConfig_CertificateAuthorityConfig_Kind() {
}

// Contains information required to contact CA service.
type CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. A CA pool resource used to issue a certificate.
	// The CA pool string has a relative resource path following the form
	// "projects/{project}/locations/{location}/caPools/{ca_pool}".
	CaPool        string `protobuf:"bytes,1,opt,name=ca_pool,json=caPool,proto3" json:"ca_pool,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig) Reset() {
	*x = CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig{}
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig) ProtoMessage() {
}

func (x *CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig.ProtoReflect.Descriptor instead.
func (*CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig) Descriptor() ([]byte, []int) {
	return file_cloud_certificatemanager_v1_data_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig) GetCaPool() string {
	if x != nil {
		return x.CaPool
	}
	return ""
}

// Certificate data for a SelfManaged Certificate.
// SelfManaged Certificates are uploaded by the user. Updating such
// certificates before they expire remains the user's responsibility.
type Certificate_SelfManagedCertificate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Certificate_SelfManagedCertificate) Reset() {
	*x = Certificate_SelfManagedCertificate{}
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Certificate_SelfManagedCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate_SelfManagedCertificate) ProtoMessage() {}

func (x *Certificate_SelfManagedCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate_SelfManagedCertificate.ProtoReflect.Descriptor instead.
func (*Certificate_SelfManagedCertificate) Descriptor() ([]byte, []int) {
	return file_cloud_certificatemanager_v1_data_proto_rawDescGZIP(), []int{1, 0}
}

// Configuration and state of a Managed Certificate.
// Certificate Manager provisions and renews Managed Certificates
// automatically, for as long as it's authorized to do so.
type Certificate_ManagedCertificate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Immutable. The domains for which a managed SSL certificate will be
	// generated. Wildcard domains are only supported with DNS challenge
	// resolution.
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// Immutable. Authorizations that will be used for performing domain
	// authorization.
	DnsAuthorizations []string `protobuf:"bytes,2,rep,name=dns_authorizations,json=dnsAuthorizations,proto3" json:"dns_authorizations,omitempty"`
	// Immutable. The resource name for a
	// [CertificateIssuanceConfig][google.cloud.certificatemanager.v1.CertificateIssuanceConfig]
	// used to configure private PKI certificates in the format
	// `projects/*/locations/*/certificateIssuanceConfigs/*`.
	// If this field is not set, the certificates will instead be publicly
	// signed as documented at
	// https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
	IssuanceConfig string `protobuf:"bytes,6,opt,name=issuance_config,json=issuanceConfig,proto3" json:"issuance_config,omitempty"`
	// Output only. State of the managed certificate resource.
	State Certificate_ManagedCertificate_State `protobuf:"varint,4,opt,name=state,proto3,enum=google.events.cloud.certificatemanager.v1.Certificate_ManagedCertificate_State" json:"state,omitempty"`
	// Output only. Information about issues with provisioning a Managed
	// Certificate.
	ProvisioningIssue *Certificate_ManagedCertificate_ProvisioningIssue `protobuf:"bytes,3,opt,name=provisioning_issue,json=provisioningIssue,proto3" json:"provisioning_issue,omitempty"`
	// Output only. Detailed state of the latest authorization attempt for each
	// domain specified for managed certificate resource.
	AuthorizationAttemptInfo []*Certificate_ManagedCertificate_AuthorizationAttemptInfo `protobuf:"bytes,5,rep,name=authorization_attempt_info,json=authorizationAttemptInfo,proto3" json:"authorization_attempt_info,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *Certificate_ManagedCertificate) Reset() {
	*x = Certificate_ManagedCertificate{}
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Certificate_ManagedCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate_ManagedCertificate) ProtoMessage() {}

func (x *Certificate_ManagedCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate_ManagedCertificate.ProtoReflect.Descriptor instead.
func (*Certificate_ManagedCertificate) Descriptor() ([]byte, []int) {
	return file_cloud_certificatemanager_v1_data_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Certificate_ManagedCertificate) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *Certificate_ManagedCertificate) GetDnsAuthorizations() []string {
	if x != nil {
		return x.DnsAuthorizations
	}
	return nil
}

func (x *Certificate_ManagedCertificate) GetIssuanceConfig() string {
	if x != nil {
		return x.IssuanceConfig
	}
	return ""
}

func (x *Certificate_ManagedCertificate) GetState() Certificate_ManagedCertificate_State {
	if x != nil {
		return x.State
	}
	return Certificate_ManagedCertificate_STATE_UNSPECIFIED
}

func (x *Certificate_ManagedCertificate) GetProvisioningIssue() *Certificate_ManagedCertificate_ProvisioningIssue {
	if x != nil {
		return x.ProvisioningIssue
	}
	return nil
}

func (x *Certificate_ManagedCertificate) GetAuthorizationAttemptInfo() []*Certificate_ManagedCertificate_AuthorizationAttemptInfo {
	if x != nil {
		return x.AuthorizationAttemptInfo
	}
	return nil
}

// Information about issues with provisioning a Managed Certificate.
type Certificate_ManagedCertificate_ProvisioningIssue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Output only. Reason for provisioning failures.
	Reason Certificate_ManagedCertificate_ProvisioningIssue_Reason `protobuf:"varint,1,opt,name=reason,proto3,enum=google.events.cloud.certificatemanager.v1.Certificate_ManagedCertificate_ProvisioningIssue_Reason" json:"reason,omitempty"`
	// Output only. Human readable explanation about the issue. Provided to
	// help address the configuration issues. Not guaranteed to be stable. For
	// programmatic access use Reason enum.
	Details       string `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Certificate_ManagedCertificate_ProvisioningIssue) Reset() {
	*x = Certificate_ManagedCertificate_ProvisioningIssue{}
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Certificate_ManagedCertificate_ProvisioningIssue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate_ManagedCertificate_ProvisioningIssue) ProtoMessage() {}

func (x *Certificate_ManagedCertificate_ProvisioningIssue) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate_ManagedCertificate_ProvisioningIssue.ProtoReflect.Descriptor instead.
func (*Certificate_ManagedCertificate_ProvisioningIssue) Descriptor() ([]byte, []int) {
	return file_cloud_certificatemanager_v1_data_proto_rawDescGZIP(), []int{1, 1, 0}
}

func (x *Certificate_ManagedCertificate_ProvisioningIssue) GetReason() Certificate_ManagedCertificate_ProvisioningIssue_Reason {
	if x != nil {
		return x.Reason
	}
	return Certificate_ManagedCertificate_ProvisioningIssue_REASON_UNSPECIFIED
}

func (x *Certificate_ManagedCertificate_ProvisioningIssue) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

// State of the latest attempt to authorize a domain for certificate
// issuance.
type Certificate_ManagedCertificate_AuthorizationAttemptInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Domain name of the authorization attempt.
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// Output only. State of the domain for managed certificate issuance.
	State Certificate_ManagedCertificate_AuthorizationAttemptInfo_State `protobuf:"varint,2,opt,name=state,proto3,enum=google.events.cloud.certificatemanager.v1.Certificate_ManagedCertificate_AuthorizationAttemptInfo_State" json:"state,omitempty"`
	// Output only. Reason for failure of the authorization attempt for the
	// domain.
	FailureReason Certificate_ManagedCertificate_AuthorizationAttemptInfo_FailureReason `protobuf:"varint,3,opt,name=failure_reason,json=failureReason,proto3,enum=google.events.cloud.certificatemanager.v1.Certificate_ManagedCertificate_AuthorizationAttemptInfo_FailureReason" json:"failure_reason,omitempty"`
	// Output only. Human readable explanation for reaching the state.
	// Provided to help address the configuration issues. Not guaranteed to be
	// stable. For programmatic access use FailureReason enum.
	Details       string `protobuf:"bytes,4,opt,name=details,proto3" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Certificate_ManagedCertificate_AuthorizationAttemptInfo) Reset() {
	*x = Certificate_ManagedCertificate_AuthorizationAttemptInfo{}
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Certificate_ManagedCertificate_AuthorizationAttemptInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate_ManagedCertificate_AuthorizationAttemptInfo) ProtoMessage() {}

func (x *Certificate_ManagedCertificate_AuthorizationAttemptInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate_ManagedCertificate_AuthorizationAttemptInfo.ProtoReflect.Descriptor instead.
func (*Certificate_ManagedCertificate_AuthorizationAttemptInfo) Descriptor() ([]byte, []int) {
	return file_cloud_certificatemanager_v1_data_proto_rawDescGZIP(), []int{1, 1, 1}
}

func (x *Certificate_ManagedCertificate_AuthorizationAttemptInfo) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Certificate_ManagedCertificate_AuthorizationAttemptInfo) GetState() Certificate_ManagedCertificate_AuthorizationAttemptInfo_State {
	if x != nil {
		return x.State
	}
	return Certificate_ManagedCertificate_AuthorizationAttemptInfo_STATE_UNSPECIFIED
}

func (x *Certificate_ManagedCertificate_AuthorizationAttemptInfo) GetFailureReason() Certificate_ManagedCertificate_AuthorizationAttemptInfo_FailureReason {
	if x != nil {
		return x.FailureReason
	}
	return Certificate_ManagedCertificate_AuthorizationAttemptInfo_FAILURE_REASON_UNSPECIFIED
}

func (x *Certificate_ManagedCertificate_AuthorizationAttemptInfo) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

// Describes a Target Proxy that uses this Certificate Map.
type CertificateMap_GclbTarget struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A Target Proxy to which this map is attached to.
	//
	// Types that are valid to be assigned to TargetProxy:
	//
	//	*CertificateMap_GclbTarget_TargetHttpsProxy
	//	*CertificateMap_GclbTarget_TargetSslProxy
	TargetProxy isCertificateMap_GclbTarget_TargetProxy `protobuf_oneof:"target_proxy"`
	// Output only. IP configurations for this Target Proxy where the
	// Certificate Map is serving.
	IpConfigs     []*CertificateMap_GclbTarget_IpConfig `protobuf:"bytes,2,rep,name=ip_configs,json=ipConfigs,proto3" json:"ip_configs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertificateMap_GclbTarget) Reset() {
	*x = CertificateMap_GclbTarget{}
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateMap_GclbTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateMap_GclbTarget) ProtoMessage() {}

func (x *CertificateMap_GclbTarget) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateMap_GclbTarget.ProtoReflect.Descriptor instead.
func (*CertificateMap_GclbTarget) Descriptor() ([]byte, []int) {
	return file_cloud_certificatemanager_v1_data_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CertificateMap_GclbTarget) GetTargetProxy() isCertificateMap_GclbTarget_TargetProxy {
	if x != nil {
		return x.TargetProxy
	}
	return nil
}

func (x *CertificateMap_GclbTarget) GetTargetHttpsProxy() string {
	if x != nil {
		if x, ok := x.TargetProxy.(*CertificateMap_GclbTarget_TargetHttpsProxy); ok {
			return x.TargetHttpsProxy
		}
	}
	return ""
}

func (x *CertificateMap_GclbTarget) GetTargetSslProxy() string {
	if x != nil {
		if x, ok := x.TargetProxy.(*CertificateMap_GclbTarget_TargetSslProxy); ok {
			return x.TargetSslProxy
		}
	}
	return ""
}

func (x *CertificateMap_GclbTarget) GetIpConfigs() []*CertificateMap_GclbTarget_IpConfig {
	if x != nil {
		return x.IpConfigs
	}
	return nil
}

type isCertificateMap_GclbTarget_TargetProxy interface {
	isCertificateMap_GclbTarget_TargetProxy()
}

type CertificateMap_GclbTarget_TargetHttpsProxy struct {
	// Output only. This field returns the resource name in the following
	// format:
	// `//compute.googleapis.com/projects/*/global/targetHttpsProxies/*`.
	TargetHttpsProxy string `protobuf:"bytes,1,opt,name=target_https_proxy,json=targetHttpsProxy,proto3,oneof"`
}

type CertificateMap_GclbTarget_TargetSslProxy struct {
	// Output only. This field returns the resource name in the following
	// format:
	// `//compute.googleapis.com/projects/*/global/targetSslProxies/*`.
	TargetSslProxy string `protobuf:"bytes,3,opt,name=target_ssl_proxy,json=targetSslProxy,proto3,oneof"`
}

func (*CertificateMap_GclbTarget_TargetHttpsProxy) isCertificateMap_GclbTarget_TargetProxy() {}

func (*CertificateMap_GclbTarget_TargetSslProxy) isCertificateMap_GclbTarget_TargetProxy() {}

// Defines IP configuration where this Certificate Map is serving.
type CertificateMap_GclbTarget_IpConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Output only. An external IP address.
	IpAddress string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// Output only. Ports.
	Ports         []uint32 `protobuf:"varint,3,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertificateMap_GclbTarget_IpConfig) Reset() {
	*x = CertificateMap_GclbTarget_IpConfig{}
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateMap_GclbTarget_IpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateMap_GclbTarget_IpConfig) ProtoMessage() {}

func (x *CertificateMap_GclbTarget_IpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateMap_GclbTarget_IpConfig.ProtoReflect.Descriptor instead.
func (*CertificateMap_GclbTarget_IpConfig) Descriptor() ([]byte, []int) {
	return file_cloud_certificatemanager_v1_data_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *CertificateMap_GclbTarget_IpConfig) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *CertificateMap_GclbTarget_IpConfig) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

// The structure describing the DNS Resource Record that needs to be added
// to DNS configuration for the authorization to be usable by
// certificate.
type DnsAuthorization_DnsResourceRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Output only. Fully qualified name of the DNS Resource Record.
	// e.g. `_acme-challenge.example.com`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Type of the DNS Resource Record.
	// Currently always set to "CNAME".
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Output only. Data of the DNS Resource Record.
	Data          string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DnsAuthorization_DnsResourceRecord) Reset() {
	*x = DnsAuthorization_DnsResourceRecord{}
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DnsAuthorization_DnsResourceRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsAuthorization_DnsResourceRecord) ProtoMessage() {}

func (x *DnsAuthorization_DnsResourceRecord) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_certificatemanager_v1_data_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsAuthorization_DnsResourceRecord.ProtoReflect.Descriptor instead.
func (*DnsAuthorization_DnsResourceRecord) Descriptor() ([]byte, []int) {
	return file_cloud_certificatemanager_v1_data_proto_rawDescGZIP(), []int{4, 0}
}

func (x *DnsAuthorization_DnsResourceRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DnsAuthorization_DnsResourceRecord) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DnsAuthorization_DnsResourceRecord) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_cloud_certificatemanager_v1_data_proto protoreflect.FileDescriptor

const file_cloud_certificatemanager_v1_data_proto_rawDesc = "" +
	"\n" +
	"&cloud/certificatemanager/v1/data.proto\x12)google.events.cloud.certificatemanager.v1\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x8b\t\n" +
	"\x19CertificateIssuanceConfig\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12;\n" +
	"\vcreate_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12h\n" +
	"\x06labels\x18\x04 \x03(\v2P.google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.LabelsEntryR\x06labels\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12\xa1\x01\n" +
	"\x1ccertificate_authority_config\x18\x06 \x01(\v2_.google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.CertificateAuthorityConfigR\x1acertificateAuthorityConfig\x125\n" +
	"\blifetime\x18\a \x01(\v2\x19.google.protobuf.DurationR\blifetime\x12<\n" +
	"\x1arotation_window_percentage\x18\b \x01(\x05R\x18rotationWindowPercentage\x12v\n" +
	"\rkey_algorithm\x18\t \x01(\x0e2Q.google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.KeyAlgorithmR\fkeyAlgorithm\x1a\xba\x02\n" +
	"\x1aCertificateAuthorityConfig\x12\xd5\x01\n" +
	"$certificate_authority_service_config\x18\x01 \x01(\v2\x81\x01.google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.CertificateAuthorityConfig.CertificateAuthorityServiceConfigH\x00R!certificateAuthorityServiceConfig\x1a<\n" +
	"!CertificateAuthorityServiceConfig\x12\x17\n" +
	"\aca_pool\x18\x01 \x01(\tR\x06caPoolB\x06\n" +
	"\x04kind\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"K\n" +
	"\fKeyAlgorithm\x12\x1d\n" +
	"\x19KEY_ALGORITHM_UNSPECIFIED\x10\x00\x12\f\n" +
	"\bRSA_2048\x10\x01\x12\x0e\n" +
	"\n" +
	"ECDSA_P256\x10\x04\"\xc5\x11\n" +
	"\vCertificate\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\b \x01(\tR\vdescription\x12;\n" +
	"\vcreate_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12Z\n" +
	"\x06labels\x18\x04 \x03(\v2B.google.events.cloud.certificatemanager.v1.Certificate.LabelsEntryR\x06labels\x12r\n" +
	"\fself_managed\x18\x05 \x01(\v2M.google.events.cloud.certificatemanager.v1.Certificate.SelfManagedCertificateH\x00R\vselfManaged\x12e\n" +
	"\amanaged\x18\v \x01(\v2I.google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificateH\x00R\amanaged\x12!\n" +
	"\fsan_dnsnames\x18\x06 \x03(\tR\vsanDnsnames\x12'\n" +
	"\x0fpem_certificate\x18\t \x01(\tR\x0epemCertificate\x12;\n" +
	"\vexpire_time\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"expireTime\x12R\n" +
	"\x05scope\x18\f \x01(\x0e2<.google.events.cloud.certificatemanager.v1.Certificate.ScopeR\x05scope\x1a\x18\n" +
	"\x16SelfManagedCertificate\x1a\xee\n" +
	"\n" +
	"\x12ManagedCertificate\x12\x18\n" +
	"\adomains\x18\x01 \x03(\tR\adomains\x12-\n" +
	"\x12dns_authorizations\x18\x02 \x03(\tR\x11dnsAuthorizations\x12'\n" +
	"\x0fissuance_config\x18\x06 \x01(\tR\x0eissuanceConfig\x12e\n" +
	"\x05state\x18\x04 \x01(\x0e2O.google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.StateR\x05state\x12\x8a\x01\n" +
	"\x12provisioning_issue\x18\x03 \x01(\v2[.google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.ProvisioningIssueR\x11provisioningIssue\x12\xa0\x01\n" +
	"\x1aauthorization_attempt_info\x18\x05 \x03(\v2b.google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfoR\x18authorizationAttemptInfo\x1a\xf6\x01\n" +
	"\x11ProvisioningIssue\x12z\n" +
	"\x06reason\x18\x01 \x01(\x0e2b.google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.ProvisioningIssue.ReasonR\x06reason\x12\x18\n" +
	"\adetails\x18\x02 \x01(\tR\adetails\"K\n" +
	"\x06Reason\x12\x16\n" +
	"\x12REASON_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13AUTHORIZATION_ISSUE\x10\x01\x12\x10\n" +
	"\fRATE_LIMITED\x10\x02\x1a\x8b\x04\n" +
	"\x18AuthorizationAttemptInfo\x12\x16\n" +
	"\x06domain\x18\x01 \x01(\tR\x06domain\x12~\n" +
	"\x05state\x18\x02 \x01(\x0e2h.google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo.StateR\x05state\x12\x97\x01\n" +
	"\x0efailure_reason\x18\x03 \x01(\x0e2p.google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo.FailureReasonR\rfailureReason\x12\x18\n" +
	"\adetails\x18\x04 \x01(\tR\adetails\"K\n" +
	"\x05State\x12\x15\n" +
	"\x11STATE_UNSPECIFIED\x10\x00\x12\x0f\n" +
	"\vAUTHORIZING\x10\x01\x12\x0e\n" +
	"\n" +
	"AUTHORIZED\x10\x06\x12\n" +
	"\n" +
	"\x06FAILED\x10\a\"V\n" +
	"\rFailureReason\x12\x1e\n" +
	"\x1aFAILURE_REASON_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06CONFIG\x10\x01\x12\a\n" +
	"\x03CAA\x10\x02\x12\x10\n" +
	"\fRATE_LIMITED\x10\x03\"H\n" +
	"\x05State\x12\x15\n" +
	"\x11STATE_UNSPECIFIED\x10\x00\x12\x10\n" +
	"\fPROVISIONING\x10\x01\x12\n" +
	"\n" +
	"\x06FAILED\x10\x02\x12\n" +
	"\n" +
	"\x06ACTIVE\x10\x03\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"$\n" +
	"\x05Scope\x12\v\n" +
	"\aDEFAULT\x10\x00\x12\x0e\n" +
	"\n" +
	"EDGE_CACHE\x10\x01B\x06\n" +
	"\x04type\"\xed\x05\n" +
	"\x0eCertificateMap\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12;\n" +
	"\vcreate_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12]\n" +
	"\x06labels\x18\x03 \x03(\v2E.google.events.cloud.certificatemanager.v1.CertificateMap.LabelsEntryR\x06labels\x12g\n" +
	"\fgclb_targets\x18\x04 \x03(\v2D.google.events.cloud.certificatemanager.v1.CertificateMap.GclbTargetR\vgclbTargets\x1a\xa7\x02\n" +
	"\n" +
	"GclbTarget\x12.\n" +
	"\x12target_https_proxy\x18\x01 \x01(\tH\x00R\x10targetHttpsProxy\x12*\n" +
	"\x10target_ssl_proxy\x18\x03 \x01(\tH\x00R\x0etargetSslProxy\x12l\n" +
	"\n" +
	"ip_configs\x18\x02 \x03(\v2M.google.events.cloud.certificatemanager.v1.CertificateMap.GclbTarget.IpConfigR\tipConfigs\x1a?\n" +
	"\bIpConfig\x12\x1d\n" +
	"\n" +
	"ip_address\x18\x01 \x01(\tR\tipAddress\x12\x14\n" +
	"\x05ports\x18\x03 \x03(\rR\x05portsB\x0e\n" +
	"\ftarget_proxy\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x93\x05\n" +
	"\x13CertificateMapEntry\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\t \x01(\tR\vdescription\x12;\n" +
	"\vcreate_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12b\n" +
	"\x06labels\x18\x04 \x03(\v2J.google.events.cloud.certificatemanager.v1.CertificateMapEntry.LabelsEntryR\x06labels\x12\x1c\n" +
	"\bhostname\x18\x05 \x01(\tH\x00R\bhostname\x12b\n" +
	"\amatcher\x18\n" +
	" \x01(\x0e2F.google.events.cloud.certificatemanager.v1.CertificateMapEntry.MatcherH\x00R\amatcher\x12\"\n" +
	"\fcertificates\x18\a \x03(\tR\fcertificates\x12M\n" +
	"\x05state\x18\b \x01(\x0e27.google.events.cloud.certificatemanager.v1.ServingStateR\x05state\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"/\n" +
	"\aMatcher\x12\x17\n" +
	"\x13MATCHER_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aPRIMARY\x10\x01B\a\n" +
	"\x05match\"\xc6\x04\n" +
	"\x10DnsAuthorization\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12;\n" +
	"\vcreate_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12_\n" +
	"\x06labels\x18\x04 \x03(\v2G.google.events.cloud.certificatemanager.v1.DnsAuthorization.LabelsEntryR\x06labels\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12\x16\n" +
	"\x06domain\x18\x06 \x01(\tR\x06domain\x12}\n" +
	"\x13dns_resource_record\x18\n" +
	" \x01(\v2M.google.events.cloud.certificatemanager.v1.DnsAuthorization.DnsResourceRecordR\x11dnsResourceRecord\x1aO\n" +
	"\x11DnsResourceRecord\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x12\n" +
	"\x04data\x18\x03 \x01(\tR\x04data\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x83\x01\n" +
	"\x19DnsAuthorizationEventData\x12Z\n" +
	"\apayload\x18\x01 \x01(\v2;.google.events.cloud.certificatemanager.v1.DnsAuthorizationH\x00R\apayload\x88\x01\x01B\n" +
	"\n" +
	"\b_payload\"\x95\x01\n" +
	"\"CertificateIssuanceConfigEventData\x12c\n" +
	"\apayload\x18\x01 \x01(\v2D.google.events.cloud.certificatemanager.v1.CertificateIssuanceConfigH\x00R\apayload\x88\x01\x01B\n" +
	"\n" +
	"\b_payload\"\x89\x01\n" +
	"\x1cCertificateMapEntryEventData\x12]\n" +
	"\apayload\x18\x01 \x01(\v2>.google.events.cloud.certificatemanager.v1.CertificateMapEntryH\x00R\apayload\x88\x01\x01B\n" +
	"\n" +
	"\b_payload\"\x7f\n" +
	"\x17CertificateMapEventData\x12X\n" +
	"\apayload\x18\x01 \x01(\v29.google.events.cloud.certificatemanager.v1.CertificateMapH\x00R\apayload\x88\x01\x01B\n" +
	"\n" +
	"\b_payload\"y\n" +
	"\x14CertificateEventData\x12U\n" +
	"\apayload\x18\x01 \x01(\v26.google.events.cloud.certificatemanager.v1.CertificateH\x00R\apayload\x88\x01\x01B\n" +
	"\n" +
	"\b_payload*F\n" +
	"\fServingState\x12\x1d\n" +
	"\x19SERVING_STATE_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06ACTIVE\x10\x01\x12\v\n" +
	"\aPENDING\x10\x02B\x91\x01\xaa\x022Google.Events.Protobuf.Cloud.CertificateManager.V1\xca\x02)Google\\Events\\Cloud\\CertificateManager\\V1\xea\x02-Google::Events::Cloud::CertificateManager::V1b\x06proto3"

var (
	file_cloud_certificatemanager_v1_data_proto_rawDescOnce sync.Once
	file_cloud_certificatemanager_v1_data_proto_rawDescData []byte
)

func file_cloud_certificatemanager_v1_data_proto_rawDescGZIP() []byte {
	file_cloud_certificatemanager_v1_data_proto_rawDescOnce.Do(func() {
		file_cloud_certificatemanager_v1_data_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cloud_certificatemanager_v1_data_proto_rawDesc), len(file_cloud_certificatemanager_v1_data_proto_rawDesc)))
	})
	return file_cloud_certificatemanager_v1_data_proto_rawDescData
}

var file_cloud_certificatemanager_v1_data_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_cloud_certificatemanager_v1_data_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_cloud_certificatemanager_v1_data_proto_goTypes = []any{
	(ServingState)(0), // 0: google.events.cloud.certificatemanager.v1.ServingState
	(CertificateIssuanceConfig_KeyAlgorithm)(0),                                // 1: google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.KeyAlgorithm
	(Certificate_Scope)(0),                                                     // 2: google.events.cloud.certificatemanager.v1.Certificate.Scope
	(Certificate_ManagedCertificate_State)(0),                                  // 3: google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.State
	(Certificate_ManagedCertificate_ProvisioningIssue_Reason)(0),               // 4: google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.ProvisioningIssue.Reason
	(Certificate_ManagedCertificate_AuthorizationAttemptInfo_State)(0),         // 5: google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo.State
	(Certificate_ManagedCertificate_AuthorizationAttemptInfo_FailureReason)(0), // 6: google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo.FailureReason
	(CertificateMapEntry_Matcher)(0),                                           // 7: google.events.cloud.certificatemanager.v1.CertificateMapEntry.Matcher
	(*CertificateIssuanceConfig)(nil),                                          // 8: google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig
	(*Certificate)(nil),                                                        // 9: google.events.cloud.certificatemanager.v1.Certificate
	(*CertificateMap)(nil),                                                     // 10: google.events.cloud.certificatemanager.v1.CertificateMap
	(*CertificateMapEntry)(nil),                                                // 11: google.events.cloud.certificatemanager.v1.CertificateMapEntry
	(*DnsAuthorization)(nil),                                                   // 12: google.events.cloud.certificatemanager.v1.DnsAuthorization
	(*DnsAuthorizationEventData)(nil),                                          // 13: google.events.cloud.certificatemanager.v1.DnsAuthorizationEventData
	(*CertificateIssuanceConfigEventData)(nil),                                 // 14: google.events.cloud.certificatemanager.v1.CertificateIssuanceConfigEventData
	(*CertificateMapEntryEventData)(nil),                                       // 15: google.events.cloud.certificatemanager.v1.CertificateMapEntryEventData
	(*CertificateMapEventData)(nil),                                            // 16: google.events.cloud.certificatemanager.v1.CertificateMapEventData
	(*CertificateEventData)(nil),                                               // 17: google.events.cloud.certificatemanager.v1.CertificateEventData
	(*CertificateIssuanceConfig_CertificateAuthorityConfig)(nil),               // 18: google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.CertificateAuthorityConfig
	nil, // 19: google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.LabelsEntry
	(*CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig)(nil), // 20: google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.CertificateAuthorityConfig.CertificateAuthorityServiceConfig
	(*Certificate_SelfManagedCertificate)(nil),                                                     // 21: google.events.cloud.certificatemanager.v1.Certificate.SelfManagedCertificate
	(*Certificate_ManagedCertificate)(nil),                                                         // 22: google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate
	nil,                                                                                            // 23: google.events.cloud.certificatemanager.v1.Certificate.LabelsEntry
	(*Certificate_ManagedCertificate_ProvisioningIssue)(nil),                                       // 24: google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.ProvisioningIssue
	(*Certificate_ManagedCertificate_AuthorizationAttemptInfo)(nil),                                // 25: google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo
	(*CertificateMap_GclbTarget)(nil),                                                              // 26: google.events.cloud.certificatemanager.v1.CertificateMap.GclbTarget
	nil,                                                                                            // 27: google.events.cloud.certificatemanager.v1.CertificateMap.LabelsEntry
	(*CertificateMap_GclbTarget_IpConfig)(nil),                                                     // 28: google.events.cloud.certificatemanager.v1.CertificateMap.GclbTarget.IpConfig
	nil, // 29: google.events.cloud.certificatemanager.v1.CertificateMapEntry.LabelsEntry
	(*DnsAuthorization_DnsResourceRecord)(nil), // 30: google.events.cloud.certificatemanager.v1.DnsAuthorization.DnsResourceRecord
	nil,                           // 31: google.events.cloud.certificatemanager.v1.DnsAuthorization.LabelsEntry
	(*timestamppb.Timestamp)(nil), // 32: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 33: google.protobuf.Duration
}
var file_cloud_certificatemanager_v1_data_proto_depIdxs = []int32{
	32, // 0: google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.create_time:type_name -> google.protobuf.Timestamp
	32, // 1: google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.update_time:type_name -> google.protobuf.Timestamp
	19, // 2: google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.labels:type_name -> google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.LabelsEntry
	18, // 3: google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.certificate_authority_config:type_name -> google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.CertificateAuthorityConfig
	33, // 4: google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.lifetime:type_name -> google.protobuf.Duration
	1,  // 5: google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.key_algorithm:type_name -> google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.KeyAlgorithm
	32, // 6: google.events.cloud.certificatemanager.v1.Certificate.create_time:type_name -> google.protobuf.Timestamp
	32, // 7: google.events.cloud.certificatemanager.v1.Certificate.update_time:type_name -> google.protobuf.Timestamp
	23, // 8: google.events.cloud.certificatemanager.v1.Certificate.labels:type_name -> google.events.cloud.certificatemanager.v1.Certificate.LabelsEntry
	21, // 9: google.events.cloud.certificatemanager.v1.Certificate.self_managed:type_name -> google.events.cloud.certificatemanager.v1.Certificate.SelfManagedCertificate
	22, // 10: google.events.cloud.certificatemanager.v1.Certificate.managed:type_name -> google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate
	32, // 11: google.events.cloud.certificatemanager.v1.Certificate.expire_time:type_name -> google.protobuf.Timestamp
	2,  // 12: google.events.cloud.certificatemanager.v1.Certificate.scope:type_name -> google.events.cloud.certificatemanager.v1.Certificate.Scope
	32, // 13: google.events.cloud.certificatemanager.v1.CertificateMap.create_time:type_name -> google.protobuf.Timestamp
	32, // 14: google.events.cloud.certificatemanager.v1.CertificateMap.update_time:type_name -> google.protobuf.Timestamp
	27, // 15: google.events.cloud.certificatemanager.v1.CertificateMap.labels:type_name -> google.events.cloud.certificatemanager.v1.CertificateMap.LabelsEntry
	26, // 16: google.events.cloud.certificatemanager.v1.CertificateMap.gclb_targets:type_name -> google.events.cloud.certificatemanager.v1.CertificateMap.GclbTarget
	32, // 17: google.events.cloud.certificatemanager.v1.CertificateMapEntry.create_time:type_name -> google.protobuf.Timestamp
	32, // 18: google.events.cloud.certificatemanager.v1.CertificateMapEntry.update_time:type_name -> google.protobuf.Timestamp
	29, // 19: google.events.cloud.certificatemanager.v1.CertificateMapEntry.labels:type_name -> google.events.cloud.certificatemanager.v1.CertificateMapEntry.LabelsEntry
	7,  // 20: google.events.cloud.certificatemanager.v1.CertificateMapEntry.matcher:type_name -> google.events.cloud.certificatemanager.v1.CertificateMapEntry.Matcher
	0,  // 21: google.events.cloud.certificatemanager.v1.CertificateMapEntry.state:type_name -> google.events.cloud.certificatemanager.v1.ServingState
	32, // 22: google.events.cloud.certificatemanager.v1.DnsAuthorization.create_time:type_name -> google.protobuf.Timestamp
	32, // 23: google.events.cloud.certificatemanager.v1.DnsAuthorization.update_time:type_name -> google.protobuf.Timestamp
	31, // 24: google.events.cloud.certificatemanager.v1.DnsAuthorization.labels:type_name -> google.events.cloud.certificatemanager.v1.DnsAuthorization.LabelsEntry
	30, // 25: google.events.cloud.certificatemanager.v1.DnsAuthorization.dns_resource_record:type_name -> google.events.cloud.certificatemanager.v1.DnsAuthorization.DnsResourceRecord
	12, // 26: google.events.cloud.certificatemanager.v1.DnsAuthorizationEventData.payload:type_name -> google.events.cloud.certificatemanager.v1.DnsAuthorization
	8,  // 27: google.events.cloud.certificatemanager.v1.CertificateIssuanceConfigEventData.payload:type_name -> google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig
	11, // 28: google.events.cloud.certificatemanager.v1.CertificateMapEntryEventData.payload:type_name -> google.events.cloud.certificatemanager.v1.CertificateMapEntry
	10, // 29: google.events.cloud.certificatemanager.v1.CertificateMapEventData.payload:type_name -> google.events.cloud.certificatemanager.v1.CertificateMap
	9,  // 30: google.events.cloud.certificatemanager.v1.CertificateEventData.payload:type_name -> google.events.cloud.certificatemanager.v1.Certificate
	20, // 31: google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.CertificateAuthorityConfig.certificate_authority_service_config:type_name -> google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.CertificateAuthorityConfig.CertificateAuthorityServiceConfig
	3,  // 32: google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.state:type_name -> google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.State
	24, // 33: google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.provisioning_issue:type_name -> google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.ProvisioningIssue
	25, // 34: google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.authorization_attempt_info:type_name -> google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo
	4,  // 35: google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.ProvisioningIssue.reason:type_name -> google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.ProvisioningIssue.Reason
	5,  // 36: google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo.state:type_name -> google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo.State
	6,  // 37: google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo.failure_reason:type_name -> google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo.FailureReason
	28, // 38: google.events.cloud.certificatemanager.v1.CertificateMap.GclbTarget.ip_configs:type_name -> google.events.cloud.certificatemanager.v1.CertificateMap.GclbTarget.IpConfig
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_cloud_certificatemanager_v1_data_proto_init() }
func file_cloud_certificatemanager_v1_data_proto_init() {
	if File_cloud_certificatemanager_v1_data_proto != nil {
		return
	}
	file_cloud_certificatemanager_v1_data_proto_msgTypes[1].OneofWrappers = []any{
		(*Certificate_SelfManaged)(nil),
		(*Certificate_Managed)(nil),
	}
	file_cloud_certificatemanager_v1_data_proto_msgTypes[3].OneofWrappers = []any{
		(*CertificateMapEntry_Hostname)(nil),
		(*CertificateMapEntry_Matcher_)(nil),
	}
	file_cloud_certificatemanager_v1_data_proto_msgTypes[5].OneofWrappers = []any{}
	file_cloud_certificatemanager_v1_data_proto_msgTypes[6].OneofWrappers = []any{}
	file_cloud_certificatemanager_v1_data_proto_msgTypes[7].OneofWrappers = []any{}
	file_cloud_certificatemanager_v1_data_proto_msgTypes[8].OneofWrappers = []any{}
	file_cloud_certificatemanager_v1_data_proto_msgTypes[9].OneofWrappers = []any{}
	file_cloud_certificatemanager_v1_data_proto_msgTypes[10].OneofWrappers = []any{
		(*CertificateIssuanceConfig_CertificateAuthorityConfig_CertificateAuthorityServiceConfig_)(nil),
	}
	file_cloud_certificatemanager_v1_data_proto_msgTypes[18].OneofWrappers = []any{
		(*CertificateMap_GclbTarget_TargetHttpsProxy)(nil),
		(*CertificateMap_GclbTarget_TargetSslProxy)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cloud_certificatemanager_v1_data_proto_rawDesc), len(file_cloud_certificatemanager_v1_data_proto_rawDesc)),
			NumEnums:      8,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_certificatemanager_v1_data_proto_goTypes,
		DependencyIndexes: file_cloud_certificatemanager_v1_data_proto_depIdxs,
		EnumInfos:         file_cloud_certificatemanager_v1_data_proto_enumTypes,
		MessageInfos:      file_cloud_certificatemanager_v1_data_proto_msgTypes,
	}.Build()
	File_cloud_certificatemanager_v1_data_proto = out.File
	file_cloud_certificatemanager_v1_data_proto_goTypes = nil
	file_cloud_certificatemanager_v1_data_proto_depIdxs = nil
}
