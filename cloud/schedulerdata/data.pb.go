// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.6
// source: cloud/scheduler/v1/data.proto

package schedulerdata

import (
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The HTTP method used to execute the job.
type HttpMethod int32

const (
	// HTTP method unspecified. Defaults to POST.
	HttpMethod_HTTP_METHOD_UNSPECIFIED HttpMethod = 0
	// HTTP POST
	HttpMethod_POST HttpMethod = 1
	// HTTP GET
	HttpMethod_GET HttpMethod = 2
	// HTTP HEAD
	HttpMethod_HEAD HttpMethod = 3
	// HTTP PUT
	HttpMethod_PUT HttpMethod = 4
	// HTTP DELETE
	HttpMethod_DELETE HttpMethod = 5
	// HTTP PATCH
	HttpMethod_PATCH HttpMethod = 6
	// HTTP OPTIONS
	HttpMethod_OPTIONS HttpMethod = 7
)

// Enum value maps for HttpMethod.
var (
	HttpMethod_name = map[int32]string{
		0: "HTTP_METHOD_UNSPECIFIED",
		1: "POST",
		2: "GET",
		3: "HEAD",
		4: "PUT",
		5: "DELETE",
		6: "PATCH",
		7: "OPTIONS",
	}
	HttpMethod_value = map[string]int32{
		"HTTP_METHOD_UNSPECIFIED": 0,
		"POST":                    1,
		"GET":                     2,
		"HEAD":                    3,
		"PUT":                     4,
		"DELETE":                  5,
		"PATCH":                   6,
		"OPTIONS":                 7,
	}
)

func (x HttpMethod) Enum() *HttpMethod {
	p := new(HttpMethod)
	*p = x
	return p
}

func (x HttpMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_scheduler_v1_data_proto_enumTypes[0].Descriptor()
}

func (HttpMethod) Type() protoreflect.EnumType {
	return &file_cloud_scheduler_v1_data_proto_enumTypes[0]
}

func (x HttpMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HttpMethod.Descriptor instead.
func (HttpMethod) EnumDescriptor() ([]byte, []int) {
	return file_cloud_scheduler_v1_data_proto_rawDescGZIP(), []int{0}
}

// State of the job.
type Job_State int32

const (
	// Unspecified state.
	Job_STATE_UNSPECIFIED Job_State = 0
	// The job is executing normally.
	Job_ENABLED Job_State = 1
	// The job is paused by the user. It will not execute. A user can
	// intentionally pause the job using
	// [PauseJobRequest][google.cloud.scheduler.v1.PauseJobRequest].
	Job_PAUSED Job_State = 2
	// The job is disabled by the system due to error. The user
	// cannot directly set a job to be disabled.
	Job_DISABLED Job_State = 3
	// The job state resulting from a failed
	// [CloudScheduler.UpdateJob][google.cloud.scheduler.v1.CloudScheduler.UpdateJob]
	// operation. To recover a job from this state, retry
	// [CloudScheduler.UpdateJob][google.cloud.scheduler.v1.CloudScheduler.UpdateJob]
	// until a successful response is received.
	Job_UPDATE_FAILED Job_State = 4
)

// Enum value maps for Job_State.
var (
	Job_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "ENABLED",
		2: "PAUSED",
		3: "DISABLED",
		4: "UPDATE_FAILED",
	}
	Job_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"ENABLED":           1,
		"PAUSED":            2,
		"DISABLED":          3,
		"UPDATE_FAILED":     4,
	}
)

func (x Job_State) Enum() *Job_State {
	p := new(Job_State)
	*p = x
	return p
}

func (x Job_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Job_State) Descriptor() protoreflect.EnumDescriptor {
	return file_cloud_scheduler_v1_data_proto_enumTypes[1].Descriptor()
}

func (Job_State) Type() protoreflect.EnumType {
	return &file_cloud_scheduler_v1_data_proto_enumTypes[1]
}

func (x Job_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Job_State.Descriptor instead.
func (Job_State) EnumDescriptor() ([]byte, []int) {
	return file_cloud_scheduler_v1_data_proto_rawDescGZIP(), []int{7, 0}
}

// Scheduler job data.
type SchedulerJobData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The custom data the user specified when creating the scheduler source.
	CustomData    []byte `protobuf:"bytes,1,opt,name=custom_data,json=customData,proto3" json:"custom_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SchedulerJobData) Reset() {
	*x = SchedulerJobData{}
	mi := &file_cloud_scheduler_v1_data_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchedulerJobData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulerJobData) ProtoMessage() {}

func (x *SchedulerJobData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_scheduler_v1_data_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulerJobData.ProtoReflect.Descriptor instead.
func (*SchedulerJobData) Descriptor() ([]byte, []int) {
	return file_cloud_scheduler_v1_data_proto_rawDescGZIP(), []int{0}
}

func (x *SchedulerJobData) GetCustomData() []byte {
	if x != nil {
		return x.CustomData
	}
	return nil
}

// Http target. The job will be pushed to the job handler by means of
// an HTTP request via an
// [http_method][google.cloud.scheduler.v1.HttpTarget.http_method] such as HTTP
// POST, HTTP GET, etc. The job is acknowledged by means of an HTTP
// response code in the range [200 - 299]. A failure to receive a response
// constitutes a failed execution. For a redirected request, the response
// returned by the redirected request is considered.
type HttpTarget struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The full URI path that the request will be sent to. This string
	// must begin with either "http://" or "https://". Some examples of
	// valid values for [uri][google.cloud.scheduler.v1.HttpTarget.uri] are:
	// `http://acme.com` and `https://acme.com/sales:8080`. Cloud Scheduler will
	// encode some characters for safety and compatibility. The maximum allowed
	// URL length is 2083 characters after encoding.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// Which HTTP method to use for the request.
	HttpMethod HttpMethod `protobuf:"varint,2,opt,name=http_method,json=httpMethod,proto3,enum=google.events.cloud.scheduler.v1.HttpMethod" json:"http_method,omitempty"`
	// HTTP request headers.
	//
	// This map contains the header field names and values.
	//
	// The user can specify HTTP request headers to send with the job's
	// HTTP request. Repeated headers are not supported, but a header value can
	// contain commas.
	//
	// The following headers represent a subset of the headers
	// that accompany the job's HTTP request. Some HTTP request
	// headers are ignored or replaced. A partial list of headers that
	// are ignored or replaced is below:
	//
	// * Host: This will be computed by Cloud Scheduler and derived from
	// [uri][google.cloud.scheduler.v1.HttpTarget.uri].
	// * `Content-Length`: This will be computed by Cloud Scheduler.
	// * `User-Agent`: This will be set to `"Google-Cloud-Scheduler"`.
	// * `X-Google-*`: Google internal use only.
	// * `X-AppEngine-*`: Google internal use only.
	// * `X-CloudScheduler`: This header will be set to true.
	// * `X-CloudScheduler-JobName`: This header will contain the job name.
	// * `X-CloudScheduler-ScheduleTime`: For Cloud Scheduler jobs specified in
	// the unix-cron format, this header will contain the job schedule as an
	// offset of UTC parsed according to RFC3339.
	//
	// If the job has a [body][google.cloud.scheduler.v1.HttpTarget.body] and the
	// following headers are not set by the user, Cloud Scheduler sets default
	// values:
	//
	//   - `Content-Type`: This will be set to `"application/octet-stream"`. You
	//     can override this default by explicitly setting `Content-Type` to a
	//     particular media type when creating the job. For example, you can set
	//     `Content-Type` to `"application/json"`.
	//
	// The total size of headers must be less than 80KB.
	Headers map[string]string `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// HTTP request body. A request body is allowed only if the HTTP
	// method is POST, PUT, or PATCH. It is an error to set body on a job with an
	// incompatible [HttpMethod][google.cloud.scheduler.v1.HttpMethod].
	Body []byte `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	// The mode for generating an `Authorization` header for HTTP requests.
	//
	// If specified, all `Authorization` headers in the
	// [HttpTarget.headers][google.cloud.scheduler.v1.HttpTarget.headers] field
	// will be overridden.
	//
	// Types that are valid to be assigned to AuthorizationHeader:
	//
	//	*HttpTarget_OauthToken
	//	*HttpTarget_OidcToken
	AuthorizationHeader isHttpTarget_AuthorizationHeader `protobuf_oneof:"authorization_header"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *HttpTarget) Reset() {
	*x = HttpTarget{}
	mi := &file_cloud_scheduler_v1_data_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpTarget) ProtoMessage() {}

func (x *HttpTarget) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_scheduler_v1_data_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpTarget.ProtoReflect.Descriptor instead.
func (*HttpTarget) Descriptor() ([]byte, []int) {
	return file_cloud_scheduler_v1_data_proto_rawDescGZIP(), []int{1}
}

func (x *HttpTarget) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *HttpTarget) GetHttpMethod() HttpMethod {
	if x != nil {
		return x.HttpMethod
	}
	return HttpMethod_HTTP_METHOD_UNSPECIFIED
}

func (x *HttpTarget) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HttpTarget) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *HttpTarget) GetAuthorizationHeader() isHttpTarget_AuthorizationHeader {
	if x != nil {
		return x.AuthorizationHeader
	}
	return nil
}

func (x *HttpTarget) GetOauthToken() *OAuthToken {
	if x != nil {
		if x, ok := x.AuthorizationHeader.(*HttpTarget_OauthToken); ok {
			return x.OauthToken
		}
	}
	return nil
}

func (x *HttpTarget) GetOidcToken() *OidcToken {
	if x != nil {
		if x, ok := x.AuthorizationHeader.(*HttpTarget_OidcToken); ok {
			return x.OidcToken
		}
	}
	return nil
}

type isHttpTarget_AuthorizationHeader interface {
	isHttpTarget_AuthorizationHeader()
}

type HttpTarget_OauthToken struct {
	// If specified, an
	// [OAuth token](https://developers.google.com/identity/protocols/OAuth2)
	// will be generated and attached as an `Authorization` header in the HTTP
	// request.
	//
	// This type of authorization should generally only be used when calling
	// Google APIs hosted on *.googleapis.com.
	OauthToken *OAuthToken `protobuf:"bytes,5,opt,name=oauth_token,json=oauthToken,proto3,oneof"`
}

type HttpTarget_OidcToken struct {
	// If specified, an
	// [OIDC](https://developers.google.com/identity/protocols/OpenIDConnect)
	// token will be generated and attached as an `Authorization` header in the
	// HTTP request.
	//
	// This type of authorization can be used for many scenarios, including
	// calling Cloud Run, or endpoints where you intend to validate the token
	// yourself.
	OidcToken *OidcToken `protobuf:"bytes,6,opt,name=oidc_token,json=oidcToken,proto3,oneof"`
}

func (*HttpTarget_OauthToken) isHttpTarget_AuthorizationHeader() {}

func (*HttpTarget_OidcToken) isHttpTarget_AuthorizationHeader() {}

// App Engine target. The job will be pushed to a job handler by means
// of an HTTP request via an
// [http_method][google.cloud.scheduler.v1.AppEngineHttpTarget.http_method] such
// as HTTP POST, HTTP GET, etc. The job is acknowledged by means of an
// HTTP response code in the range [200 - 299]. Error 503 is
// considered an App Engine system error instead of an application
// error. Requests returning error 503 will be retried regardless of
// retry configuration and not counted against retry counts. Any other
// response code, or a failure to receive a response before the
// deadline, constitutes a failed attempt.
type AppEngineHttpTarget struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The HTTP method to use for the request. PATCH and OPTIONS are not
	// permitted.
	HttpMethod HttpMethod `protobuf:"varint,1,opt,name=http_method,json=httpMethod,proto3,enum=google.events.cloud.scheduler.v1.HttpMethod" json:"http_method,omitempty"`
	// App Engine Routing setting for the job.
	AppEngineRouting *AppEngineRouting `protobuf:"bytes,2,opt,name=app_engine_routing,json=appEngineRouting,proto3" json:"app_engine_routing,omitempty"`
	// The relative URI.
	//
	// The relative URL must begin with "/" and must be a valid HTTP relative URL.
	// It can contain a path, query string arguments, and `#` fragments.
	// If the relative URL is empty, then the root path "/" will be used.
	// No spaces are allowed, and the maximum length allowed is 2083 characters.
	RelativeUri string `protobuf:"bytes,3,opt,name=relative_uri,json=relativeUri,proto3" json:"relative_uri,omitempty"`
	// HTTP request headers.
	//
	// This map contains the header field names and values. Headers can be set
	// when the job is created.
	//
	// Cloud Scheduler sets some headers to default values:
	//
	//   - `User-Agent`: By default, this header is
	//     `"AppEngine-Google; (+http://code.google.com/appengine)"`.
	//     This header can be modified, but Cloud Scheduler will append
	//     `"AppEngine-Google; (+http://code.google.com/appengine)"` to the
	//     modified `User-Agent`.
	//   - `X-CloudScheduler`: This header will be set to true.
	//   - `X-CloudScheduler-JobName`: This header will contain the job name.
	//   - `X-CloudScheduler-ScheduleTime`: For Cloud Scheduler jobs specified in
	//
	// the unix-cron format, this header will contain the job schedule as an
	// offset of UTC parsed according to RFC3339.
	//
	// If the job has a [body][google.cloud.scheduler.v1.AppEngineHttpTarget.body]
	// and the following headers are not set by the user, Cloud Scheduler sets
	// default values:
	//
	//   - `Content-Type`: This will be set to `"application/octet-stream"`. You
	//     can override this default by explicitly setting `Content-Type` to a
	//     particular media type when creating the job. For example, you can set
	//     `Content-Type` to `"application/json"`.
	//
	// The headers below are output only. They cannot be set or overridden:
	//
	// * `Content-Length`: This is computed by Cloud Scheduler.
	// * `X-Google-*`: For Google internal use only.
	// * `X-AppEngine-*`: For Google internal use only.
	//
	// In addition, some App Engine headers, which contain
	// job-specific information, are also be sent to the job handler.
	Headers map[string]string `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Body.
	//
	// HTTP request body. A request body is allowed only if the HTTP method is
	// POST or PUT. It will result in invalid argument error to set a body on a
	// job with an incompatible
	// [HttpMethod][google.cloud.scheduler.v1.HttpMethod].
	Body          []byte `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppEngineHttpTarget) Reset() {
	*x = AppEngineHttpTarget{}
	mi := &file_cloud_scheduler_v1_data_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppEngineHttpTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppEngineHttpTarget) ProtoMessage() {}

func (x *AppEngineHttpTarget) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_scheduler_v1_data_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppEngineHttpTarget.ProtoReflect.Descriptor instead.
func (*AppEngineHttpTarget) Descriptor() ([]byte, []int) {
	return file_cloud_scheduler_v1_data_proto_rawDescGZIP(), []int{2}
}

func (x *AppEngineHttpTarget) GetHttpMethod() HttpMethod {
	if x != nil {
		return x.HttpMethod
	}
	return HttpMethod_HTTP_METHOD_UNSPECIFIED
}

func (x *AppEngineHttpTarget) GetAppEngineRouting() *AppEngineRouting {
	if x != nil {
		return x.AppEngineRouting
	}
	return nil
}

func (x *AppEngineHttpTarget) GetRelativeUri() string {
	if x != nil {
		return x.RelativeUri
	}
	return ""
}

func (x *AppEngineHttpTarget) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *AppEngineHttpTarget) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

// Pub/Sub target. The job will be delivered by publishing a message to
// the given Pub/Sub topic.
type PubsubTarget struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The name of the Cloud Pub/Sub topic to which messages will
	// be published when a job is delivered. The topic name must be in the
	// same format as required by Pub/Sub's
	// [PublishRequest.name](https://cloud.google.com/pubsub/docs/reference/rpc/google.pubsub.v1#publishrequest),
	// for example `projects/PROJECT_ID/topics/TOPIC_ID`.
	//
	// The topic must be in the same project as the Cloud Scheduler job.
	TopicName string `protobuf:"bytes,1,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	// The message payload for PubsubMessage.
	//
	// Pubsub message must contain either non-empty data, or at least one
	// attribute.
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// Attributes for PubsubMessage.
	//
	// Pubsub message must contain either non-empty data, or at least one
	// attribute.
	Attributes    map[string]string `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PubsubTarget) Reset() {
	*x = PubsubTarget{}
	mi := &file_cloud_scheduler_v1_data_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PubsubTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubsubTarget) ProtoMessage() {}

func (x *PubsubTarget) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_scheduler_v1_data_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubsubTarget.ProtoReflect.Descriptor instead.
func (*PubsubTarget) Descriptor() ([]byte, []int) {
	return file_cloud_scheduler_v1_data_proto_rawDescGZIP(), []int{3}
}

func (x *PubsubTarget) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *PubsubTarget) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PubsubTarget) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// App Engine Routing.
//
// For more information about services, versions, and instances see
// [An Overview of App
// Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine),
// [Microservices Architecture on Google App
// Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine),
// [App Engine Standard request
// routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed),
// and [App Engine Flex request
// routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
type AppEngineRouting struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// App service.
	//
	// By default, the job is sent to the service which is the default
	// service when the job is attempted.
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	// App version.
	//
	// By default, the job is sent to the version which is the default
	// version when the job is attempted.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// App instance.
	//
	// By default, the job is sent to an instance which is available when
	// the job is attempted.
	//
	// Requests can only be sent to a specific instance if
	// [manual scaling is used in App Engine
	// Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?#scaling_types_and_instance_classes).
	// App Engine Flex does not support instances. For more information, see
	// [App Engine Standard request
	// routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed)
	// and [App Engine Flex request
	// routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
	Instance string `protobuf:"bytes,3,opt,name=instance,proto3" json:"instance,omitempty"`
	// Output only. The host that the job is sent to.
	//
	// For more information about how App Engine requests are routed, see
	// [here](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed).
	//
	// The host is constructed as:
	//
	//   - `host = [application_domain_name]`</br>
	//     `| [service] + '.' + [application_domain_name]`</br>
	//     `| [version] + '.' + [application_domain_name]`</br>
	//     `| [version_dot_service]+ '.' + [application_domain_name]`</br>
	//     `| [instance] + '.' + [application_domain_name]`</br>
	//     `| [instance_dot_service] + '.' + [application_domain_name]`</br>
	//     `| [instance_dot_version] + '.' + [application_domain_name]`</br>
	//     `| [instance_dot_version_dot_service] + '.' + [application_domain_name]`
	//
	//   - `application_domain_name` = The domain name of the app, for
	//     example <app-id>.appspot.com, which is associated with the
	//     job's project ID.
	//
	// * `service =` [service][google.cloud.scheduler.v1.AppEngineRouting.service]
	//
	// * `version =` [version][google.cloud.scheduler.v1.AppEngineRouting.version]
	//
	//   - `version_dot_service =`
	//     [version][google.cloud.scheduler.v1.AppEngineRouting.version] `+ '.' +`
	//     [service][google.cloud.scheduler.v1.AppEngineRouting.service]
	//
	// * `instance =`
	// [instance][google.cloud.scheduler.v1.AppEngineRouting.instance]
	//
	//   - `instance_dot_service =`
	//     [instance][google.cloud.scheduler.v1.AppEngineRouting.instance] `+ '.' +`
	//     [service][google.cloud.scheduler.v1.AppEngineRouting.service]
	//
	//   - `instance_dot_version =`
	//     [instance][google.cloud.scheduler.v1.AppEngineRouting.instance] `+ '.' +`
	//     [version][google.cloud.scheduler.v1.AppEngineRouting.version]
	//
	//   - `instance_dot_version_dot_service =`
	//     [instance][google.cloud.scheduler.v1.AppEngineRouting.instance] `+ '.' +`
	//     [version][google.cloud.scheduler.v1.AppEngineRouting.version] `+ '.' +`
	//     [service][google.cloud.scheduler.v1.AppEngineRouting.service]
	//
	// If [service][google.cloud.scheduler.v1.AppEngineRouting.service] is empty,
	// then the job will be sent to the service which is the default service when
	// the job is attempted.
	//
	// If [version][google.cloud.scheduler.v1.AppEngineRouting.version] is empty,
	// then the job will be sent to the version which is the default version when
	// the job is attempted.
	//
	// If [instance][google.cloud.scheduler.v1.AppEngineRouting.instance] is
	// empty, then the job will be sent to an instance which is available when the
	// job is attempted.
	//
	// If [service][google.cloud.scheduler.v1.AppEngineRouting.service],
	// [version][google.cloud.scheduler.v1.AppEngineRouting.version], or
	// [instance][google.cloud.scheduler.v1.AppEngineRouting.instance] is invalid,
	// then the job will be sent to the default version of the default service
	// when the job is attempted.
	Host          string `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppEngineRouting) Reset() {
	*x = AppEngineRouting{}
	mi := &file_cloud_scheduler_v1_data_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppEngineRouting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppEngineRouting) ProtoMessage() {}

func (x *AppEngineRouting) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_scheduler_v1_data_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppEngineRouting.ProtoReflect.Descriptor instead.
func (*AppEngineRouting) Descriptor() ([]byte, []int) {
	return file_cloud_scheduler_v1_data_proto_rawDescGZIP(), []int{4}
}

func (x *AppEngineRouting) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *AppEngineRouting) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AppEngineRouting) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *AppEngineRouting) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

// Contains information needed for generating an
// [OAuth token](https://developers.google.com/identity/protocols/OAuth2).
// This type of authorization should generally only be used when calling Google
// APIs hosted on *.googleapis.com.
type OAuthToken struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [Service account email](https://cloud.google.com/iam/docs/service-accounts)
	// to be used for generating OAuth token.
	// The service account must be within the same project as the job. The caller
	// must have iam.serviceAccounts.actAs permission for the service account.
	ServiceAccountEmail string `protobuf:"bytes,1,opt,name=service_account_email,json=serviceAccountEmail,proto3" json:"service_account_email,omitempty"`
	// OAuth scope to be used for generating OAuth access token.
	// If not specified, "https://www.googleapis.com/auth/cloud-platform"
	// will be used.
	Scope         string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OAuthToken) Reset() {
	*x = OAuthToken{}
	mi := &file_cloud_scheduler_v1_data_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OAuthToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuthToken) ProtoMessage() {}

func (x *OAuthToken) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_scheduler_v1_data_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuthToken.ProtoReflect.Descriptor instead.
func (*OAuthToken) Descriptor() ([]byte, []int) {
	return file_cloud_scheduler_v1_data_proto_rawDescGZIP(), []int{5}
}

func (x *OAuthToken) GetServiceAccountEmail() string {
	if x != nil {
		return x.ServiceAccountEmail
	}
	return ""
}

func (x *OAuthToken) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

// Contains information needed for generating an
// [OpenID Connect
// token](https://developers.google.com/identity/protocols/OpenIDConnect).
// This type of authorization can be used for many scenarios, including
// calling Cloud Run, or endpoints where you intend to validate the token
// yourself.
type OidcToken struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [Service account email](https://cloud.google.com/iam/docs/service-accounts)
	// to be used for generating OIDC token.
	// The service account must be within the same project as the job. The caller
	// must have iam.serviceAccounts.actAs permission for the service account.
	ServiceAccountEmail string `protobuf:"bytes,1,opt,name=service_account_email,json=serviceAccountEmail,proto3" json:"service_account_email,omitempty"`
	// Audience to be used when generating OIDC token. If not specified, the URI
	// specified in target will be used.
	Audience      string `protobuf:"bytes,2,opt,name=audience,proto3" json:"audience,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OidcToken) Reset() {
	*x = OidcToken{}
	mi := &file_cloud_scheduler_v1_data_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OidcToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OidcToken) ProtoMessage() {}

func (x *OidcToken) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_scheduler_v1_data_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OidcToken.ProtoReflect.Descriptor instead.
func (*OidcToken) Descriptor() ([]byte, []int) {
	return file_cloud_scheduler_v1_data_proto_rawDescGZIP(), []int{6}
}

func (x *OidcToken) GetServiceAccountEmail() string {
	if x != nil {
		return x.ServiceAccountEmail
	}
	return ""
}

func (x *OidcToken) GetAudience() string {
	if x != nil {
		return x.Audience
	}
	return ""
}

// Configuration for a job.
// The maximum allowed size for a job is 1MB.
type Job struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optionally caller-specified in
	// [CreateJob][google.cloud.scheduler.v1.CloudScheduler.CreateJob], after
	// which it becomes output only.
	//
	// The job name. For example:
	// `projects/PROJECT_ID/locations/LOCATION_ID/jobs/JOB_ID`.
	//
	//   - `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]),
	//     hyphens (-), colons (:), or periods (.).
	//     For more information, see
	//     [Identifying
	//     projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects)
	//   - `LOCATION_ID` is the canonical ID for the job's location.
	//     The list of available locations can be obtained by calling
	//     [ListLocations][google.cloud.location.Locations.ListLocations].
	//     For more information, see https://cloud.google.com/about/locations/.
	//   - `JOB_ID` can contain only letters ([A-Za-z]), numbers ([0-9]),
	//     hyphens (-), or underscores (_). The maximum length is 500 characters.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optionally caller-specified in
	// [CreateJob][google.cloud.scheduler.v1.CloudScheduler.CreateJob] or
	// [UpdateJob][google.cloud.scheduler.v1.CloudScheduler.UpdateJob].
	//
	// A human-readable description for the job. This string must not contain
	// more than 500 characters.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Required.
	//
	// Delivery settings containing destination and parameters.
	//
	// Types that are valid to be assigned to Target:
	//
	//	*Job_PubsubTarget
	//	*Job_AppEngineHttpTarget
	//	*Job_HttpTarget
	Target isJob_Target `protobuf_oneof:"target"`
	// Required, except when used with
	// [UpdateJob][google.cloud.scheduler.v1.CloudScheduler.UpdateJob].
	//
	// Describes the schedule on which the job will be executed.
	//
	// The schedule can be either of the following types:
	//
	// * [Crontab](https://en.wikipedia.org/wiki/Cron#Overview)
	// * English-like
	// [schedule](https://cloud.google.com/scheduler/docs/configuring/cron-job-schedules)
	//
	// As a general rule, execution `n + 1` of a job will not begin
	// until execution `n` has finished. Cloud Scheduler will never
	// allow two simultaneously outstanding executions. For example,
	// this implies that if the `n+1`th execution is scheduled to run at
	// 16:00 but the `n`th execution takes until 16:15, the `n+1`th
	// execution will not start until `16:15`.
	// A scheduled start time will be delayed if the previous
	// execution has not ended when its scheduled time occurs.
	//
	// If [retry_count][google.cloud.scheduler.v1.RetryConfig.retry_count] > 0 and
	// a job attempt fails, the job will be tried a total of
	// [retry_count][google.cloud.scheduler.v1.RetryConfig.retry_count] times,
	// with exponential backoff, until the next scheduled start time. If
	// retry_count is 0, a job attempt will not be retried if it fails. Instead
	// the Cloud Scheduler system will wait for the next scheduled execution time.
	// Setting retry_count to 0 does not prevent failed jobs from running
	// according to schedule after the failure.
	Schedule string `protobuf:"bytes,20,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// Specifies the time zone to be used in interpreting
	// [schedule][google.cloud.scheduler.v1.Job.schedule]. The value of this field
	// must be a time zone name from the [tz
	// database](http://en.wikipedia.org/wiki/Tz_database).
	//
	// Note that some time zones include a provision for
	// daylight savings time. The rules for daylight saving time are
	// determined by the chosen tz. For UTC use the string "utc". If a
	// time zone is not specified, the default will be in UTC (also known
	// as GMT).
	TimeZone string `protobuf:"bytes,21,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	// Output only. The creation time of the job.
	UserUpdateTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=user_update_time,json=userUpdateTime,proto3" json:"user_update_time,omitempty"`
	// Output only. State of the job.
	State Job_State `protobuf:"varint,10,opt,name=state,proto3,enum=google.events.cloud.scheduler.v1.Job_State" json:"state,omitempty"`
	// Output only. The response from the target for the last attempted execution.
	Status *status.Status `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Output only. The next time the job is scheduled. Note that this may be a
	// retry of a previously failed attempt or the next execution time
	// according to the schedule.
	ScheduleTime *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=schedule_time,json=scheduleTime,proto3" json:"schedule_time,omitempty"`
	// Output only. The time the last job attempt started.
	LastAttemptTime *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=last_attempt_time,json=lastAttemptTime,proto3" json:"last_attempt_time,omitempty"`
	// Settings that determine the retry behavior.
	RetryConfig *RetryConfig `protobuf:"bytes,19,opt,name=retry_config,json=retryConfig,proto3" json:"retry_config,omitempty"`
	// The deadline for job attempts. If the request handler does not respond by
	// this deadline then the request is cancelled and the attempt is marked as a
	// `DEADLINE_EXCEEDED` failure. The failed attempt can be viewed in
	// execution logs. Cloud Scheduler will retry the job according
	// to the [RetryConfig][google.cloud.scheduler.v1.RetryConfig].
	//
	// The default and the allowed values depend on the type of target:
	//
	// * For [HTTP targets][google.cloud.scheduler.v1.Job.http_target], the
	// default is 3 minutes. The deadline must be in the interval [15 seconds, 30
	// minutes].
	//
	// * For [App Engine HTTP
	// targets][google.cloud.scheduler.v1.Job.app_engine_http_target], 0 indicates
	// that the request has the default deadline. The default deadline depends on
	// the scaling type of the service: 10 minutes for standard apps with
	// automatic scaling, 24 hours for standard apps with manual and basic
	// scaling, and 60 minutes for flex apps. If the request deadline is set, it
	// must be in the interval [15 seconds, 24 hours 15 seconds].
	//
	// * For [Pub/Sub targets][google.cloud.scheduler.v1.Job.pubsub_target], this
	// field is ignored.
	AttemptDeadline *durationpb.Duration `protobuf:"bytes,22,opt,name=attempt_deadline,json=attemptDeadline,proto3" json:"attempt_deadline,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Job) Reset() {
	*x = Job{}
	mi := &file_cloud_scheduler_v1_data_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_scheduler_v1_data_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_cloud_scheduler_v1_data_proto_rawDescGZIP(), []int{7}
}

func (x *Job) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Job) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Job) GetTarget() isJob_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Job) GetPubsubTarget() *PubsubTarget {
	if x != nil {
		if x, ok := x.Target.(*Job_PubsubTarget); ok {
			return x.PubsubTarget
		}
	}
	return nil
}

func (x *Job) GetAppEngineHttpTarget() *AppEngineHttpTarget {
	if x != nil {
		if x, ok := x.Target.(*Job_AppEngineHttpTarget); ok {
			return x.AppEngineHttpTarget
		}
	}
	return nil
}

func (x *Job) GetHttpTarget() *HttpTarget {
	if x != nil {
		if x, ok := x.Target.(*Job_HttpTarget); ok {
			return x.HttpTarget
		}
	}
	return nil
}

func (x *Job) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

func (x *Job) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *Job) GetUserUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UserUpdateTime
	}
	return nil
}

func (x *Job) GetState() Job_State {
	if x != nil {
		return x.State
	}
	return Job_STATE_UNSPECIFIED
}

func (x *Job) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Job) GetScheduleTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduleTime
	}
	return nil
}

func (x *Job) GetLastAttemptTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAttemptTime
	}
	return nil
}

func (x *Job) GetRetryConfig() *RetryConfig {
	if x != nil {
		return x.RetryConfig
	}
	return nil
}

func (x *Job) GetAttemptDeadline() *durationpb.Duration {
	if x != nil {
		return x.AttemptDeadline
	}
	return nil
}

type isJob_Target interface {
	isJob_Target()
}

type Job_PubsubTarget struct {
	// Pub/Sub target.
	PubsubTarget *PubsubTarget `protobuf:"bytes,4,opt,name=pubsub_target,json=pubsubTarget,proto3,oneof"`
}

type Job_AppEngineHttpTarget struct {
	// App Engine HTTP target.
	AppEngineHttpTarget *AppEngineHttpTarget `protobuf:"bytes,5,opt,name=app_engine_http_target,json=appEngineHttpTarget,proto3,oneof"`
}

type Job_HttpTarget struct {
	// HTTP target.
	HttpTarget *HttpTarget `protobuf:"bytes,6,opt,name=http_target,json=httpTarget,proto3,oneof"`
}

func (*Job_PubsubTarget) isJob_Target() {}

func (*Job_AppEngineHttpTarget) isJob_Target() {}

func (*Job_HttpTarget) isJob_Target() {}

// Settings that determine the retry behavior.
//
// By default, if a job does not complete successfully (meaning that
// an acknowledgement is not received from the handler, then it will be retried
// with exponential backoff according to the settings in
// [RetryConfig][google.cloud.scheduler.v1.RetryConfig].
type RetryConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of attempts that the system will make to run a job using the
	// exponential backoff procedure described by
	// [max_doublings][google.cloud.scheduler.v1.RetryConfig.max_doublings].
	//
	// The default value of retry_count is zero.
	//
	// If retry_count is 0, a job attempt will not be retried if
	// it fails. Instead the Cloud Scheduler system will wait for the
	// next scheduled execution time. Setting retry_count to 0 does not prevent
	// failed jobs from running according to schedule after the failure.
	//
	// If retry_count is set to a non-zero number then Cloud Scheduler
	// will retry failed attempts, using exponential backoff,
	// retry_count times, or until the next scheduled execution time,
	// whichever comes first.
	//
	// Values greater than 5 and negative values are not allowed.
	RetryCount int32 `protobuf:"varint,1,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
	// The time limit for retrying a failed job, measured from time when an
	// execution was first attempted. If specified with
	// [retry_count][google.cloud.scheduler.v1.RetryConfig.retry_count], the job
	// will be retried until both limits are reached.
	//
	// The default value for max_retry_duration is zero, which means retry
	// duration is unlimited.
	MaxRetryDuration *durationpb.Duration `protobuf:"bytes,2,opt,name=max_retry_duration,json=maxRetryDuration,proto3" json:"max_retry_duration,omitempty"`
	// The minimum amount of time to wait before retrying a job after
	// it fails.
	//
	// The default value of this field is 5 seconds.
	MinBackoffDuration *durationpb.Duration `protobuf:"bytes,3,opt,name=min_backoff_duration,json=minBackoffDuration,proto3" json:"min_backoff_duration,omitempty"`
	// The maximum amount of time to wait before retrying a job after
	// it fails.
	//
	// The default value of this field is 1 hour.
	MaxBackoffDuration *durationpb.Duration `protobuf:"bytes,4,opt,name=max_backoff_duration,json=maxBackoffDuration,proto3" json:"max_backoff_duration,omitempty"`
	// The time between retries will double `max_doublings` times.
	//
	// A job's retry interval starts at
	// [min_backoff_duration][google.cloud.scheduler.v1.RetryConfig.min_backoff_duration],
	// then doubles `max_doublings` times, then increases linearly, and finally
	// retries at intervals of
	// [max_backoff_duration][google.cloud.scheduler.v1.RetryConfig.max_backoff_duration]
	// up to [retry_count][google.cloud.scheduler.v1.RetryConfig.retry_count]
	// times.
	//
	// For example, if
	// [min_backoff_duration][google.cloud.scheduler.v1.RetryConfig.min_backoff_duration]
	// is 10s,
	// [max_backoff_duration][google.cloud.scheduler.v1.RetryConfig.max_backoff_duration]
	// is 300s, and `max_doublings` is 3, then the job will first be retried in
	// 10s. The retry interval will double three times, and then increase linearly
	// by 2^3 * 10s.  Finally, the job will retry at intervals of
	// [max_backoff_duration][google.cloud.scheduler.v1.RetryConfig.max_backoff_duration]
	// until the job has been attempted
	// [retry_count][google.cloud.scheduler.v1.RetryConfig.retry_count] times.
	// Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s,
	// 300s, ....
	//
	// The default value of this field is 5.
	MaxDoublings  int32 `protobuf:"varint,5,opt,name=max_doublings,json=maxDoublings,proto3" json:"max_doublings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetryConfig) Reset() {
	*x = RetryConfig{}
	mi := &file_cloud_scheduler_v1_data_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryConfig) ProtoMessage() {}

func (x *RetryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_scheduler_v1_data_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryConfig.ProtoReflect.Descriptor instead.
func (*RetryConfig) Descriptor() ([]byte, []int) {
	return file_cloud_scheduler_v1_data_proto_rawDescGZIP(), []int{8}
}

func (x *RetryConfig) GetRetryCount() int32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *RetryConfig) GetMaxRetryDuration() *durationpb.Duration {
	if x != nil {
		return x.MaxRetryDuration
	}
	return nil
}

func (x *RetryConfig) GetMinBackoffDuration() *durationpb.Duration {
	if x != nil {
		return x.MinBackoffDuration
	}
	return nil
}

func (x *RetryConfig) GetMaxBackoffDuration() *durationpb.Duration {
	if x != nil {
		return x.MaxBackoffDuration
	}
	return nil
}

func (x *RetryConfig) GetMaxDoublings() int32 {
	if x != nil {
		return x.MaxDoublings
	}
	return 0
}

// The data within all Job events.
type JobEventData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The Job event payload. Unset for deletion events.
	Payload       *Job `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobEventData) Reset() {
	*x = JobEventData{}
	mi := &file_cloud_scheduler_v1_data_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobEventData) ProtoMessage() {}

func (x *JobEventData) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_scheduler_v1_data_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobEventData.ProtoReflect.Descriptor instead.
func (*JobEventData) Descriptor() ([]byte, []int) {
	return file_cloud_scheduler_v1_data_proto_rawDescGZIP(), []int{9}
}

func (x *JobEventData) GetPayload() *Job {
	if x != nil {
		return x.Payload
	}
	return nil
}

var File_cloud_scheduler_v1_data_proto protoreflect.FileDescriptor

const file_cloud_scheduler_v1_data_proto_rawDesc = "" +
	"\n" +
	"\x1dcloud/scheduler/v1/data.proto\x12 google.events.cloud.scheduler.v1\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x17google/rpc/status.proto\"3\n" +
	"\x10SchedulerJobData\x12\x1f\n" +
	"\vcustom_data\x18\x01 \x01(\fR\n" +
	"customData\"\xc9\x03\n" +
	"\n" +
	"HttpTarget\x12\x10\n" +
	"\x03uri\x18\x01 \x01(\tR\x03uri\x12M\n" +
	"\vhttp_method\x18\x02 \x01(\x0e2,.google.events.cloud.scheduler.v1.HttpMethodR\n" +
	"httpMethod\x12S\n" +
	"\aheaders\x18\x03 \x03(\v29.google.events.cloud.scheduler.v1.HttpTarget.HeadersEntryR\aheaders\x12\x12\n" +
	"\x04body\x18\x04 \x01(\fR\x04body\x12O\n" +
	"\voauth_token\x18\x05 \x01(\v2,.google.events.cloud.scheduler.v1.OAuthTokenH\x00R\n" +
	"oauthToken\x12L\n" +
	"\n" +
	"oidc_token\x18\x06 \x01(\v2+.google.events.cloud.scheduler.v1.OidcTokenH\x00R\toidcToken\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x16\n" +
	"\x14authorization_header\"\x97\x03\n" +
	"\x13AppEngineHttpTarget\x12M\n" +
	"\vhttp_method\x18\x01 \x01(\x0e2,.google.events.cloud.scheduler.v1.HttpMethodR\n" +
	"httpMethod\x12`\n" +
	"\x12app_engine_routing\x18\x02 \x01(\v22.google.events.cloud.scheduler.v1.AppEngineRoutingR\x10appEngineRouting\x12!\n" +
	"\frelative_uri\x18\x03 \x01(\tR\vrelativeUri\x12\\\n" +
	"\aheaders\x18\x04 \x03(\v2B.google.events.cloud.scheduler.v1.AppEngineHttpTarget.HeadersEntryR\aheaders\x12\x12\n" +
	"\x04body\x18\x05 \x01(\fR\x04body\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xe0\x01\n" +
	"\fPubsubTarget\x12\x1d\n" +
	"\n" +
	"topic_name\x18\x01 \x01(\tR\ttopicName\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\x12^\n" +
	"\n" +
	"attributes\x18\x04 \x03(\v2>.google.events.cloud.scheduler.v1.PubsubTarget.AttributesEntryR\n" +
	"attributes\x1a=\n" +
	"\x0fAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"v\n" +
	"\x10AppEngineRouting\x12\x18\n" +
	"\aservice\x18\x01 \x01(\tR\aservice\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12\x1a\n" +
	"\binstance\x18\x03 \x01(\tR\binstance\x12\x12\n" +
	"\x04host\x18\x04 \x01(\tR\x04host\"V\n" +
	"\n" +
	"OAuthToken\x122\n" +
	"\x15service_account_email\x18\x01 \x01(\tR\x13serviceAccountEmail\x12\x14\n" +
	"\x05scope\x18\x02 \x01(\tR\x05scope\"[\n" +
	"\tOidcToken\x122\n" +
	"\x15service_account_email\x18\x01 \x01(\tR\x13serviceAccountEmail\x12\x1a\n" +
	"\baudience\x18\x02 \x01(\tR\baudience\"\xc4\a\n" +
	"\x03Job\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12U\n" +
	"\rpubsub_target\x18\x04 \x01(\v2..google.events.cloud.scheduler.v1.PubsubTargetH\x00R\fpubsubTarget\x12l\n" +
	"\x16app_engine_http_target\x18\x05 \x01(\v25.google.events.cloud.scheduler.v1.AppEngineHttpTargetH\x00R\x13appEngineHttpTarget\x12O\n" +
	"\vhttp_target\x18\x06 \x01(\v2,.google.events.cloud.scheduler.v1.HttpTargetH\x00R\n" +
	"httpTarget\x12\x1a\n" +
	"\bschedule\x18\x14 \x01(\tR\bschedule\x12\x1b\n" +
	"\ttime_zone\x18\x15 \x01(\tR\btimeZone\x12D\n" +
	"\x10user_update_time\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\x0euserUpdateTime\x12A\n" +
	"\x05state\x18\n" +
	" \x01(\x0e2+.google.events.cloud.scheduler.v1.Job.StateR\x05state\x12*\n" +
	"\x06status\x18\v \x01(\v2\x12.google.rpc.StatusR\x06status\x12?\n" +
	"\rschedule_time\x18\x11 \x01(\v2\x1a.google.protobuf.TimestampR\fscheduleTime\x12F\n" +
	"\x11last_attempt_time\x18\x12 \x01(\v2\x1a.google.protobuf.TimestampR\x0flastAttemptTime\x12P\n" +
	"\fretry_config\x18\x13 \x01(\v2-.google.events.cloud.scheduler.v1.RetryConfigR\vretryConfig\x12D\n" +
	"\x10attempt_deadline\x18\x16 \x01(\v2\x19.google.protobuf.DurationR\x0fattemptDeadline\"X\n" +
	"\x05State\x12\x15\n" +
	"\x11STATE_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aENABLED\x10\x01\x12\n" +
	"\n" +
	"\x06PAUSED\x10\x02\x12\f\n" +
	"\bDISABLED\x10\x03\x12\x11\n" +
	"\rUPDATE_FAILED\x10\x04B\b\n" +
	"\x06target\"\xb6\x02\n" +
	"\vRetryConfig\x12\x1f\n" +
	"\vretry_count\x18\x01 \x01(\x05R\n" +
	"retryCount\x12G\n" +
	"\x12max_retry_duration\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\x10maxRetryDuration\x12K\n" +
	"\x14min_backoff_duration\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\x12minBackoffDuration\x12K\n" +
	"\x14max_backoff_duration\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\x12maxBackoffDuration\x12#\n" +
	"\rmax_doublings\x18\x05 \x01(\x05R\fmaxDoublings\"O\n" +
	"\fJobEventData\x12?\n" +
	"\apayload\x18\x01 \x01(\v2%.google.events.cloud.scheduler.v1.JobR\apayload*s\n" +
	"\n" +
	"HttpMethod\x12\x1b\n" +
	"\x17HTTP_METHOD_UNSPECIFIED\x10\x00\x12\b\n" +
	"\x04POST\x10\x01\x12\a\n" +
	"\x03GET\x10\x02\x12\b\n" +
	"\x04HEAD\x10\x03\x12\a\n" +
	"\x03PUT\x10\x04\x12\n" +
	"\n" +
	"\x06DELETE\x10\x05\x12\t\n" +
	"\x05PATCH\x10\x06\x12\v\n" +
	"\aOPTIONS\x10\aBv\xaa\x02)Google.Events.Protobuf.Cloud.Scheduler.V1\xca\x02 Google\\Events\\Cloud\\Scheduler\\V1\xea\x02$Google::Events::Cloud::Scheduler::V1b\x06proto3"

var (
	file_cloud_scheduler_v1_data_proto_rawDescOnce sync.Once
	file_cloud_scheduler_v1_data_proto_rawDescData []byte
)

func file_cloud_scheduler_v1_data_proto_rawDescGZIP() []byte {
	file_cloud_scheduler_v1_data_proto_rawDescOnce.Do(func() {
		file_cloud_scheduler_v1_data_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cloud_scheduler_v1_data_proto_rawDesc), len(file_cloud_scheduler_v1_data_proto_rawDesc)))
	})
	return file_cloud_scheduler_v1_data_proto_rawDescData
}

var file_cloud_scheduler_v1_data_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_cloud_scheduler_v1_data_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_cloud_scheduler_v1_data_proto_goTypes = []any{
	(HttpMethod)(0),               // 0: google.events.cloud.scheduler.v1.HttpMethod
	(Job_State)(0),                // 1: google.events.cloud.scheduler.v1.Job.State
	(*SchedulerJobData)(nil),      // 2: google.events.cloud.scheduler.v1.SchedulerJobData
	(*HttpTarget)(nil),            // 3: google.events.cloud.scheduler.v1.HttpTarget
	(*AppEngineHttpTarget)(nil),   // 4: google.events.cloud.scheduler.v1.AppEngineHttpTarget
	(*PubsubTarget)(nil),          // 5: google.events.cloud.scheduler.v1.PubsubTarget
	(*AppEngineRouting)(nil),      // 6: google.events.cloud.scheduler.v1.AppEngineRouting
	(*OAuthToken)(nil),            // 7: google.events.cloud.scheduler.v1.OAuthToken
	(*OidcToken)(nil),             // 8: google.events.cloud.scheduler.v1.OidcToken
	(*Job)(nil),                   // 9: google.events.cloud.scheduler.v1.Job
	(*RetryConfig)(nil),           // 10: google.events.cloud.scheduler.v1.RetryConfig
	(*JobEventData)(nil),          // 11: google.events.cloud.scheduler.v1.JobEventData
	nil,                           // 12: google.events.cloud.scheduler.v1.HttpTarget.HeadersEntry
	nil,                           // 13: google.events.cloud.scheduler.v1.AppEngineHttpTarget.HeadersEntry
	nil,                           // 14: google.events.cloud.scheduler.v1.PubsubTarget.AttributesEntry
	(*timestamppb.Timestamp)(nil), // 15: google.protobuf.Timestamp
	(*status.Status)(nil),         // 16: google.rpc.Status
	(*durationpb.Duration)(nil),   // 17: google.protobuf.Duration
}
var file_cloud_scheduler_v1_data_proto_depIdxs = []int32{
	0,  // 0: google.events.cloud.scheduler.v1.HttpTarget.http_method:type_name -> google.events.cloud.scheduler.v1.HttpMethod
	12, // 1: google.events.cloud.scheduler.v1.HttpTarget.headers:type_name -> google.events.cloud.scheduler.v1.HttpTarget.HeadersEntry
	7,  // 2: google.events.cloud.scheduler.v1.HttpTarget.oauth_token:type_name -> google.events.cloud.scheduler.v1.OAuthToken
	8,  // 3: google.events.cloud.scheduler.v1.HttpTarget.oidc_token:type_name -> google.events.cloud.scheduler.v1.OidcToken
	0,  // 4: google.events.cloud.scheduler.v1.AppEngineHttpTarget.http_method:type_name -> google.events.cloud.scheduler.v1.HttpMethod
	6,  // 5: google.events.cloud.scheduler.v1.AppEngineHttpTarget.app_engine_routing:type_name -> google.events.cloud.scheduler.v1.AppEngineRouting
	13, // 6: google.events.cloud.scheduler.v1.AppEngineHttpTarget.headers:type_name -> google.events.cloud.scheduler.v1.AppEngineHttpTarget.HeadersEntry
	14, // 7: google.events.cloud.scheduler.v1.PubsubTarget.attributes:type_name -> google.events.cloud.scheduler.v1.PubsubTarget.AttributesEntry
	5,  // 8: google.events.cloud.scheduler.v1.Job.pubsub_target:type_name -> google.events.cloud.scheduler.v1.PubsubTarget
	4,  // 9: google.events.cloud.scheduler.v1.Job.app_engine_http_target:type_name -> google.events.cloud.scheduler.v1.AppEngineHttpTarget
	3,  // 10: google.events.cloud.scheduler.v1.Job.http_target:type_name -> google.events.cloud.scheduler.v1.HttpTarget
	15, // 11: google.events.cloud.scheduler.v1.Job.user_update_time:type_name -> google.protobuf.Timestamp
	1,  // 12: google.events.cloud.scheduler.v1.Job.state:type_name -> google.events.cloud.scheduler.v1.Job.State
	16, // 13: google.events.cloud.scheduler.v1.Job.status:type_name -> google.rpc.Status
	15, // 14: google.events.cloud.scheduler.v1.Job.schedule_time:type_name -> google.protobuf.Timestamp
	15, // 15: google.events.cloud.scheduler.v1.Job.last_attempt_time:type_name -> google.protobuf.Timestamp
	10, // 16: google.events.cloud.scheduler.v1.Job.retry_config:type_name -> google.events.cloud.scheduler.v1.RetryConfig
	17, // 17: google.events.cloud.scheduler.v1.Job.attempt_deadline:type_name -> google.protobuf.Duration
	17, // 18: google.events.cloud.scheduler.v1.RetryConfig.max_retry_duration:type_name -> google.protobuf.Duration
	17, // 19: google.events.cloud.scheduler.v1.RetryConfig.min_backoff_duration:type_name -> google.protobuf.Duration
	17, // 20: google.events.cloud.scheduler.v1.RetryConfig.max_backoff_duration:type_name -> google.protobuf.Duration
	9,  // 21: google.events.cloud.scheduler.v1.JobEventData.payload:type_name -> google.events.cloud.scheduler.v1.Job
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_cloud_scheduler_v1_data_proto_init() }
func file_cloud_scheduler_v1_data_proto_init() {
	if File_cloud_scheduler_v1_data_proto != nil {
		return
	}
	file_cloud_scheduler_v1_data_proto_msgTypes[1].OneofWrappers = []any{
		(*HttpTarget_OauthToken)(nil),
		(*HttpTarget_OidcToken)(nil),
	}
	file_cloud_scheduler_v1_data_proto_msgTypes[7].OneofWrappers = []any{
		(*Job_PubsubTarget)(nil),
		(*Job_AppEngineHttpTarget)(nil),
		(*Job_HttpTarget)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cloud_scheduler_v1_data_proto_rawDesc), len(file_cloud_scheduler_v1_data_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloud_scheduler_v1_data_proto_goTypes,
		DependencyIndexes: file_cloud_scheduler_v1_data_proto_depIdxs,
		EnumInfos:         file_cloud_scheduler_v1_data_proto_enumTypes,
		MessageInfos:      file_cloud_scheduler_v1_data_proto_msgTypes,
	}.Build()
	File_cloud_scheduler_v1_data_proto = out.File
	file_cloud_scheduler_v1_data_proto_goTypes = nil
	file_cloud_scheduler_v1_data_proto_depIdxs = nil
}
